[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "This is a book created from a variety of Accounting textbooks used in a University degree. The goal is to make this book an all in one resource on Accounting main concepts while teaching how to use the programming language of Python to make the various accounting calculations faster and iteratively.\nMany accounting calculations are repetitive and usually one calculation ties into another calculation, which makes it very suitable for using functions that use already calculated output. Typically the Accounting world uses Microsoft Excel or proprietary software such as SAS or SPSS or others, while Python is free to use and learning the Python language is very much a valuable skill.\nOften you have accounting information stored in .xlsx files or pdf files, none of which are reproducible when you pass to a colleague or classmate. Mistakes are easy to make when working with Excel sheets, one cell can have a function but that cell’s function is not obvious and errors can happen if that cell gets altered. In Python, you can take in a xlsx or pdf file, read the data from it and run your functions to make calculations and then make a dashboard, a presentation or a web app that anyone can just go to the url and use the app.\nBy learning Python you are learning how to be more efficient with your accounting, as you write one function to calculate cost of goods sold, then you can just use that same function a million times. That function can live in one file somewhere on your computer and you can call (import) it into the current running file and still get the output you want.\nThis book will show how to make use of Python’s data objects that store data and place these into function to make our calculations repeatable. This book is a companion to the YouTube channel AccountingPy."
  },
  {
    "objectID": "chapter1.html",
    "href": "chapter1.html",
    "title": "1  Chapter 1",
    "section": "",
    "text": "hello world !"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "14  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\nhttps://www.accountingtools.com/articles/what-is-standard-hours-allowed.html\nhttps://www.investopedia.com/terms/o/overhead-rate.asp"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AccountingPy",
    "section": "",
    "text": "Welcome\nThis is a free online textbook on Accounting using Python."
  },
  {
    "objectID": "glossary.html",
    "href": "glossary.html",
    "title": "Glossary",
    "section": "",
    "text": "Accounting - the information system that identifies and records the economic events of an organization and then communicates them to a wide variety of interested users.\nActivity index - the activity that causes changes in the behavior of costs\nConversion costs - the sum of direct manufacturing labor costs and manufacturing overhead costs\nCost - an economic resource given up to accomplish a particular objective\nCost behavior analysis - the study of how specific costs respond to changes in the level of business activity\nCost object - anything for which cost information is measured and accumulated\naccounts receivable - the operation of receiving money in the future from customers. This is an asset as they represent an economic resource (cash) and will be eventually collected.\naccounts payable - short term liability from some expenses when a company purchases inventory or supplies on credit from suppliers.\ninterest payable - the outstanding (unpaid) liability amounts owed to various lenders and creditors\n\ndividends payable, salaries payable, property payable, sales tax payable\n\nBusiness goal is to sell a good or service for a price greater than the cost of producing or purchasing the good or providing the service, plus the cost of operating the business.\nnet income - revenues are greater than the expenses incurred to generate the revenues. (net earnings, profit)\nInternal users - internal accounting information manage companies, non-profits and government organizations, help these organizations make decisions required to run the company.\nExternal users - do not have access to internal accounting information, the general public.\nPrimary users:\n\ninvestors : use accounting information to make decisions to buy, hold, or sell their ownership shares\nlenders: use accounting information to evaluate the risks of lending money\ncreditors: use accounting information to decide whether or not to grant credit to a customer\n\nProprietorship - a business owned by one person, (sole proprietorship)\nreporting entity concept - the separation of business and personal records of economic activity, to be distinct from activities of the owner and all other economic entities.\nPartnerships - a business owned by more than one person\nCorporations - a business organized as a separate legal entity owned by shareholders and is the most complex form of business to establish.\nPublic corporations - corporations that share their shares/stocks on the Stock Exchange, and are required to distribute their financial statements to investors, lenders, creditors and the public every three months.\nSEDAR - system for electronic document analysis and retrieval, financial statement website for Canadian public corporations\nPrivate corporations - corporations that issue shares but they do not make them public, nor are the shares traded on the Stock Exchange.\nGAAP - generally accepted accounting principles, which are rules,practices, procedures for recording and reporting economic events.\nIFRS - public traded corporations must use the international financial reporting standards\nASPE - for private corporations must use accounting standards for private enterprises\nbusiness activities = financing (money to expand operations), investing (building, renovations, purchasing) and operating (activities that finance company)\n\nFinancial activities\nCapital (money) is required to start any business. Methods for raising funds for corporations:\n\nissuing (selling) shares (equity financing)\nborrowing money (debt financing)\n\ncommon shares (share capital) - the amount paid by investors for shares of ownership in a company, these investors are shareholders\ndividends - payments that distribute a portion of income to shareholders\nliabilities - amounts owed to lender and creditors in form of debt and obligations\nbank indebtedness - this liability is when a company uses its operating line of credit to cover cash shortfalls and overdraws its bank account\nCorporations can borrow using a short-term bank loan payable (note payable) or long term debt which can include mortgages payable, bonds payable, finance lease obligations and other types of debt securities.\n\n\nInvesting activities\nPost fund raising, the money i sused for investing activities, which include purchase or sale of long lived assets that a company needs in order to operate.\nAssets - resources that a company owns or controls. “property, plant and equipment” phrase is used to sum up all the assets of a company.\ngoodwill - when a company pays more than the value of purchased company’s net identifiable assets when acquiring a company\nintangible assets - assets that do not have any physical substance themselves but represent a privilege or a right granted to a company\n\npurchase is outflow, sale is inflow\n\n\n\nOperating activities\nA company has raised funds and investments, it now does operating activities.\nSources of income (finance income):\n\nsales revenue\nservice revenue\ninterest revenue\nrent revenue\n\naccounts receivable - the operation of receiving money in the future from customers. This is an asset as they represent an economic resource (cash) and will be eventually collected.\n\nsupplies are short term assets used in daily operations\ninventory are items held for future sale to customers. When items are sold, they become an expense\n\nThe cost of inventory sold is an expense called cost of goods sold.\n\nexpenses are decreases in economic resources\nother names for expenses = cost of sales, selling operating and administrative expenses, and income tax expense.\n\naccounts payable - short term liability from some expenses when a company purchases inventory or supplies on credit from suppliers.\ninterest payable - the outstanding (unpaid) liability amounts owed to various lenders and creditors\n\ndividends payable, salaries payable, property payable, sales tax payable\n\nBusiness goal is to sell a good or service for a price greater than the cost of producing or purchasing the good or providing the service, plus the cost of operating the business.\nnet income - revenues are greater than the expenses incurred to generate the revenues. (net earnings, profit)\n\n\nFinancial statements\nFor external reporting purposes to provide information on assets,liabilities, shareholders equity and cash flow.\nThere are 4 required financial statements:\n\nincome statement - reports revenues and expenses, showing how a company’s operations performed during a period of time\nstatement of changes in equity - shows changes in each component of shareholders equity (common shares and retained earnings) and total equity during period of time\nstatement of financial position - what a company owns (assets), what it owes (liabilities) and resulting difference (shareholder equity) at a specific point in time\nstatement of cash flows - where a company obtained cash during a period of time and how that cash was used\n\n\nStatement of changes in Equity\nAccount balances at the beginning of the period and ends with the account balances at the end of the period. The ownership interest in a company is known as shareholder’s equity, which is the total shareholder’s equity including:\n\nshare capital : the amounts contributed by the shareholders in exchange for shares of ownership\nretained earnings\nother accounts\n\ncommon shares (end of period) = common shares (begin of period) + common shares issued (sold) - common shares repurchased\nretained earnings - the cumulative amounts of net income that have been retained in the corporation (not distributed as dividends to shareholders). If retained earnings is negative that is net loesses have exceeded net income (deficit)"
  },
  {
    "objectID": "chapter1.html#the-purpose-use-of-financial-statements",
    "href": "chapter1.html#the-purpose-use-of-financial-statements",
    "title": "2  Financial Accounting",
    "section": "2.1 The Purpose & Use of Financial Statements",
    "text": "2.1 The Purpose & Use of Financial Statements\nFinancial Statements provide the means of communicating the economic events of an organization and sharing with a variety of interested users.\nOne important function to calculate is the net income, using Python we can make a function to calculate this so in the future we can simply pass in the data required then get the output.\n`"
  },
  {
    "objectID": "pythonbasics.html",
    "href": "pythonbasics.html",
    "title": "1  Python Basics",
    "section": "",
    "text": "Hello, welcome to the crash course on Python basics! This section will get you very quickly introduced to Python in order for you to follow along with the book.\nThere are numerous Python tutorials that will help you fully understand the programming language. Some resources I personally have found very helpful (general python learning, various topics):\n\nReal Python tutorials. Very beginner friendly\nfreecodecamp (YouTube, 4.5 hours long) - Python full tutorial\nTech with Tim (YouTube)\nPatrick Loeber (YouTube)\n\nNone of the links above deal with accounting but will provide depth in explanations of the code you will see here.\n6+3"
  },
  {
    "objectID": "pythonbasics.html#variables",
    "href": "pythonbasics.html#variables",
    "title": "1  Python Basics",
    "section": "1.1 Variables",
    "text": "1.1 Variables\nVariables are names to store data. If you have a long variable name, use underscores (_) to keep the words together. For long numbers you can use the underscore to act like a comma, but do not use a comma like you would in Excel.\nSome simple rules for variable names:\n\nvariables can’t start with a dot or have a dot in the name (.)\nvariables can’t start with a number or special character\n\n\n\nShow the code\nvariable_one = \"variable string\"\n\nvariable_1 = 1\nvariable1 = 1\n\n\nVariables are essential in programming, you make a variable in order for you to use again and again. Variables are limited in where they can be accessed (used) in a program based on the function scope (scope ?) but allows for reprodicibility within your program."
  },
  {
    "objectID": "pythonbasics.html#strings",
    "href": "pythonbasics.html#strings",
    "title": "1  Python Basics",
    "section": "1.2 Strings",
    "text": "1.2 Strings\nStrings are typically letters but anything can be a string, as a string is anything inside ” ” or ’ ’ quotation marks. Strings are stored inside a variable which you get to name whatever you want. Note: some words are reserved and cannot be used; while, if, break, else, etc. If you use a reserved word you get an error and will not be able to run your code.\n\n\nShow the code\nstringy = \"pasta noodles\"\n\nchartered_accountant = \"Jane Doe\"\n\nstring_number = \"899\"\n\n\nEverything that is inside ” ” is considered a data type of string, this is important to remember as you can get errors or get output you are not expecting if you call (use) some functions on a string data type variable meant for a numerical data type.\n\n\nShow the code\na = \"5\"\nb = \"10\"\n\ny = a + b\n\n\nThe output for y is not 15, as that is numerical addition, instead you will get concatenation of strings a and b, resulting in “510”."
  },
  {
    "objectID": "pythonbasics.html#numbers-int-and-float",
    "href": "pythonbasics.html#numbers-int-and-float",
    "title": "1  Python Basics",
    "section": "1.3 Numbers (int and float)",
    "text": "1.3 Numbers (int and float)\nAccounting mainly deals with numbers with decimals, known as floats (floating point decimal numbers) and integers (numbers without decimals). Using these data types is easy to do, just create a variable and store the numerical value to that variable.\n\n\nShow the code\nx = 6754\ny = 122.78\n\nz = x + y \nz\n\n\n6876.78\n\n\nThe value of z is 6876.78. In a Python file (.py) you will need to use the print() function to see the answer, but using a Jupyter Notebook, you can simply add x and y and get the output printed."
  },
  {
    "objectID": "pythonbasics.html#string-formatting",
    "href": "pythonbasics.html#string-formatting",
    "title": "1  Python Basics",
    "section": "1.4 String formatting",
    "text": "1.4 String formatting\nTo print out the variables and calculations, you need to use the print() function. String formatting allows for reusable code and simpler code to write. Learning it now will help build the skill. Formatting uses the syntax f\" \" inside a print function with { } to store the variable name.\nFor rounding numbers when you want to only show numeric values that have limited decimal places you use the .format() function without using the f”” inside the print function.\n\ninside the {:.2f} means 2 decimal places format, the number can be 1 or more\nfor output numberical values that are long, you can use {:,} which means to add commas to the numbers\n\n\n\nShow the code\naccountant_name = \"Jane Doe\"\noffice_expenses = 105_900.7688128\n\nprint(f\" Hello Python Accountant {accountant_name} \")\nprint(\" The office budget is ${:.2f}\".format( office_expenses ))\nprint(\" The office budget is ${:,}\".format( office_expenses ))\n\n\n Hello Python Accountant Jane Doe \n The office budget is $105900.77\n The office budget is $105,900.7688128"
  },
  {
    "objectID": "pythonbasics.html#lists",
    "href": "pythonbasics.html#lists",
    "title": "1  Python Basics",
    "section": "1.5 Lists",
    "text": "1.5 Lists\nPython lists are very useful and are also known as arrays (when using the NumPy library).\n\ncan store various data items, duplicates are allowed which is important to know.\nLists can be empty and the values can be changed (mutable).\n\nIMPORTANT TO KNOW :\n\nevery list, dictionary, set and string all start at 0 zero not 1, start counting at 0 or use n - 1 to get the correct index value.\n\n\n\nShow the code\naccounting_list = ['shareholders equity',233, True,\"liabilities\", 99]\n\nprint( accounting_list )\n\n\n['shareholders equity', 233, True, 'liabilities', 99]\n\n\n\n1.5.1 Array slicing\nTo get specific elements in the array list you can use slicing. To get the 2nd item (element) from the list, remember n - 1 for index number.\n\n\nShow the code\naccounting_list[1]\n\n\n233\n\n\nTo get the last element in the array list, you can use -1, which means the 1st one from the end. If you wanted the second last element, -2, and so forth.\n\n\nShow the code\naccounting_list[-1]\n\n\n99\n\n\n\n\n1.5.2 Change element in list\nSay we want to change ‘liabilities’ to ‘purchases’, we use the index of element we want to change and assign the new variable.\n\n\nShow the code\naccounting_list[3] = \"purchases\"\naccounting_list\n\n\n['shareholders equity', 233, True, 'purchases', 99]\n\n\n\n\n1.5.3 Get more than 1 element\nIf you are interested in only a few or specific elements in a list you can specify the indexes of the elements of the list. In this example, we want the first to the second elements.\n\n\nShow the code\naccounting_list[0:3]\n\n\n['shareholders equity', 233, True]\n\n\n\n\n1.5.4 List length\nKnowing how long a list is, how many elements that are inside the list object is very useful to know for using in for loops.\n\n\nShow the code\nlen( accounting_list )\n\n\n5\n\n\n\n\n1.5.5 Add elements to list\nPython lists can be modified by adding to the list array. Since we store all of the elements into a variable we can use the name of the list and call functions on that variable such as .append() to add to an existing list.\nIn this example we just want to add ‘income_sheets’ to the list. Note: if you call this function more than once, Python will keep adding this one variable to the list.\n\n\nShow the code\naccounting_list.append(\"income_sheets\")\naccounting_list\n\n\n['shareholders equity', 233, True, 'purchases', 99, 'income_sheets']\n\n\n\n\n1.5.6 Join lists\nIf you have one list array and want to join or merge them together, you can use .extend() function.\n\n\nShow the code\nsheet1 = [\"Accounts payable\",\"debts receivable\",\"credit payable\"]\nsheet2 = [\"balance sheet\",\"assets & liabilities\"]\n\nsheet1.extend(sheet2)\n\nprint( sheet1 )\n\n\n['Accounts payable', 'debts receivable', 'credit payable', 'balance sheet', 'assets & liabilities']\n\n\n\n\n1.5.7 Delete element\nYou can delete an element from a list array, using the pop() function which by default removes the very last element in an array, but if you provide the index number it will remove that element.\nIn this example we will remove the element “True” from index 2. Note: Python will keep deleting elements from your list if this function is called repeatedly.\n\n\nShow the code\naccounting_list.pop(2)\naccounting_list\n\n\n['shareholders equity', 233, 'purchases', 99, 'income_sheets']\n\n\n\n\n1.5.8 List for loops\nfor loops are functions that will iterate over a Python object such as a list or dictionary, dataframe or even a string. For loops are important to know and are essential for becoming efficient in programming.\nIf you have a list of assets and quickly want to print them out to see what they are or perform a math function for loops are what to use.\nIn this example we want to loop through the numbers 0 to 4, and print out each number. The range() by default understands what the start and end of the range is but could be explicitly defined. If you wanted 1 to 5, range(1,6).\n\nNote: “for x in something”, the x can be named just about anything (just not a reserved word in Python).\n\n\n\nShow the code\nfor x in range(5):\n    print(x)\n\n\n0\n1\n2\n3\n4\n\n\nSay we have a list of a client’s assets, and we want it iterate through the list and print them. We want to know the length of the list in order to tell the for loop to stop at the end of the list, this serves 2 purposes: 1) you can modify the list (add or delete elements) and the for loop will keep working, and 2) by knowing the length of the list prevents errors when looping through a list and tries to find an element index that does not exist.\n\nrange( len( list_name ))\nindex of the loop is needed, hence client_assets[items] which goes through the list array and prints the index location value\n\n\n\nShow the code\nclient_assets = ['boat','house','fancy car','comic book collection','stocks']\n\nfor items in range( len( client_assets )):\n    print( client_assets[items] )\n\n\nboat\nhouse\nfancy car\ncomic book collection\nstocks\n\n\nUsing for loops is going to be something you will need to understand and get comfortable with in order to make your accounting more efficient.\nWhile loops will be purposefully ignored as they are very easy to mess up and crash your program. You may wish to learn them on your own but I caution you not to unless you have experience coding in Python.\n\n\n1.5.9 List sorting\nYou can sort or reverse a list, simply by calling .sort() function and .reverse() on the list variable name.\n\n\nShow the code\ncommon_assets = ['z item','investments','cash','inventory','supplies']\n\ndividends_paid = [100,1001.1,1020,101,300,301,90,9]\n\ncommon_assets.sort()\ndividends_paid.sort()\n\nprint( common_assets )\nprint( dividends_paid )\n\n\n# reverse\ndividends_paid.reverse()\nprint( dividends_paid )\n\n\n['cash', 'inventory', 'investments', 'supplies', 'z item']\n[9, 90, 100, 101, 300, 301, 1001.1, 1020]\n[1020, 1001.1, 301, 300, 101, 100, 90, 9]"
  },
  {
    "objectID": "pythonbasics.html#tuples",
    "href": "pythonbasics.html#tuples",
    "title": "1  Python Basics",
    "section": "1.6 Tuples",
    "text": "1.6 Tuples\nTuples store data but are immutable and tuples index each element. Say we want to store 3 holiday gift ideas for the office.\n\n\nShow the code\ngifts = ('Subway sandwich gift card',\"Starbucks coffee gift card\", \"Apple iTunes gift card\")\n\nprint( gifts[2:3])\n\n\n('Apple iTunes gift card',)\n\n\nand to loop through the tuple\n\n\nShow the code\nfor xmas in gifts:\n  print(xmas)\n\n\nSubway sandwich gift card\nStarbucks coffee gift card\nApple iTunes gift card"
  },
  {
    "objectID": "pythonbasics.html#sets",
    "href": "pythonbasics.html#sets",
    "title": "1  Python Basics",
    "section": "1.7 Sets",
    "text": "1.7 Sets\nSets and dictionaries both use { }, but sets are immutable, but elements can be added or dropped. Sets are unordered and not indexed. Sets do not allow duplicates to exist in the set.\nIn this example we have taxes filed each year, then we append a year after we made our set.\n\n\nShow the code\ntaxes_years = {2015, 2016, 2017, 2018}\n\ntaxes_years.add(2009)\nprint(taxes_years)\n\n\n{2016, 2017, 2018, 2009, 2015}\n\n\nto remove a tax year\n\n\nShow the code\ntaxes_years.remove(2009)\ntaxes_years\n\n\n{2015, 2016, 2017, 2018}\n\n\nwe can loop through the set\n\n\nShow the code\nfor year in taxes_years:\n  print(f\"finished with taxes for {year}\")\n\n\nfinished with taxes for 2016\nfinished with taxes for 2017\nfinished with taxes for 2018\nfinished with taxes for 2015"
  },
  {
    "objectID": "pythonbasics.html#dictionaries",
    "href": "pythonbasics.html#dictionaries",
    "title": "1  Python Basics",
    "section": "1.8 Dictionaries",
    "text": "1.8 Dictionaries\nThis book will use data dictionaries extensively, as they are very versatile, easy to use and modify. If you later want to make a data dictionary a dataframe, you can with the help of the Pandas library. Once you have a dataframe created or converted from a data dictionary you can save it as a CSV or other formats.\nData dictionaries are ordered, mutable and have keys and value pairs (‘key’ : ‘value’).\n\ndictionaries do not allow duplicates of keys\ndictionaries are not indexed, grab elements by key or value\nit is good practice to Pascal_Case or CamelCase your keys (also with everything) as it will help with tab-auto complete and grabbing the key you want\n\nIn this example we have some financial information of assets.\n\n\nShow the code\nall_assets = {\n  \"cash\": 3098772.89,\n  'inventory': 7886.23,\n  \"supplies\": 56234.56,\n  \"prepaid_expenses\": 14521\n}\n\n\n\n1.8.1 select key\nIn this example we want to get the value for cash, so we slice the dictionary and use the key name to get the value.\n\n\nShow the code\nall_assets['cash']\n\n\n3098772.89\n\n\n\n\n1.8.2 dictionary length\nFind out how many elements are in a data dictionary\n\n\nShow the code\nlen(all_assets)\n\n\n4\n\n\n\n\n1.8.3 all items\nIf you wanted to print out all the items in a dictionary, use .items() function\n\n\nShow the code\nall_assets.items()\n\n\ndict_items([('cash', 3098772.89), ('inventory', 7886.23), ('supplies', 56234.56), ('prepaid_expenses', 14521)])\n\n\n\n\n1.8.4 dictionary keys\nIf you want to know the keys for the dictionary in order to use them for a function, use the .keys() function.\n\n\nShow the code\nall_assets.keys()\n\n\ndict_keys(['cash', 'inventory', 'supplies', 'prepaid_expenses'])\n\n\n\n\n1.8.5 modify a key\nIf the key has a value that needs to be changed, you can use the slice and key name method and assign a new value.\nIn this example we will give a new value for the property key.\n\n\nShow the code\nall_assets['property'] = 788655\nall_assets.items()\n\n\ndict_items([('cash', 3098772.89), ('inventory', 7886.23), ('supplies', 56234.56), ('prepaid_expenses', 14521), ('property', 788655)])\n\n\n\n\n1.8.6 dictionary values\nIf you just wanted to see the values stored in a dictionary, use the .values() function.\n\n\nShow the code\nall_assets.values()\n\n\ndict_values([3098772.89, 7886.23, 56234.56, 14521, 788655])\n\n\n\n\n1.8.7 check dictionary\nIf we had a large dictionary and quickly wanted to check if a specific key exists inside the dictionary, we can use a if statement with in dictionary_name.\nIn this example we will search if “supplies” exists in the all_assets.\n\n\nShow the code\nif \"supplies\" in all_assets:\n  print(\" 'supplies' was found in the dictionary\" )\n\n\n 'supplies' was found in the dictionary\n\n\n\n\n1.8.8 dictionary for loops\nAs mentioned previously, for loops are very much part of programming, you want to iterate over a list or some data object and do some sort of action along the process. We can iterate over a data dictionary to see what a specific client has for assets and by type.\nIn this example we will loop through all assets and show that the client is Dunder Mifflin’s assets by type of category.\n\n\nShow the code\nfor DunderMifflin in all_assets:\n  print(f\"Dunder Mifflin assets $ { all_assets[ DunderMifflin]} [{DunderMifflin}]\")\n\n\nDunder Mifflin assets $ 3098772.89 [cash]\nDunder Mifflin assets $ 7886.23 [inventory]\nDunder Mifflin assets $ 56234.56 [supplies]\nDunder Mifflin assets $ 14521 [prepaid_expenses]\nDunder Mifflin assets $ 788655 [property]\n\n\n\n\n1.8.9 dictionary copy\nOnce you have a data dictionary, you can make a copy as to make sure you have a safe copy from any deletions or whatever may be the case. You can make copies for a client each quarter and only need to modify a few items instead of starting from scratch. To make a copy of a dictionary, use the .copy() function.\nIn this example we will make a copy of all_assets and with the new copy we will create a new element and append it to the dictionary.\n\n\nShow the code\nprint(f\" Original: {all_assets}\\n\")\n\nassets_2 = all_assets.copy()\n\nprint(f\" Copy: {assets_2}\\n\")\n\nassets_2['yacht'] = 1086777\n\nprint(\"....\", assets_2, '\\n')\n\n\n Original: {'cash': 3098772.89, 'inventory': 7886.23, 'supplies': 56234.56, 'prepaid_expenses': 14521, 'property': 788655}\n\n Copy: {'cash': 3098772.89, 'inventory': 7886.23, 'supplies': 56234.56, 'prepaid_expenses': 14521, 'property': 788655}\n\n.... {'cash': 3098772.89, 'inventory': 7886.23, 'supplies': 56234.56, 'prepaid_expenses': 14521, 'property': 788655, 'yacht': 1086777}"
  },
  {
    "objectID": "pythonbasics.html#conditionals",
    "href": "pythonbasics.html#conditionals",
    "title": "1  Python Basics",
    "section": "1.9 Conditionals",
    "text": "1.9 Conditionals\nYou are already familiar with conditionals in everyday life, if x then y. We a;ready used an if statement to check if “supplies” was in the data dictionary. Knowing conditional statements such as If-Else statements are a core part of programming.\n\nEquals: a == b\nnot equal: a != b\nless than: a < b\nless than or equal to: a <= b\ngreater than: a > b\ngreater than or equal to: a >= b\n\nNote: If-Else statements are where indentation matters.\n\n\nShow the code\nrevenue = 110\nexpenses = 120\n\nif revenue > expenses:\n  print(\"you have money\")\nelse:\n  print(\"expenses !\")\n\n\nexpenses !\n\n\nThere is a way to add to this simple example, we can add an elif which means else-if. The condition block of code will check if revenue is greater than expenses else if another condition is true do something, else neither conditions were true.\nConditionals can be as long as needed, however using a bunch of if statements is not advised, as the computer will check only for the specific condition that makes it true and breaks out of the code block. Using an If-Elif-Else block ensures that all qualifying conditions are checked.\n\n\nShow the code\nrevenue = 110\nexpenses = 110\n\nif revenue > expenses:\n  print(\"you got money\")\nelif revenue == expenses:\n  print(\"breakeven point\")\nelse:\n  print(\"those expenses!\")\n\n\nbreakeven point"
  },
  {
    "objectID": "pythonbasics.html#functions",
    "href": "pythonbasics.html#functions",
    "title": "1  Python Basics",
    "section": "1.10 Functions",
    "text": "1.10 Functions\nFunctions are so important to know! Functions will help you be more efficient and more productive.\nIf you are doing a task more than 3 times, it is wise to make that task into a function. Accounting has so many mundane routine calculations that learning to make functions will make accounting faster.\n\nIn Python, a function starts with def followed by a function name you provide, () then a : and your code is indented underneath the ‘def function_name():’\nInside the function_name( arguments ) . These arguments are what you pass into the function, you can pass in an array or a dictionary . You do not have to pass in anything.\n\nNote: in many Python documentation guides you will see ‘func’ for naming a function, along with ‘foo’ and ‘bar’\nLet us create a simple function that prints out a message.\n\n\nShow the code\n#-------------------- function block\ndef my_function():\n  \n  print(\"Hi, my first function!\")\n  \n#-------------------- \n\n#- outside of the function block\n#- call your function by typing the name of it\nmy_function()\n\n\nHi, my first function!\n\n\nIndentation matters when dealing with conditionals and functions, you will get errors if your code is not properly indented.\n\n1.10.1 Function with argument\nOnce you get the handle of how functions work and how to call them, next is to pass in the function a argument, a data object or a string that is then used by the function. Just like in math textbooks f(x) you pass in x as a number then the “f” function makes a calculation.\nIn this example we will pass in job in the function “()” where function arguments go.\n\n\nShow the code\ndef my_function( job ):\n  print(f\"your job is {job}\")\n  \n\n# call the function and pass in a argument\nmy_function(\"Accounting\")\n\n\nyour job is Accounting\n\n\nAs the function exists you could pass in a number or another data type object, you will want to make your functions explicitly define what data type is expected for the argument as to avoid errors.\n\n\n1.10.2 function net income\nThis function will be calculating the net income, but this time the arguments in the function will be explicitly defined as int meaning integer data types. Passing in a float would still work as it is type numeric.\n\nyou can enforce data types into your arguments so if you want only numeric values and not strings to be entered into your function, use arg_name : int , arg_name : float. This helps reduce code errors.\nif you type: net_income(expenses= “900”, revenue=78) == ERRORS\n\n\n\nShow the code\ndef net_income(revenue: int, expenses: int):\n    # formula for net income\n    net = revenue - expenses\n    \n    print(f\"Net (loss) income = $ {net}\")\n    \n    \n#-- outside function block\nnet_income(revenue= 187568, expenses= 167812)\n\n\nNet (loss) income = $ 19756\n\n\nWhen calling the function you do not have to type the argument, just the value it is expecting, however it is good to type what arguments you are using for a function.\n\n\n1.10.3 Function with a list\nWe can make a function that will loop through the list and then print out when the item was checked.\nThis example will have a list of common assets which will be passed in the function number_crunch as an argument. The for loop will start from length of list -1, as Python is zero indexed.\n\n\nShow the code\ndef number_crunch( assets ):\n  \n  L = len(assets)\n  print(f\"Number of assets = {L}\\n\")\n  \n  #--------------------------- for loop\n  for wealth in assets:\n    print(f\" {wealth} ... checked\")\n  #---------------------------\n  \n#--\ncommon_assets = ['investments','cash','yacht','cabin','vacation home']\n\nnumber_crunch( common_assets )\n\n\nNumber of assets = 5\n\n investments ... checked\n cash ... checked\n yacht ... checked\n cabin ... checked\n vacation home ... checked\n\n\n\n\n1.10.4 Function with a dictionary\nAs mentioned in the dictionary section, dictionaries are very pliable data objects and are great as an option to store data. Data dictionaries are very similar to JSON data objects, so it is helpful to be used to working with them and passing them into functions.\nThis book will heavily use data dictionaries for function arguments, these function will pull values from specified keys to be used in calculations.\nIn this example we will have a dictionary for assets which will be passed in the function the_count.\n\n\nShow the code\nassets = {\n    \"cash\": 300322.78,\n    \"inventory\": 7886.23,\n    \"supplies\": 56234.56,\n    'prepaid expenses': 14560\n} \n\n\ndef the_count( acc_dict ):\n    \n    #------ convert dictionary to a list\n    dict_list = list( acc_dict.values() )\n    #-- for loop of values\n    for num in dict_list:\n        print(num)\n    \n    # sum the assets\n    s = sum( dict_list )\n    print(\"sum of assets = $ {:,}\".format(s))\n\n# use the assets dictionary from above \n\nthe_count( assets )\n\n\n300322.78\n7886.23\n56234.56\n14560\nsum of assets = $ 379,003.57\n\n\nThis function used a few tricks, the dictionary argument was converted to a list data object, which stores the dictionary values. Once the dictionary list was created and had all the values, a for loop was used to iterate over the list. The dictionary list was then summed using the sum() function and stored in a variable ‘s’ and printed out.\nThe conversion of a data dictionary to a list is needed for any future looping, you can’t loop through a dictionary."
  },
  {
    "objectID": "pythonbasics.html#python-classes",
    "href": "pythonbasics.html#python-classes",
    "title": "1  Python Basics",
    "section": "1.11 Python Classes",
    "text": "1.11 Python Classes\nPython classes are not considered a basic level topic, it is complicated and easy to get confused. I include it as a means of showing that you can bundle all of the functions in one file and then extract the specific functions you need. You need to understand how functions work and be comfortable with them before you attempt to work with classes. A class object has inheritance, it can store a data object(s), have multiple functions (which are called methods inside a class) and can be imported to another file.\nClass objects start with a capital letter, this is convention and is to signify that this is a class and not a regular function. I will show what a simple class object looks like, but will let you learn more about them on your own.\n\n\nShow the code\nclass Simple_class:\n  def __init__(self, name, age): # class self referencing arguments\n        self.name = name\n        self.age = age    # self.name = name  declares the argument \n        \n  # class property\n  class_property = \"simple_class: property value\"\n    \n  #-- class method\n  def number(self):\n    x= 1898\n    print(x)\n    \n    \n# ----- important\n# similar to calling functions but this is called INSTANTIATE or \n# creating an OBJECT INSTANCE of the class\n\nobj = Simple_class(\"Python\", 28) # pass in values for class arguments\n\n# now that there is an object we can get properties from the class\nobj.class_property\n\n\n'simple_class: property value'\n\n\nCall the class method number() to get a number\n\n\nShow the code\nobj.number()\n\n\n1898\n\n\nTo aid in understanding, Python has a library called Math (comes with Python installation) and it has many math functions that you would typically want to use. When you want to square root a number you need to use Math.sqrt(), the square root function is inside the class called Math. In order to have access to this math function or any other you need to import the library into your python file. The “obj.number()” is same type of code used to get the math function from the class Math.\nClass inheritance is the next thing to learn when learning about class objects, which is not the focus of this book. As shown, class objects are very helpful for storing multiple or doing multiple things at once."
  },
  {
    "objectID": "chapter1.html#cost-concepts",
    "href": "chapter1.html#cost-concepts",
    "title": "2  Financial Accounting",
    "section": "2.1 Cost Concepts",
    "text": "2.1 Cost Concepts\nManagerial cost concepts and behavior analysis has 3 main components; managerial cost concepts, cost behavior analysis and manufacturing costs in financial statements.\n\n2.1.1 Manufacturing Costs\nTo manage costs, a manager needs to have information in order to plan, direct and control operations.\n\nManufacturing is activities that convert raw materials into finished goods.\n\nThe manufacturing process:\n\ndirect materials - raw materials, basic materials parts used in the manufacturing process.\nindirect material - materials that do not physically become part of the finished product and they can’t be easily traced because physical association with the finished product is too small in terms of cost (accounted under manufacturing overhead).\ndirect labor - the employees that are physically and directly involved in the conversion of raw materials into finished goods.\nindirect labor - work that is indirect is work that has no physical association with the finished product and is work is too cumbersome to trace back to the cost of goods made.\nmanufacturing overhead - costs that are indirectly associated with the finished product, these specific costs can’t be classified as direct materials or labor.\n\n\nprime cost = sum of all the direct material and labor costs\nconversion costs = the sum of all direct labor and manufacturing overhead costs\nproduct costs - the sum of all necessary costs in producing the finished product\nperiod costs - costs that match the revenue of a specific time period instead of the cost of a salable product (non-manufacturing costs), selling and administrative expenses are period costs.\n\n\n\n2.1.2 Cost example\nThis section will go through an example of cost. Say there is a company that makes hoverboards (like the ones in Back to the Future movie series), the following is the manufacturing costs.\n\nmaterial cost ($30) per board\nlabor costs ($40) per board\ndepreciation on factory equipment ($25,000 per year)\nproperty taxes on factory building ($6,000 per year)\nadvertising costs ($30,000 per year)\nmaintenance salaries ($45,000 per year)\nsalary of plant manager ($70,000)\ncost of shipping boards ($18 per board)\n\nWe will use a data dictionary for storing the values from above. Then, let us make a function to calculate all of the costs.\n\n\nShow the code\nhoverboards = {\n  'material_cost' : 30,\n  'labor_cost' : 40,\n  'depreciation_equipment': 25e3, # 25,000\n  'property_tax_bldg': 6e3,       # 6,000\n  'advertising_cost': 30e3,\n  'maint_salaries': 45e3,\n  'salary_plant_manager': 70e3,\n  'shipping_cost': 18\n}\n\n\nMake a function to calculate the total manufacturing costs. This function’s argument will use the data type dictionary as input for our calculations. The second thing we want to know is how many hoverboards were made? We can get user input for a number, as this makes the function flexible for future use.\n\n\nShow the code\ndef manufacturing_costs(dict , num_boards: int ):\n  manuf_costs = (dict['material_cost'] * num_boards) + (dict['labor_cost'] * num_boards) + \\\n                 dict['depreciation_equipment'] + dict['property_tax_bldg'] + \\\n                 dict['maint_salaries'] + dict['salary_plant_manager']\n                 \n  cost_per_unit = manuf_costs / num_boards\n                 \n  print(\"\\nTotal manufacturing costs = ${:,}\".format(manuf_costs))\n  print(\"\\tcost per unit is = ${:.2f}\".format(cost_per_unit))\n\n\nNow we call our function and say as that there were 10,000 hoverboards made.\n\n\nShow the code\nmanufacturing_costs(hoverboards, num_boards= 10e3)\n\n\n\nTotal manufacturing costs = $846,000.0\n    cost per unit is = $84.60"
  },
  {
    "objectID": "chapter1.html#cost-behavior-analysis",
    "href": "chapter1.html#cost-behavior-analysis",
    "title": "2  Financial Accounting",
    "section": "2.2 Cost Behavior Analysis",
    "text": "2.2 Cost Behavior Analysis\nThe cost behavior analysis is the study of how specific costs respond to changes in the level of business activity. Start from determining the key business activities such as:\n\nsales in dollars\nkilometers or miles driven\nquantity of service or product sold\n\nActivity level changes or volume of activity should be correlated with changes in costs. Activity Index is the activity that causes changes in the behavior costs.\n\nvariable costs = costs that vary in total, directly and proportionally with changes in the activity level. A variable cost is also defined as a cost that remains the same per unit at every level of activity. Variable costs include:\n\ndirect materials\ndirect labor for a manufacturer\ncosts of goods sold\nsales commissions\nfreight shipping\ngasoline for vehicles or planes\n\n\nif level increases by 10% :\n   total variable costs increases by 10%\n   \nif level of activity decrease by 25%:\n   total variable costs decrease by 25%\nFor example, a company’s variable cost is $10 for a camera inside the device. The activity index is the number of devices produced, say 2,000 are made. As each device is made, the total cost of each device increases by $10.\n\n\nShow the code\nvariable_cost = 10\nactivity_index = 2000\n\ndef total_variable_cost(var_cost, act_index):\n  total_var_cost = var_cost * act_index\n  print(\"Total variable costs = ${:,}\".format(total_var_cost))\n  \ntotal_variable_cost(variable_cost, activity_index)\n\n\nTotal variable costs = $20,000\n\n\n\n2.2.1 Fixed costs\nFixed costs are costs that remain the same in total within the relevant range, regardless of activity level. These include:\n\nproperty taxes\ninsurance\nrent\nsupervisory salaries\ndepreciation on buildings\nequipment\n\nif volume increases:\n  unit cost declines\n  \nif volume decreases:\n  unit cost increases\nA company leases its production facility at a cost of $10,000 per month the total fixed costs of the facility will stay constant at every level of activity. Let us make a function to calculate the unit costs.\n\n\nShow the code\nactivity_index = 2000\nlease_cost = 10e3\n\ndef unit_costs( act_index: int, lease_cost:int):\n  unit_cost = lease_cost / act_index \n  print(\"unit costs = ${:.2f}\".format(unit_cost))\n  \nunit_costs(activity_index, lease_cost)\n\n\nunit costs = $5.00\n\n\n\n\n2.2.2 Mixed costs\nMixed costs are costs that have both a variable element and a fixed element, semi-variable costs. Mixed costs change in total but not proportionally with changes in the activity level.\nvehicle rental company has mixed cost, assume a 5 m truck rented, plus the insurance is $50 per day, then an additional 25 cents per km.\n\nfixed cost = $50\nvariable cost = 0.25\n\nUsing a for loop you can see what the starting mixed costs are, starting with the $50 rental and 0 kilometers, to 600 kilometers.\n\n\nShow the code\nfixed_cost = 50\nvariable_cost = 0.25\nkms_driven = range(600)\ntotal = []\n\nfor x in kms_driven :\n  c = (x * variable_cost ) + fixed_cost\n  total.append(c)\n\nprint(f\"Start of total costs = $ {total[1:5]}\")\nprint(f\"End of total costs = $ {total[-5:-1]}\")\n\n\nStart of total costs = $ [50.25, 50.5, 50.75, 51.0]\nEnd of total costs = $ [198.75, 199.0, 199.25, 199.5]\n\n\nThe variable cost rises as the kilometers increase, but the fixed cost stays the same.\n\n\n2.2.3 Classifying costs\nMixed costs need to be classified into their respective fixed and variable elements. The standard method is to determine the variable cost and fixed cost of the total cost at the end of a time period. By using past experience to inform the future in cost classifications. One approach is called high-low method, but other approaches are scatter plots and least squares analysis.\nThe High-Low method uses costs incurred at the high and low activity levels, the difference in costs between the high and low is the variable costs.\n\nvariable cost per unit = \\(\\Delta\\) in total costs / \\(\\Delta\\) in activity levels\n\nUsing a transportation company, data on its buses as an example :\n\n\n\nmonth\nkms driven\ntotal cost $\n\n\n\n\nJan\n40,000\n30,000\n\n\nFeb\n80,000\n48,000\n\n\nMar\n70,000\n49,000\n\n\nApril\n100,000\n63,000\n\n\n\n\n\nShow the code\ntransport_co = {\n  'costs_high' : 63e3,\n  'costs_low' : 30e3,\n  'high_level': 100e3,\n  'low_level' : 40e3\n}\n\n\ndef var_CostPerUnit( dict ):\n  \n  delta_costs = dict['costs_high'] - dict['costs_low']\n  delta_activity = dict['high_level'] - dict['low_level']\n  \n  vcpu = delta_costs / delta_activity\n  print(\"Total variable cost per unit = ${:.2}\".format(vcpu))\n  \n  tot_fix_cost_h = dict['costs_high'] - (dict['high_level'] * vcpu)\n  tot_fix_cost_l = dict['costs_low'] - (dict['low_level'] * vcpu)\n  \n  print(\"\\n----- Maintenance costs ------\")\n  print(\"Total fixed cost (high activity) = ${:.2f} + ${:.2f} per km\".format(tot_fix_cost_h, vcpu))\n  print(\"Total fixed cost (low activity) = ${:.2f} +  ${:.2f} per km\\n\".format(tot_fix_cost_l, vcpu))\n  \n\nvar_CostPerUnit( transport_co )\n\n\nTotal variable cost per unit = $0.55\n\n----- Maintenance costs ------\nTotal fixed cost (high activity) = $8000.00 + $0.55 per km\nTotal fixed cost (low activity) = $8000.00 +  $0.55 per km"
  },
  {
    "objectID": "chapter1.html#manufacturing-costs-1",
    "href": "chapter1.html#manufacturing-costs-1",
    "title": "2  Financial Accounting",
    "section": "2.3 Manufacturing Costs",
    "text": "2.3 Manufacturing Costs\nManufacturing costs in financial statements have 2 sections that differ between all companies, the cost of goods (income statement) and the current assets (balance sheet). The income statement for a merchandiser and a manufacturer will be different in the cost of goods sold (COGS).\n\nmerchandiser: cost of goods sold = beginning merchandise inventory to cost of goods purchased - ending merchandise inventory\nmanufacturer: cost of goods = beginning finished goods inventory + cost of goods manufactured - ending finished goods inventory\n\n\n2.3.1 COGS Manufactured\nA company starts production of microchips on Jan 1 (beginning work in process inventory). The costs the company assigns to beginning work in process inventory is based on manufacturing costs incurred in the prior period. The total manufacturing cost is the sum of direct materials costs, direct labor costs, manufacturing overhead incurred in the current year. At the end of the year, part of the total production is complete, the costs of these units become the cost of the ending work in process inventory. Cost of goods manufactured is determined by subtracting incomplete microchip costs from the total cost of work in process.\n\ntotal cost of work in process = beginning work in process inventory + total manufacturing cost\ncost of goods manufactured = total cost of work in process - ending work in process inventory\n\nPartial income statements for a merchandising and a manufacturing company. For the data dictionary we can use the key ‘cost of goods purchased’ to also be ‘cost of goods manufactured’ for manufacturing income statement, and the formula holds.\n\n\nShow the code\nmerch_co = {\n  'merchandise_inventory_jan_1' : 90e3,\n  'cost_of_goods_purchased': 370e3, # or manufactured\n  'merchandise_inventory_dec_31' : 80e3\n}\n\ndef cost_of_goods_sold( dict):\n  cogs_available = dict[\"merchandise_inventory_jan_1\"] + dict[\"cost_of_goods_purchased\"]\n  cogs = cogs_available - dict[\"merchandise_inventory_dec_31\"]\n  \n  print(\"Cost of goods sold = ${:,}\".format(cogs))\n  \n  \ncost_of_goods_sold( merch_co )\n\n\nCost of goods sold = $380,000.0\n\n\n\n\n2.3.2 Balance sheet\nThe balance sheet for merchandising company is focused on inventory, the balance sheet for a manufacturer may have various inventory accounts.\nPartial Balance sheets for merchandise company and a manufacturer.\n\n\nShow the code\nmerch_co = {\n  'cash' : 100e3,\n  'net_receivables': 210e3, \n  'merchandise_inventory' : 400e3,\n  'Prepaid_expenses': 22e3\n}\n\nmanuf_co = {\n  'cash': 180e3,\n  'net_receivables': 210e3,\n  'finished_goods': 80e3,\n  'work_in_progress': 25200,\n  'raw_materials': 22800 ,\n  'prepaid_expenses': 18e3\n}\n\n\n\ndef current_assets( dict):\n  \n  assets = list( dict.values() ) \n  tot_assets = sum(assets)\n  print(\"Total current assets = ${:,}\".format(tot_assets))\n  \n  \ncurrent_assets( merch_co )\ncurrent_assets( manuf_co )\n\n\nTotal current assets = $732,000.0\nTotal current assets = $536,000.0\n\n\n\n2.3.2.1 COGS Example\nThis example will be calculating the cost of goods manufactured with data on raw materials and labor. Cost of goods manufactured schedule for one month. This example is a bicycle manufacturer, and we will use 1,000 has the number for quantity produced.\n\n\nShow the code\nmanufacturer = {\n  'rent_manuf_equipment' : 2e3,\n  'bldg_insurance': 750,\n  'raw_materials': 80,\n  'manufacturing_utilities': 1000,\n  'labor' : 30,\n  'misc_materials': 1.20,\n  'property_tax_bldg_year': 2400, # per year\n  'supervisor_salary': 3000,\n  'bldg_depreciation' : 1500\n}\n\n\n\n\nShow the code\ndef manufacturing_cost( dict, num_produced: int):\n  \n  base_costs = dict['rent_manuf_equipment'] + \\\n               dict['bldg_insurance'] + \\\n               dict['manufacturing_utilities'] +\\\n               (dict['property_tax_bldg_year'] / 12) +\\\n               dict['supervisor_salary'] + \\\n               dict['bldg_depreciation']\n  # print(base_costs)\n  \n  manuf_costs = (dict['raw_materials'] * num_produced) +\\\n                (dict['labor'] * num_produced) + \\\n                (dict['misc_materials'] * num_produced)\n  # print(manuf_costs)\n                 \n  tot_manuf_costs = base_costs + manuf_costs\n  \n  cost_per_unit = manuf_costs / num_produced\n                 \n  print(\"\\nTotal manufacturing costs = ${:,}\".format(tot_manuf_costs))\n  print(\"\\tcost per unit is = ${:.2f}\".format(cost_per_unit))\n  \n\n\nmanufacturing_cost( manufacturer, 1000 )\n\n\n\nTotal manufacturing costs = $119,650.0\n    cost per unit is = $111.20\n\n\nThis function is very similar to the one at the start of the chapter, calculating the costs for hoverboards."
  },
  {
    "objectID": "chapter2.html#cost-accounting-systems",
    "href": "chapter2.html#cost-accounting-systems",
    "title": "3  Job Cost Accounting",
    "section": "3.1 Cost Accounting Systems",
    "text": "3.1 Cost Accounting Systems\nCost accounting involves the measuring, recording and reporting of product costs. Using this data companies can determine the total cost and the unit cost per product. This information determines the quantity of products to produce and what price to charge. Cost ccounting system contains the accounts for various manufacturing costs, part of this system is the perpetual inventory system (updated data).\nTypes of cost accounting systems:\n\njob-order cost system - costs are assigned to each job to each group of goods\nprocess cost system - costing accumulates product-related costs for a period of time, instead of costs assigned to specific products or job orders\njob-order cost flow - tracks the direct materials, direct labor and manufacturing overhead. Accumulating the manufacturing costs incurred and assigning the accumulated costs to work done\n\nRaw materials cost, the cost of materials received after purchase and is now in inventory, this cost is debited for invoice cost and freight costs that are charged to purchaser. This example shows a purchase order for 2000 items, the cost for the order ($10,000) then the cost per unit is calculated. This process is the same for another purchase order and all of the data is stored in a list array.\n\n\nShow the code\nitem_quantity = [2000, 800]\norder_cost = [10e3, 32e3]\n\ncost_per_unit = order_cost[0] / item_quantity[0]\nprint(f\"The cost per unit = ${cost_per_unit} (item 1)\")\n\ncost_per_unit_2 = order_cost[1] / item_quantity[1]\nprint(f\"The cost per unit = ${cost_per_unit_2} (item 2)\")\n\ntotal_costs = sum(order_cost)\nprint(f\"Total costs for raw materials = ${total_costs}\")\n\n\nThe cost per unit = $5.0 (item 1)\nThe cost per unit = $40.0 (item 2)\nTotal costs for raw materials = $42000.0\n\n\nFor more real world examples you would use a dataframe and/or a for loop to divide the cost by quantity to determine the cost per unit.\nFactory labor costs:\n\nthe gross earnings of factory workers\nemployer payroll taxes on earnings\nfringe benefits such as sick pay, vacation pay, etc.\n\nLabor cost example, a company incurs $32,000 labor costs, subtract 27,000 for wages payable, and subtract 5,000 for payroll taxes on some day in January.\nWork in process inventory example\n\n\n\ncost\njob 1\njob n\n\n\n\n\ndirect materials\n$6000\n3600\n\n\ndirect labor\n$4000\n2000\n\n\nmanuf. overhead\n$5000\n2500\n\n\n\n\n\nShow the code\nraw_materials = sum([6000,3600])\nfactory_labor = sum([4000,2000])\nmanuf_overhead = sum([5000,2500])\n\nprint(\"\\t           -- Debit - | -- Credit --\")\nprint(f\"Raw materials ...... {raw_materials} | {raw_materials}\")\nprint(f\"Factory labor ...... {factory_labor} | {factory_labor}\")\nprint(f\"Manufact. overhead   {manuf_overhead} | {manuf_overhead}\")\n\n\n               -- Debit - | -- Credit --\nRaw materials ...... 9600 | 9600\nFactory labor ...... 6000 | 6000\nManufact. overhead   7500 | 7500\n\n\n\n3.1.1 Manufacturing overhead costs\nManufacturing overhead costs - these costs can be accounted for daily or periodically - may aggregate the indirect materials and indirect labor\nA summary table records the property taxes, depreciation and insurance periodically. Debits are made to work in process inventory and credits are made to raw materials inventory, factory labor and manufacturing overhead.\n\nactual activity base used x predetermined overhead rate => assign to work in process\npredetermined overhead rate = estimated annual overhead costs / expected annual operating activity. The relationship between the estimated annual overhead costs and the expected annual operating activity (activity base).\nactual costing system is where the overhead rate is made after a year to get the full and actual cost\n\nUsing the direct labor cost as activity base, divide the expected overhead costs by direct labor to get the overhead rate.\n\n\nShow the code\nannual_overhead_costs = 280e3\ndirect_labor_costs = 350e3\noverhead_rate = annual_overhead_costs /direct_labor_costs\nprint(\"Overhead rate = {:.2f}%\".format(overhead_rate *100))\nprint(f\"... for every $1 of direct labor, {overhead_rate*100} cents will go to the assigned job\")\n\n\nOverhead rate = 80.00%\n... for every $1 of direct labor, 80.0 cents will go to the assigned job\n\n\nNormal costing system is tracking the direct costs (material and labor) to a cost object by using actual cost data during the accounting period. The result is assigning indirect costs (overhead) based on the predetermined rate times the actual quantity of activity base used.\n\n\n3.1.2 Costing Example\nA door manufacturer uses a job cost system and applies overhead to production on basis of direct labor cost. The predetermined overhead rate for 2016 was estimated at $24 million, and direct labor costs to be 20 million dollars.\n\n\n\ncosts\namount\n\n\n\n\ndirect materials\n$30,000,000\n\n\ndirect labor cost\n$21,000,000\n\n\nfactory insurance\n$500,000\n\n\nindirect labor\n$7,500,000\n\n\nmaintenance\n$1,000,000\n\n\nbuilding rent\n$11,000,000\n\n\ndepreciation, equipment\n$2,000,000\n\n\n\nBalance sheet\n\n\n\nmanufacturing status\nJan 1, 2016\nDec 31, 2016\n\n\n\n\nwork in process\n5,000,000\n4,000,000\n\n\nfinished goods\n13,000,000\n11,000,000\n\n\n\n\nduring 2016, the cost sheet showed a total cost of $100,000, company prices its product at 50% above its cost\n\nA data dictionary to store all of the manufacturing data to be used in a function.\n\n\nShow the code\nmanufacture = {\n  'annual_overhead_costs': 280e3,\n  'direct_labor_costs':  350e3,\n  \n  'annual_costs' : 24e6 ,\n  'direct_labor_costs' : 20e6 ,\n  \n  'job_cost': 100e3,\n  'markup_percentage': 0.5,\n  \n  \"factory\": {\n    \"direct_materials\" : 30e6,\n    \"direct_labor_cost\": 21e6,\n    \"factory_insurance\": 500e3,\n    \"indirect_labor\" : 7_500_000,\n    \"maintenance\": 1e6,\n    \"building_rent\" : 11e6,\n    \"depreciation_equipment\": 2e6\n  },\n  \n  'work_in_process': [5e6, 4e6],\n  'finished_goods': [13e6, 11e6]\n}\n\n\nFunction for manufacture job costing\n\n\nShow the code\ndef job_costing( dict ):\n  \n  overhead_rate = (dict['annual_overhead_costs'] /dict['direct_labor_costs'])*100\n  profit = dict['job_cost'] * dict['markup_percentage']\n  price = dict['job_cost'] + profit\n  actual_manuf_overhead = sum(list(dict['factory'].values())[2:])\n  \n  factory_direct_labor_cost = list(dict['factory'].values())[1]\n  applied_overhead_cost =  round( factory_direct_labor_cost * overhead_rate, 2)\n  over_applied_overhead = actual_manuf_overhead - applied_overhead_cost\n  \n  total_manuf_costs = list(dict['factory'].values())[0] + list(manufacture['factory'].values())[1] + applied_overhead_cost\n  \n  tot_cost_process = total_manuf_costs + dict['work_in_process'][0]\n  cogsm = tot_cost_process - dict['work_in_process'][1]\n  cogs_avail_4sale = dict['finished_goods'][0] + cogsm \n  cogsun = cogs_avail_4sale - dict['finished_goods'][1]\n  cogs = cogsun + over_applied_overhead\n  \n  \n  print(\"-- Job Costing --\")\n  print(\"Overhead rate = {:.2f}% ({:.2f} cents goes to assigned job)\".format(overhead_rate, overhead_rate))\n  print(\"Actual manufacturing overhead .. ${:,}\".format(actual_manuf_overhead))\n  print(\"Applied overhead cost .......... ${:,}\".format(applied_overhead_cost))\n  print(\"Over applied overhead .......... ${:,}\".format(over_applied_overhead))\n  print(\"Total manufacturing costs ........... ${:,}\".format(total_manuf_costs))\n  print(\"Total cost of work in process ....... ${:,}\".format(tot_cost_process))\n  print(\"Cost of goods manufactured .......... ${:,}\".format(cogsm))\n  print(\"Cost of goods available for sale ............ ${:,}\".format(cogs_avail_4sale))\n  print(\"Cost of goods sold (unadjusted) ............. ${:,}\".format(cogsun))\n  print(\"Cost of goods sold .......................... ${:,}\".format(cogs))\n  print(\"Price to customer = ${:,} (profit: ${:,})\".format(price, profit))\n  \n  \njob_costing( manufacture )\n\n\n-- Job Costing --\nOverhead rate = 1.40% (1.40 cents goes to assigned job)\nActual manufacturing overhead .. $22,000,000.0\nApplied overhead cost .......... $29,400,000.0\nOver applied overhead .......... $-7,400,000.0\nTotal manufacturing costs ........... $80,400,000.0\nTotal cost of work in process ....... $85,400,000.0\nCost of goods manufactured .......... $81,400,000.0\nCost of goods available for sale ............ $94,400,000.0\nCost of goods sold (unadjusted) ............. $83,400,000.0\nCost of goods sold .......................... $76,000,000.0\nPrice to customer = $150,000.0 (profit: $50,000.0)"
  },
  {
    "objectID": "chapter3.html#process-cost-systems",
    "href": "chapter3.html#process-cost-systems",
    "title": "4  Process Cost Accounting",
    "section": "4.1 Process Cost Systems",
    "text": "4.1 Process Cost Systems\nManufacturing process cost systems is to apply costs to similar products that are mass produced in a continuous way.\nSimilarities and differences between job order and process cost systems is that costs are tracked through the series of manufacturing processes and not by individual jobs.\nJob order cost flow:\n\ndirect materials, labor, manufacturing overhead\nwork in process inventory\nfinished goods inventory\ncost of goods sold\n\nProcess cost flow:\n\ndirect materials, labor, manufacturing overhead\nwork in process (department A)\nwork in process (department B)\nfinished goods inventory\ncost of goods sold\n\nThe similarities of job order cost and process cost systems, are manufacturing cost elements, both have costing systems track materials, labor and overhead. The accumulation of the costs of materials, labor and overhead are all debited costs. Lastly, the flow of costs are debited in both costing system but the methods used do differ between them.\nThe differences are the number of work in process accounts used, job order costing uses only one process account. The documents used to track costs, as process costs system summarizes the costs in a production cost report for each department and job cost systems tally individual jobs then sums the cost in a cost sheet when the job is finished. The process cost system the unit cost is the total manufacturing costs for the period divided by the units produced during the period, unlike job cost system job cost divided by units produced.\n\nOperating costs is the hybrid approach using both process cost and job order cost systems."
  },
  {
    "objectID": "chapter3.html#process-cost-flow",
    "href": "chapter3.html#process-cost-flow",
    "title": "4  Process Cost Accounting",
    "section": "4.2 Process cost flow",
    "text": "4.2 Process cost flow"
  },
  {
    "objectID": "chapter3.html#manufacturing-costs",
    "href": "chapter3.html#manufacturing-costs",
    "title": "4  Process Cost Accounting",
    "section": "4.2 Manufacturing costs",
    "text": "4.2 Manufacturing costs\nThe accumulation of costs for materials, labor and manufacturing overhead is debited for all raw materials when materials are purchased. Factory labor is debited when costs are incurred, and likewise for debit overhead costs.\n\nAll raw materials used for production are the material costs\ntime tickets could be used in a factory labor cost for process cost system\nmanufacturing overhead costs can be determined by looking at the machine time used (not direct labor), as this provides a clear overhead cost.\n\n\n4.2.1 Proccess costing example\nA company makes a generic beverage, using two processes such as blending and bottling. In June the raw materials used cost $18,000 for blending and 4,000 dollars for bottling. Factory labor costs were $12,000 for blending, 5,000 for bottling. Manufacturing overhead costs were 6,000 dollars for blending and 2500 dollars for bottling. Units completed at a cost of 19,000 dollars in the blending department transferred to bottling department. Units completed at a cost of 11,000 dollars in the bottling department transferred to the finished goods inventory. Journalize the assignment of these costs to the two processes and the transfer of the units.\nMake a dictionary for the costs. The abbreviation ‘wip’ is for work in process.\n\n\nShow the code\nbev_costs = {\n  # raw materials\n  'raw_wip_blending': 18e3,\n  'raw_wip_bottling': 4e3,\n  # factory labor\n  'labor_wip_blending': 12e3,\n  'labor_wip_bottling': 5e3,\n  # manufacturing\n  'man_wip_blending': 6e3,\n  'man_wip_bottling': 2500,\n  \n  'blending_dep': 19e3,\n  'bottling_dep': 11e3\n}\n\n\n\n\nShow the code\nlist(bev_costs.values())\n\n\n[18000.0, 4000.0, 12000.0, 5000.0, 6000.0, 2500, 19000.0, 11000.0]\n\n\nCalculate the materials used, factory labor to production and overhead to production.\n\n\nShow the code\ndef process_costing( dict):\n  # get the dictionary values as an array and use the index of elements\n  d = list(dict.values())\n  raw_invent = d[0] + d[1]\n  factory_labor = d[2] + d[3]\n  manuf_overhead = d[4] + d[5]\n  blending = dict['blending_dep']\n  bottle = dict['bottling_dep']\n  \n  print(\" -- Process Costing --\")\n  print(\"Raw materials inventory ............ ${:,}\".format(raw_invent))\n  print(\"Factory labor ...................... ${:,}\".format(factory_labor))\n  print(\"Manufacturing overhead ............. ${:,}\".format(manuf_overhead))\n  print(\"Work in process blending ........... ${:,}\".format(blending ))\n  print(\"Work in process bottling ........... ${:,}\".format(bottle ))\n  \n\nprocess_costing( bev_costs)\n\n\n -- Process Costing --\nRaw materials inventory ............ $22,000.0\nFactory labor ...................... $17,000.0\nManufacturing overhead ............. $8,500.0\nWork in process blending ........... $19,000.0\nWork in process bottling ........... $11,000.0\n\n\n\n\n4.2.2 Equivalent units\nProcess cost system uses equivalent units of production which measures the work done during the period in completed units.\nthe formula:\n\nconversion costs is the sum of labor costs and overhead costs\nunits completed and transferred out (materials) + equivalent units of ending work in process (materials) = equivalent units of production (materials)\nunits completes and transferred out (conversion costs) + equivalent units of ending work in process (conversion costs) = equivalent units of production (conversion costs)\n\n\n4.2.2.1 Quick example\nCalculate the cost of teachers at a college for each full time student.\n\ntotal cost of teachers $9,000,000\npart time students = 900\nfull time students = 1,000\npart time students take 60% of the classes of a full time student\n\n\n\nShow the code\nteachers = {'PartTime': 900, 'FullTime': 1000,'Cost': 9e6,'PT_percent': 0.6}\n\n\ndef teacher_cost( dict):\n  pt = dict['PartTime']\n  ft = dict['FullTime']\n  cost = dict['Cost']\n  prct = dict['PT_percent']\n  FT_equiv = pt + (prct * ft)\n  total_teacher_cost = cost/ FT_equiv\n  print(\"The cost of teacher per FT student = ${:,}\".format(total_teacher_cost))\n  \nteacher_cost( teachers )\n\n\nThe cost of teacher per FT student = $6,000.0\n\n\n\n\n\n4.2.3 Weighted average method\nReusing the beverage company from before, the blending department has an ending work in process of 4,000 units which account for 60% of the materials, labor and overhead. Period output for completion and transfer (to another department in the manufacturing process) is not specified in this example but is added to the calculation.\n\n\nShow the code\nunits = 4000\npercent = 0.60\nperiod_output = 0\n\nequivalent_units = units * percent + period_output\nprint(f\"Equivalent units of production = {equivalent_units} units\")\n\n\nEquivalent units of production = 2400.0 units\n\n\n\n\n4.2.4 Quick example\nA company has start of process and end of process, where all raw materials for production are accounted for at the beginning of manufacturing, therefore shows materials 100% accounted for while conversion costs is part of the manufacturing process.\n\nwip = work in process\n\n\n\n\nstage\nunits\nmaterials\nconversion costs\n\n\n\n\nwip June 1\n100,000\n100%\n70%\n\n\nstarted production\n800,000\n\n\n\n\ntotal units\n900,000\n\n\n\n\nunits transferred\n700,000\n\n\n\n\nwip June 30\n200,000\n100%\n70%\n\n\ntotal units\n900,000\n\n\n\n\n\n\n\nShow the code\nunits = 200e3\npercent = [1.0, 0.6]\nperiod_output = 700e3\n\nequivalent_units = (units * percent[0]) + period_output\nequivalent_units_2 = (units * percent[1]) + period_output\n\nprint(\"Equivalent units of production (materials) = {:,} units\".format(equivalent_units))\nprint(\"Equivalent units of production (conversion costs) = {:,} units\".format(equivalent_units_2))\n\n\nEquivalent units of production (materials) = 900,000.0 units\nEquivalent units of production (conversion costs) = 820,000.0 units"
  },
  {
    "objectID": "chapter3.html#production-cost-report",
    "href": "chapter3.html#production-cost-report",
    "title": "4  Process Cost Accounting",
    "section": "4.3 Production cost report",
    "text": "4.3 Production cost report\nA production cost report is the key document management uses to understand the activities in a department, showing the production quantities and cost data for each department. Requirements for this report are:\n\ncalculation for physical unit flow\ncalculate the equivalent units of production\ncalculate the unit production costs\nprepare the cost reconciliation schedule\n\nThis section will continue with the company used in previous examples. This example company makes breakfast pancakes which has different departments.\n\n4.3.1 Physical flow\nPhysical units are the actual units to be accounted for during a period, regardless of any work performed. To keep track of these units, add units that got started or transferred into production during the time period, these units are called total units to be accounted for.\nUsing a nested list that has 2 data dictionaries to hold data about the company’s mixing department. This data object looks like a JSON data object, you can convert nested lists into dataframes but we will just use this nested list for the functions as this is flexible and looks similar to a Excel spreadsheet (in a way).\nNormally we have seen simple dictionaries where there is a single key and a value pair, but here we have a list that stores 2 dictionaries, each which has a single key then the value is a dictionary instead of a single value. To access elements from a nested list array and get items from a dictionary, you need to slice the list, then specify which dictionary key, then the name of the nested dictionary key to get the value.\n\nmixing_data has 2 elements which are both dictionaries [ {}, {} ], remember zero index\nname the dictionary key [0]['units']\nname the nested dictionary key [0]['units']['wip_start'] to get the value\n\n\n\nShow the code\nmixing_data = {\n  'units': {\n    'wip_start': 100e3,                   # June 1\n    'direct_materials_percent': 1,\n    'conversion_costs_percent': 0.70,\n    'units_in_production': 800e3,\n    'units_completed_transferred': 700e3,\n    'wip_end':200e3,                       # June 30\n    'wip_end_materials_percent': 1,\n    'wip_end_conversion_costs_percent':  0.60\n    },\n  'costs': {\n    'wip_start_direct_materials': 50e3,\n    'wip_start_conversion_costs': 35e3,\n    'cost_wip_start': 85e3,\n    'costs_direct_materials': 400e3,\n    'costs_conversion_costs': 170e3,\n    'costs_incurred': 570e3\n    }  \n}\n\n\nPhysical unit flow calculation\n\n\nShow the code\ndef physical_flow( dict):\n  \n  # units to be accounted for = wip_start + started_transferred\n  tot_units = dict['units']['wip_start'] + dict['units']['units_in_production']\n  # units accounted for = completed_transferred + wip_end\n  units_acc = dict['units']['units_completed_transferred'] + dict['units']['wip_end']\n  \n  print(\"-- Physical Unit Flow --\")\n  print(\"Total units accounted for  ........ {:,}\".format(units_acc))\n  print(\"Total units ....................... {:,}\".format(tot_units))\n  \n\nphysical_flow( mixing_data )\n\n\n-- Physical Unit Flow --\nTotal units accounted for  ........ 900,000.0\nTotal units ....................... 900,000.0\n\n\n\n\n4.3.2 Equivalent units: Production\nAfter determining the physical flow of units next step is to measure the department’s productivity in equivalent units of production. For this example company, two calculations are required as there is mixing materials and the conversion costs.\n\n\nShow the code\ndef equivalent_units( dict ):\n  \n  units = list(dict['units'].values())\n \n  wip_end = units[-3] \n  wip_end_materials = units[-2]\n  units_completed_transferred = units[-4]\n  wip_end_conversion_costs_percent = units[-1]\n  materials_equiv_cost = (wip_end * wip_end_materials) + units_completed_transferred\n  conv_costs_equiv_cost = (wip_end * wip_end_conversion_costs_percent) + units_completed_transferred\n\n  print(\"-- Equivalent Units --\")\n  print(\"Equivalent units (materials) .................... {:,}\".format(materials_equiv_cost))\n  print(\"Equivalent units (conversion costs) ............. {:,}\".format(conv_costs_equiv_cost))\n  \n  \nequivalent_units(mixing_data)\n\n\n-- Equivalent Units --\nEquivalent units (materials) .................... 900,000.0\nEquivalent units (conversion costs) ............. 820,000.0\n\n\n\n\n4.3.3 Unit Production Costs\nNow we need to calculate the unit production costs which are costs expressed in terms of equivalent units of production. If equivalent units of production are different for materials and for conversion costs, then 3 unit costs are calculated:\n\nmaterial costs\nconversion costs\ntotal manufacturing cost\n\nCalculation of the total materials cost for pancakes\n\n\nShow the code\ndef production_costs( dict ):\n  \n  units = list(dict['units'].values())\n\n  wip_end = units[-3]\n  wip_end_materials_percent = units[-2]\n  units_completed_transferred = units[4]\n  \n  materials_equiv_cost = (wip_end * wip_end_materials_percent) + units_completed_transferred\n  \n  costs = list(dict['costs'].values())\n  \n  wip_start_conversion_costs = costs[0]\n  costs_conversion_costs = costs[-2]\n  \n  tot_material_cost =  wip_start_conversion_costs + costs_conversion_costs\n  unit_material_cost = round(tot_material_cost / materials_equiv_cost, 2)\n  tot_conv_cost = wip_start_conversion_costs + costs_conversion_costs\n  conv_costs_equiv_cost = (wip_end * units[-1]) + units_completed_transferred\n  unit_conv_cost = round(tot_conv_cost / conv_costs_equiv_cost, 2)\n  tot_manuf_cpu = unit_material_cost + unit_conv_cost\n  transf_out = units_completed_transferred * tot_manuf_cpu\n  \n  tot_cost_recon = (wip_end * unit_material_cost) + ((wip_end * units[-1]) * unit_conv_cost)\n  \n  recon_sched = transf_out + tot_cost_recon\n  \n  print(\"-- Unit Production Costs --\")\n  print(\"Total materials costs  ..................... ${:,}\".format(tot_material_cost))\n  print(\"Unit materials cost  ....................... ${:,}\\n\".format(unit_material_cost))\n  print(\"Total conversion costs ..................... ${:,}\".format(tot_conv_cost))\n  print(\"Unit conversion costs  ..................... ${:,}\".format(unit_conv_cost))\n  print(\"Total manufacturing cost per unit  ......... ${:,}\\n\".format(tot_manuf_cpu))\n  print(\"Cost reconciliation schedule ............... ${:,}\".format(recon_sched))\n  \n\nproduction_costs( mixing_data )\n\n\n-- Unit Production Costs --\nTotal materials costs  ..................... $220,000.0\nUnit materials cost  ....................... $0.24\n\nTotal conversion costs ..................... $220,000.0\nUnit conversion costs  ..................... $0.27\nTotal manufacturing cost per unit  ......... $0.51\n\nCost reconciliation schedule ............... $437,400.0\n\n\n\n\n4.3.4 Cost Reconciliation Schedule\nNow is the stage where the cost of goods transferred out of one department and into another are determined.\n\n\nShow the code\ndef cost_reconciliation( dict ):\n  \n  costs = list(dict['costs'].values())\n  \n  tot_cost = costs[2] + costs[-1]\n  \n  print(\"-- Cost Reconciliation --\")\n  print(\"Total costs charged to department ........... ${:,}\".format(tot_cost))\n  \ncost_reconciliation( mixing_data )\n\n\n-- Cost Reconciliation --\nTotal costs charged to department ........... $655,000.0\n\n\nFor this company example, $655,000 were the costs for the mixing department.\n\n\n4.3.5 Production Cost Report\nThe production cost report is an internal document use by management that shows the production quantity and cost data for a department. There are 4 steps in preparing a production cost report:\n\nprepare a physical unit schedule\ncalculate the equivalent units\ncalculate the unit costs\nprepare a cost reconciliation schedule\n\n\nThis book is showing only Python code and output, but since accounting is in the business sector, you will obviously want to use your Python skills and convert your own .py file into a Microsoft Word document or presentation. By knowing Python you can extend these skills to using libraries such as python-docx which makes and reads Word Documents. Once you know Python you can usually type in Google or any other web search engine for “python + search terms” and will get results. Python code now is what you are seeing, but on your own you can make your python files into reproducible professional documents, dashboards and even web apps.\n\nSince each of the steps has already been calculated above using functions, we can just copy our call our functions and get the output of the calculations.\n\n\nShow the code\nprint(\"-- PRODUCTION COST REPORT --\")\nprint('')\nphysical_flow(mixing_data)\nprint('')\nequivalent_units(mixing_data)\nprint('')\nproduction_costs( mixing_data)\nprint('')\ncost_reconciliation(mixing_data)\n\n\n-- PRODUCTION COST REPORT --\n\n-- Physical Unit Flow --\nTotal units accounted for  ........ 900,000.0\nTotal units ....................... 900,000.0\n\n-- Equivalent Units --\nEquivalent units (materials) .................... 900,000.0\nEquivalent units (conversion costs) ............. 820,000.0\n\n-- Unit Production Costs --\nTotal materials costs  ..................... $220,000.0\nUnit materials cost  ....................... $0.24\n\nTotal conversion costs ..................... $220,000.0\nUnit conversion costs  ..................... $0.27\nTotal manufacturing cost per unit  ......... $0.51\n\nCost reconciliation schedule ............... $437,400.0\n\n-- Cost Reconciliation --\nTotal costs charged to department ........... $655,000.0\n\n\nThe wonderful thing about functions is that you spend the time making them, but once you do you benefit from it. Making this report output was really easy, just calling the functions already created.\n\n\n4.3.6 Cost Report: other\nThis example company that makes pancakes has 3 departments: mixing, baking and freezing then packaging. The costs of completed units from the mixing department are treated as material costs in the baking department. Transferred-in cost is the component treated the same way as any other cost component in the equivalent units of production and the cost per equivalent unit of production.\nCost data for the freezing and packaging department. By copying the list object mixing_data, we can reuse the structure for new values for the packaging department. Changes do need to be made to this nested list object, but overall less work involved.\n\n\nShow the code\nfreezing_data = {\n    'units': {\n        'wip_start': 200e3,                   # June 1\n        'transferred_in_percent_complete': 1,\n        'direct_materials_percent_complete': 0,\n        'conversion_percent_complete': 0.90,\n        'units_completed_transferred': 700e3,\n        'units_in_production_complete': 800e3,\n        'wip_end':  100e3,                       # June 30\n        'wip_end_transf_complete_prct': 1,\n        'wip_end_direct_material_prct':  0,\n        'wip_end_conversion_complete': 0.75\n      },\n    'costs': {\n        'wip_start_direct_materials': 170e3,\n        'transferred_in_percent_complete': 1,\n        'direct_materials_percent_complete': 0,\n        'direct_materials_complete': 0,\n        'conversion_percent_complete': 0.90,\n        'conversion_complete': 36e3,\n        'cost_wip_start': 206e3,\n        'costs_transferred_in': 595e3,\n        'costs_direct_materials': 120e3,\n        'costs_conversion_costs': 139e3,\n        'total_costs': 854e3,\n      }  \n}\n\n\n\n\n4.3.7 Production Cost Report\nA function for production cost report using a data dictionary.\n\n\nShow the code\ndef prod_cost_report( dict ):\n  \n  print(\" --- Production Cost Report ---\\n\")\n  units = list(dict['units'].values()) \n  costs = list(dict['costs'].values())\n  \n  # -- units_in_production_complete + wip_end\n  units_acc_transf = units[5] + units[6]\n  # -- wip_start + units_completed_transferred\n  tot_units = units[0] + units[4]\n  # -- \n  units_in_production_complete = units[5]\n  direct_materials_percent_complete = units[2]\n  \n  units_acc_materials = units_in_production_complete + direct_materials_percent_complete \n  \n  wip_end_conversion_complete= units[-1]\n  \n  prct = units[6]  * wip_end_conversion_complete\n  units_acc_conv = units_in_production_complete + prct\n  \n  costs_transferred_in = costs[-4]\n  cost_transf = units[-2] + costs_transferred_in\n  \n  # direct_materials_complete + costs_direct_materials\n  cost_materials = costs[3] + costs[8]\n  # conversion_complete + costs_conversion_costs\n  cost_conv = costs[5] + costs[-2]\n  tot_unit_costs = cost_transf + cost_materials + cost_conv\n  \n  unit_cost_transf = round(cost_transf / units_acc_transf, 2)\n  unit_cost_materials = round(cost_materials / units_acc_materials, 2)\n  unit_costs_conv = round(cost_conv /units_acc_conv , 2)\n  \n  tot_unit_costs_2 = unit_cost_transf + unit_cost_materials + unit_costs_conv\n  # cost_wip_start + total_costs\n  total_costs = costs[6] + costs[-1]\n  \n  cost_acc_transf = tot_unit_costs_2 * units_acc_materials\n  wip_end_transf = units[6] * unit_cost_transf\n  # wip_end_direct_material_prct * unit_cost_materials\n  wip_end_material = units[-2] * unit_cost_materials \n  wip_end_conv =  prct * unit_costs_conv\n  tot_cost_recon = wip_end_transf + wip_end_material + wip_end_conv + cost_acc_transf\n\n  \n  print(\"-- Physical Unit Flow --\")\n  print(\"Total units ......................................... {:,}\".format(tot_units))\n  print(\"Total units accounted for transferred ............... {:,}\".format(units_acc_transf))\n  print(\"Total units accounted for direct materials .......... {:,}\".format(units_acc_materials))\n  print(\"Total units accounted for conversion costs .......... {:,}\".format(units_acc_conv))\n    \n\n  print(\"\\n-- Unit Costs --\")\n  print(\"Total unit costs transferred ....................... ${:,}\".format(cost_transf))\n  print(\"Total unit costs direct materials .................. ${:,}\".format(cost_materials))\n  print(\"Total unit conversion costs ........................ ${:,}\".format(cost_conv))\n  print(\"Total unit costs ................................... ${:,}\".format(tot_unit_costs))\n    \n  print(\"Unit costs transferred ............................. ${:,}\".format(unit_cost_transf))\n  print(\"Unit costs direct materials ........................ ${:,}\".format(unit_cost_materials))\n  print(\"Unit conversion costs .............................. ${:,}\".format(unit_costs_conv))\n  print(\"Unit costs total ................................... ${:,}\".format(tot_unit_costs_2))    \n  print(\"Total costs ........................................ ${:,}\".format(total_costs))\n    \n  print(\"\\n --- Cost Reconciliation Schedule ---\")\n  print(\"Costs accounted for transferred ................... ${:,}\".format(cost_acc_transf))\n  print(\"Work in process end transferred ................... ${:,}\".format(wip_end_transf))    \n  print(\"Work in process end materials ..................... ${:,}\".format(wip_end_material))\n  print(\"Work in process end conversion costs .............. ${:,}\".format(wip_end_conv))\n  print(\"Total costs accounted for ......................... ${:,}\".format(tot_cost_recon))\n    \n\n\n#-----\nprod_cost_report( freezing_data )\n\n\n --- Production Cost Report ---\n\n-- Physical Unit Flow --\nTotal units ......................................... 900,000.0\nTotal units accounted for transferred ............... 900,000.0\nTotal units accounted for direct materials .......... 800,000.0\nTotal units accounted for conversion costs .......... 875,000.0\n\n-- Unit Costs --\nTotal unit costs transferred ....................... $595,000.0\nTotal unit costs direct materials .................. $120,000.0\nTotal unit conversion costs ........................ $175,000.0\nTotal unit costs ................................... $890,000.0\nUnit costs transferred ............................. $0.66\nUnit costs direct materials ........................ $0.15\nUnit conversion costs .............................. $0.2\nUnit costs total ................................... $1.01\nTotal costs ........................................ $1,060,000.0\n\n --- Cost Reconciliation Schedule ---\nCosts accounted for transferred ................... $808,000.0\nWork in process end transferred ................... $66,000.0\nWork in process end materials ..................... $0.0\nWork in process end conversion costs .............. $15,000.0\nTotal costs accounted for ......................... $889,000.0"
  },
  {
    "objectID": "chapter3.html#code",
    "href": "chapter3.html#code",
    "title": "4  Process Cost Accounting",
    "section": "4.5 code",
    "text": "4.5 code\n\n\nShow the code\nfifo_data['units_start']\n\n\n{'wip_start_complete_percent': 0.4,\n 'wip_start_complete': 500,\n 'units_transf_prod': 8000.0,\n 'total_units': 8500}\n\n\n\n\nShow the code\nfifo_data['units_end']\n\n\n{'wip_end_complete_transf': 8100,\n 'wip_end_complete_percent': 0.75,\n 'wip_end': 400,\n 'total_units': 8500}\n\n\n\n\nShow the code\nfifo_data['units_end']['wip_end'] * fifo_data['units_end']['wip_end_complete_percent']\n\n\n300.0"
  },
  {
    "objectID": "chapter3.html#equivalent-units-fifo",
    "href": "chapter3.html#equivalent-units-fifo",
    "title": "4  Process Cost Accounting",
    "section": "4.4 Equivalent Units: FIFO",
    "text": "4.4 Equivalent Units: FIFO\nFIFO is first in, first out method for calculating equivalent units. The FIFO method for costs assumes that the work in process completes before new work is initiated. Equivalent units for FIFO are:\n\nprocess inventory is finished work in units\nunits in production have been completed\nwork started but not complete is partially completed, perpetually work in process\n\nThe company for this example makes home furnishings.\n\n\nShow the code\nfifo_data = {\n    'units_start': {\n      'wip_start_complete_percent': 0.40,\n      'wip_start_complete': 500,\n      'units_transf_prod': 8e3,\n      'total_units':  8500\n      },\n    'units_end': {\n      'wip_end_complete_transf': 8100,\n      'wip_end_complete_percent': 0.75,\n      'wip_end': 400,\n      'total_units':  8500\n      }\n}\n\n\nEquivalent units\n\n\nShow the code\ndef fifo_method( dict):\n  \n  start = list(dict['units_start'].values())\n  end = list(dict['units_end'].values())\n  \n  # wip_start_complete , wip_start_complete_percent\n  begin_inv =  start[1] * (1 - start[0] )\n  \n  # wip_end_complete_transf - wip_start_complete\n  units_started_finished = end[0] - start[1]\n  \n  # wip_end * wip_end_complete_percent\n  equiv_units = end[2] * end[1]\n  \n  tot_equiv = begin_inv + units_started_finished + equiv_units\n  \n  print(\"-- Equivalent Units: FIFO --\")\n  print(\"beginning inventory required to complete ............ {:,} units\".format(begin_inv))\n  print(\"units started & completed ........................... {:,} units\".format(units_started_finished ))\n  print(\"equivalent units .................................... {:,} units\".format(equiv_units ))\n  print(\"Total equivalent units .............................. {:,} units\".format(tot_equiv ))\n  \nfifo_method(fifo_data)\n\n\n-- Equivalent Units: FIFO --\nbeginning inventory required to complete ............ 300.0 units\nunits started & completed ........................... 7,600 units\nequivalent units .................................... 300.0 units\nTotal equivalent units .............................. 8,200.0 units"
  },
  {
    "objectID": "chapter4.html#the-abc-system",
    "href": "chapter4.html#the-abc-system",
    "title": "5  Activity Based Costing",
    "section": "5.1 The ABC system",
    "text": "5.1 The ABC system\nThe amount of direct labor used in industries has changed with decreased, and the total overhead costs such as: depreciation on equipment, machinery, utilities, repairs and maintenance has increased. The ABC system uses machine hours as foundation for determining overhead costs, but this may not be precise enough for accurate costing for some industries where the manufacturing process is complicated, thus there is activity based costing. The ABC is a method for allocating overhead costs for specific activities then assigns these costs to products and services using costing drivers.\n\nactivity is any event, transaction or work sequence that incurs a cost during production\nactivity cost pool is a unique activity like ordering materials or machinery setting up\ncost driver any activity that has a direct cause-effect relationship with resources consumed\n\n\nIf there is no or little correlation between changes in the cost driver and the consumption of the overhead cost, then inaccurate product costs will result\n\n\n5.1.1 ABC example\nA company produces two items, item 1 is a high volume item totalling 25,000 units annually. The second item is a low volume item totalling only 5,000 units per year. Each product requires 1 hour of direct labor to complete. Expected annual manufacturing overhead costs are $900,000.\n\n\nShow the code\nhigh_vol_item = 25e3\nlow_vol_item = 5e3\nexpect_overhead = 900e3\n\ntotal_annual_direct_labor = high_vol_item + low_vol_item\n\npred_overhead_rate = expect_overhead / total_annual_direct_labor\n\nprint(\"Total annual direct labor hours = {:,}\".format(total_annual_direct_labor))\nprint(\"Predetermined overhead rate \\n(traditional costing) = ${:,} per labor hr\".format(pred_overhead_rate))\n\n\nTotal annual direct labor hours = 30,000.0\nPredetermined overhead rate \n(traditional costing) = $30.0 per labor hr\n\n\n\n\n5.1.2 ABC step 1\nThis example company has three activity cost pools: setting p machine, machining and inspecting. All overhead costs directly associated with machine setting up (salaries, supplies and depreciation) are assigned to machine set-up cost pool.\n\n\n\ncost pool\nestimated overhead\n\n\n\n\nmachines set up\n$300,000\n\n\nmachining\n$500,000\n\n\ninspecting\n$100,000\n\n\n\n\n\nShow the code\nabc_costs = {\n  'setting_up_machines': 300e3,\n  'machining': 500e3,\n  'inspecting': 100e3\n}\n\n# make a list variable that stores the dictionary values\ndict_list = list( abc_costs.values() )\n# loop through the dictionary values then sum the values and store in variable s\nfor num in dict_list:\n  s = sum( dict_list )\n\nprint(\"Activity cost pool total = $ {:,}\".format(s))\n\n\nActivity cost pool total = $ 900,000.0\n\n\n\n\n5.1.3 ABC step 2\nNow the task is to identify the cost drivers for each cost pool. The cost driver must accurately measure the actual consumption of the activity by the various products. To get accurate costing, there needs to be a high degree of correlation between cost driver and consumption of the overhead costs.\n\nactivity cost pool - Setting up machines, Machining, Inspecting\ncost drivers - number of machines set up, machine hours, number of inspection\nexpected use: cost driver - 1,500 machine set ups, 50,000 machine hours and 2,000 inpsections\n\n\n\n5.1.4 ABC step 3\nCalculate the activity based overhead rate per cost driver by dividing the estimated overhead per activity by the number of cost drivers by the number of cost drivers expected to be used.\n\n\nShow the code\n# make a copy of the abc costs\ncost_drivers = abc_costs.copy()\n# add new dictionary keys and values to cost drivers dictionary\ncost_drivers.update( {'expected_machine_setups': 1500} )\ncost_drivers.update( {'expected_machine_hours': 50e3} )\ncost_drivers.update( {'expected_inspections': 2000} )\n\n\nMake a function to calculate the activity based overhead rates.\n\n\nShow the code\n# create a function to calculate the overhead rates\ndef activity_overhead_rates(costing_data: dict):\n  \n  overhead_rates_1 = cost_drivers['setting_up_machines'] / cost_drivers['expected_machine_setups']\n  overhead_rates_2 = cost_drivers['machining'] / cost_drivers['expected_machine_hours']\n  overhead_rates_3 = cost_drivers['inspecting'] / cost_drivers['expected_inspections']\n  \n  print(\"\\n --- Activity Based Overhead Rates --\")\n  print(\"per machine set up ................... ${:.2f}\".format( overhead_rates_1))\n  print(\"per machine hours .................... ${:.2f}\".format( overhead_rates_2))\n  print(\"per machine inpections ............... ${:.2f}\".format( overhead_rates_3))\n\n\n\nactivity_overhead_rates( cost_drivers)\n\n\n\n --- Activity Based Overhead Rates --\nper machine set up ................... $200.00\nper machine hours .................... $10.00\nper machine inpections ............... $50.00\n\n\n\n\n5.1.5 ABC step 4\nThis step is about assigning overhead costs, necessary to know the overhead cost driver for each product. This example company has two items, one item takes longer for set up and inspections.\n\nexpected use of cost driver per product\nitem 1 = 500, 30,000, 500\nitem 2 = 1,000, 20,000 and 1,500\n\nUpdate the dictionary\n\n\nShow the code\ncost_drivers.update({'item_1': {'exp_cost_machine_setups':500, 'exp_cost_machining':30e3, 'exp_cost_inpsecting': 500} })\ncost_drivers.update( {'item_2': {'exp_cost_machine_setups':1000, 'exp_cost_machining':20e3, 'exp_cost_inpsecting': 1500} })\n\n# add the number of units produced, stated in the beginining of section\ncost_drivers.update({'units_produced_item1': 25e3})\ncost_drivers.update({'units_produced_item2': 5e3})\n# cost_drivers\n\n\nMake a function to calculate the product overhead costs.\n\n\nShow the code\ndef product_overhead_costs( costing_data: dict ):\n  # need rate for calculation\n  overhead_rates_1 = cost_drivers['setting_up_machines'] / cost_drivers['expected_machine_setups'] # $200\n  overhead_rates_2 = cost_drivers['machining'] / cost_drivers['expected_machine_hours']            # $10\n  overhead_rates_3 = cost_drivers['inspecting'] / cost_drivers['expected_inspections']             # $50\n  \n  # -- item 1\n  mach_setup_cost_1 = cost_drivers['item_1']['exp_cost_machine_setups'] * overhead_rates_1\n  machine_cost_1 = cost_drivers['item_1']['exp_cost_machining'] * overhead_rates_2\n  inspect_cost_1 = cost_drivers['item_1']['exp_cost_inpsecting'] * overhead_rates_3\n  total_assigned_costs_1 = mach_setup_cost_1 + machine_cost_1 + inspect_cost_1\n  overhead_cpu_1 = total_assigned_costs_1 / cost_drivers['units_produced_item1']\n  \n  #-- item 2\n  mach_setup_cost_2 = cost_drivers['item_2']['exp_cost_machine_setups'] * overhead_rates_1\n  machine_cost_2 = cost_drivers['item_2']['exp_cost_machining'] * overhead_rates_2\n  inspect_cost_2 = cost_drivers['item_2']['exp_cost_inpsecting'] * overhead_rates_3\n  total_assigned_costs_2 = mach_setup_cost_2 + machine_cost_2 + inspect_cost_2\n  overhead_cpu_2 = total_assigned_costs_2 / cost_drivers['units_produced_item2']\n  \n  \n  print(\"\\n --- Product Overhead Costs ---\")\n  print(\"item 1\")\n  print(\"Cost assigned: machine set up ................... ${:,}\".format(mach_setup_cost_1))\n  print(\"Cost assigned: machine costs .................... ${:,}\".format(machine_cost_1))\n  print(\"Cost assigned: machine costs..................... ${:,}\".format(inspect_cost_1))\n  print(\"Total costs assigned ............................ ${:,}\".format(total_assigned_costs_1))\n  print(\"Overhead cost per unit .......................... ${:,}\".format(overhead_cpu_1))\n  print(\"item 2\")\n  print(\"Cost assigned: machine set up ................... ${:,}\".format(mach_setup_cost_2))\n  print(\"Cost assigned: machine costs .................... ${:,}\".format(machine_cost_2))\n  print(\"Cost assigned: machine costs .................... ${:,}\".format(inspect_cost_2))\n  print(\"Total costs assigned ............................ ${:,}\".format(total_assigned_costs_2))\n  print(\"Overhead cost per unit .......................... ${:,}\".format(overhead_cpu_2))\n  \n  \n\nproduct_overhead_costs( cost_drivers )\n\n\n\n --- Product Overhead Costs ---\nitem 1\nCost assigned: machine set up ................... $100,000.0\nCost assigned: machine costs .................... $300,000.0\nCost assigned: machine costs..................... $25,000.0\nTotal costs assigned ............................ $425,000.0\nOverhead cost per unit .......................... $17.0\nitem 2\nCost assigned: machine set up ................... $200,000.0\nCost assigned: machine costs .................... $200,000.0\nCost assigned: machine costs .................... $75,000.0\nTotal costs assigned ............................ $475,000.0\nOverhead cost per unit .......................... $95.0\n\n\n\n\n5.1.6 ABC unit cost comparison\nLooking at the manufacturing costs for this example company, comparison of unit costs of the two items produced.\n\ndirect materials costs = (item 1) 40, (item 2) 30\ndirect labor costs = 12\noverhead = (predetermined overhead rate * 1 hr) 30\n\n\n\nShow the code\n# -- info from start of section 5.1\nhigh_vol_item = 25e3\nlow_vol_item = 5e3\nexpect_overhead = 900e3\nhours = 1\n# ------\n\ntotal_annual_direct_labor = high_vol_item + low_vol_item\n\npred_overhead_rate = expect_overhead / total_annual_direct_labor\nprint(\"Predetermined overhead rate = $\",pred_overhead_rate * hours)\n\n\nPredetermined overhead rate = $ 30.0\n\n\nMake a manufacturing costs data dictionary to use for unit cost comparisons.\n\n\nShow the code\nmanuf_costs = {\n  'item_1': {'direct_material': 40, 'direct_labor': 12, 'overhead_rate': 30},\n  'item_2': {'direct_material': 30, 'direct_labor': 12, 'overhead_rate': 30}\n}\n\n\nA function for unit cost comparison between traditional costs and the ABC method. We use the information from ABC step 4 product cost overhead.\n\n\nShow the code\ndef unit_comparison( manufacturing_data: dict,  item_1_cpu: int, item_2_cpu: int):\n  \n  # convert the dictionary into a list\n  m = list( manuf_costs )\n  # create an empty array to loop through the values and sum them\n  ml = []\n  for x in m:\n    sx = sum( manuf_costs[x].values() )\n    ml.append(sx)  # append the summed values to the array\n      \n  print(\"Tradional costing\")\n  print(\"\\titem 1 product total unit cost = $\", ml[0])\n  print(\"\\titem 2 product total unit cost = $\", ml[1])\n\n\n  # item 1 overhead cost per unit\n  # item_1_cpu = 17\n  # item_2_cpu = 95\n    \n  abc_1 = (manuf_costs['item_1']['direct_material'] + manuf_costs['item_1']['direct_labor'] + item_1_cpu)\n  abc_2 = (manuf_costs['item_2']['direct_material'] + manuf_costs['item_2']['direct_labor'] + item_2_cpu)\n    \n  print(\"ABC method\")\n  print(\"\\titem 1 product total unit cost = $\", abc_1 )\n  print(\"\\titem 2 product total unit cost = $\", abc_2)\n    \n\n# ----\nunit_comparison(manuf_costs, 17, 95)\n\n\nTradional costing\n    item 1 product total unit cost = $ 82\n    item 2 product total unit cost = $ 72\nABC method\n    item 1 product total unit cost = $ 69\n    item 2 product total unit cost = $ 137\n\n\nBy comparing the costing systems, item 1 was over costed (82 vs the 69) and for item 2 the cost was under the more accurate cost of $137.\n\n\n5.1.7 ABC example\nIn this ABC system example, a company has 7 cost pools and 2 products. The expected units produced are: item 1 = 200,000 units and item 2 = 80,000 units. This company has annual overhead data available for calculations.\nThis example section uses the library NumPy to do multiple calculations of array vectors (lists) which you have already used in previous sections. This is new information and is not explained, but the use in this section is simply converting a python list into a NumPy array which allows for mathematical operations. So far the functions have been very simple and one by one calculation and this section does all of the math in one step, much like you would using Excel. Python lists cannot do math operations for what we want to do, so knowing and understanding NumPy is important to know for this section alone (NumPy is a huge library for various math operations using array vectors, so just see if you can follow along here).\nThe company overhead data is stored in a data dictionary.\n\n\nShow the code\noverhead_data = {\n  'activity_cost_pools': ['ordering_receiving','machine_setup', 'machining','assembling','inspecting_testing'],\n  \n  'expected_units': {'item_1': 200e3, 'item_2': 80e3},\n  \n  'cost_drivers':{\n    'purchase_orders': 200e3,\n    'set_up': 600e3,\n    'machine_hours': 2e6,\n    'parts': 1.8e6,\n    'tests': 700e3\n    },\n    \n    'expected_use_cost_drivers': {\n      'orders': 2500,\n      'set_ups': 1200,\n      'hours': 800e3,\n      'parts': 3e6,\n      'tests': 35e3\n      },\n      \n     'exp_use_item_1': {\n      'orders': 1000,\n      'set_ups': 500,\n      'hours': 300e3,\n      'parts': 1.8e6,\n      'tests': 20e3\n      },\n      \n      'exp_use_item_2': {\n      'orders': 1500,\n      'set_ups': 700,\n      'hours': 500e3,\n      'parts': 1.2e6,\n      'tests': 15e3\n      }\n}\n\n\nA function that does all of the ABC steps in one step, including the unit cost comparison between the items. The library NumPy comes installed with the Anaconda download and is also easily installed in the terminal. Import NumPy inside the function as outside of the function it will not be accessible (function scope). This function takes the data dictionary as a function argument and prints out the calculations.\n\n\nShow the code\ndef abc_method( costing_data: dict ):\n  # import the NumPy library in order to do math of arrays \n  import numpy as np\n  \n  print(\"--- ABC method ---\")\n  \n  # sum the values in the cost drivers\n  total_estimated_overhead = sum( overhead_data['cost_drivers'].values() )\n  print(\"Total activity costs, estimated overhead = ${:,}\".format(total_estimated_overhead))\n  \n  # convert the dictionary values into a list\n  estimated_overhead = list( overhead_data['cost_drivers'].values() )\n  exp_use_cost_drivers = list( overhead_data['expected_use_cost_drivers'].values() )\n  \n  # ---- convert the python lists into NumPy arrays, needed for calculations\n  act_overhead_rates = np.array(estimated_overhead) / np.array(exp_use_cost_drivers)\n  \n  print(\"\\nActivity based overhead rates\")\n  \n  # loop through the NumPy array and print it\n  for x in range(len(act_overhead_rates)):\n    print(\".\"*5,'$', act_overhead_rates[x], \" per \",overhead_data['activity_cost_pools'][x] )\n  \n  # convert list into a NumPy array from the list conversion of data dictionary values\n  item_1_exp_cost_driver = np.array( list( overhead_data['exp_use_item_1'].values() ) )\n  item_1_costs_assigned = item_1_exp_cost_driver * act_overhead_rates\n\n  print(\"\\nitem 1\")\n  # convert the costs assigned into a list\n  # using range from 0 to the length of the array\n  item1_costs_assigned = list( range(len(item_1_costs_assigned)) )\n  cost_list = [] # create empty array to store values\n  \n  for x in  item1_costs_assigned:\n    cost_items_1 = item_1_costs_assigned[x]\n    print(\"Cost assigned\",'${:,}'.format( cost_items_1,\" per unit\" ) )\n    cost_list.append(cost_items_1) # add each looped item to array to be summed\n \n  total_assigned_costs = sum(cost_list )\n  print(\"Total assigned costs = ${:,}\".format(total_assigned_costs))\n\n  #-- repeat same process for second item\n\n  item_2_exp_cost_driver = np.array( list( overhead_data['exp_use_item_2'].values() ) )\n  item_2_costs_assigned = item_2_exp_cost_driver * act_overhead_rates\n  print(\"\\nitem 2\")\n  item1_costs_assigned = list( range(len(item_2_costs_assigned)) )\n  cost_list_2 = []\n  for x in  item1_costs_assigned:\n    cost_items_2 = item_2_costs_assigned[x]\n    print(\"Cost assigned\",'${:,}'.format( cost_items_2,\" per unit\" ) )\n    cost_list_2.append(cost_items_2)\n   \n  total_assigned_costs_2 = sum(cost_list_2 )\n  print(\"Total assigned costs = ${:,}\".format(total_assigned_costs_2))\n\n  \n  item1_overhead_cpu =   total_assigned_costs / overhead_data['expected_units']['item_1']\n  item2_overhead_cpu = total_assigned_costs_2 / overhead_data['expected_units']['item_2']\n  \n  print(\"\\nOverhead cost per unit (item 1) = ${:,}\".format(item1_overhead_cpu))\n  print(\"Overhead cost per unit (item 2) = ${:,}\".format(item2_overhead_cpu))\n\n\nCall the function\n\n\nShow the code\nabc_method( overhead_data )\n\n\n--- ABC method ---\nTotal activity costs, estimated overhead = $5,300,000.0\n\nActivity based overhead rates\n..... $ 80.0  per  ordering_receiving\n..... $ 500.0  per  machine_setup\n..... $ 2.5  per  machining\n..... $ 0.6  per  assembling\n..... $ 20.0  per  inspecting_testing\n\nitem 1\nCost assigned $80,000.0\nCost assigned $250,000.0\nCost assigned $750,000.0\nCost assigned $1,080,000.0\nCost assigned $400,000.0\nTotal assigned costs = $2,560,000.0\n\nitem 2\nCost assigned $120,000.0\nCost assigned $350,000.0\nCost assigned $1,250,000.0\nCost assigned $720,000.0\nCost assigned $300,000.0\nTotal assigned costs = $2,740,000.0\n\nOverhead cost per unit (item 1) = $12.8\nOverhead cost per unit (item 2) = $34.25\n\n\nAs mentioned before, building functions does take some time and effort, but once you have it, you can use it again and again."
  },
  {
    "objectID": "chapter4.html#code",
    "href": "chapter4.html#code",
    "title": "5  Activity Based Costing",
    "section": "5.2 code",
    "text": "5.2 code\n\n\nShow the code\ncost_drivers\n\n\n{'setting_up_machines': 300000.0,\n 'machining': 500000.0,\n 'inspecting': 100000.0,\n 'expected_machine_setups': 1500,\n 'expected_machine_hours': 50000.0,\n 'expected_inspections': 2000,\n 'item_1': {'exp_cost_machine_setups': 500,\n  'exp_cost_machining': 30000.0,\n  'exp_cost_inpsecting': 500},\n 'item_2': {'exp_cost_machine_setups': 1000,\n  'exp_cost_machining': 20000.0,\n  'exp_cost_inpsecting': 1500},\n 'units_produced_item1': 25000.0,\n 'units_produced_item2': 5000.0}\n\n\n\n\nShow the code\n# cost_drivers['units_produced']\ncost_drivers['item_1']['exp_cost_inpsecting']\n\n\n500\n\n\n\n\nShow the code\ncost_drivers\n\n\n{'setting_up_machines': 300000.0,\n 'machining': 500000.0,\n 'inspecting': 100000.0,\n 'expected_machine_setups': 1500,\n 'expected_machine_hours': 50000.0,\n 'expected_inspections': 2000,\n 'item_1': {'exp_cost_machine_setups': 500,\n  'exp_cost_machining': 30000.0,\n  'exp_cost_inpsecting': 500},\n 'item_2': {'exp_cost_machine_setups': 1000,\n  'exp_cost_machining': 20000.0,\n  'exp_cost_inpsecting': 1500},\n 'units_produced_item1': 25000.0,\n 'units_produced_item2': 5000.0}\n\n\n\n\nShow the code\nabc_costs\n\n\n{'setting_up_machines': 300000.0,\n 'machining': 500000.0,\n 'inspecting': 100000.0}"
  },
  {
    "objectID": "chapter5.html#the-cvp",
    "href": "chapter5.html#the-cvp",
    "title": "6  Decision Making: Cost Volume Profit",
    "section": "6.1 The CVP",
    "text": "6.1 The CVP\nCost volume profit (CVP) is the study of effects that change in costs and volume have on a company’s profits. Knowing CVP analysis informs decisions of selling prices, determining product mix and maximizing the use of production facilities.\nThe CVP analysis has some assumptions, such as:\n\nboth costs and revenues are linear throughout the activity\nall costs can be classified with reasonable accuracy as either variable or fixed\nchanges in activity are the only factors that affect costs\ninventory levels stay constant (all units made are sold)\nIf products sold are > 1, Then the sales mix stays constant. (percentage of total sales for each product will stay the same)\n\n\nThese assumptions need to all be true in order to get an accurate CVP analysis"
  },
  {
    "objectID": "chapter5.html#cvp-income-statement",
    "href": "chapter5.html#cvp-income-statement",
    "title": "6  Decision Making: Cost Volume Profit",
    "section": "6.2 CVP: Income Statement",
    "text": "6.2 CVP: Income Statement\nCost volume profit income statement classifies costs as variable or fixed and calculates a contribution margin. A contribution margin (CM) is the amount of revenue that remains after variable costs have been deducted (stated as total amount and per-unit basis). This chapter example business is a video production company, the cost data is in a data dictionary.\n\n6.2.1 CVP Break Even\nThe break even point is when the volume of sales matches the quantity of total costs, both variable and fixed, resulting in no income and no loss. Before deciding on introducing a new product or modifying the sales price, it is wise to know the break even analysis. Contribution margin per unit (cmpu).\n\nselling price, variable costs, fixed costs\nbreak_even = fixed_costs / ( price - variable_costs)\ncmpu = price - variable costs\n\n\n\n6.2.2 Target Operating Income\nManagement typically has a set objective for each other product lines, thus target operating income (toi).\n\nrequired_sales_units = (total_fixed_exp + toi) / cmpu\nrequired_sales_dollars = (total_fixed_exp + toi) / cmr\ntarget operating income (before tax)\n\n\n\n6.2.3 Target Income after tax\n\noperating income after tax = target income before tax x (1 - tax rate)\n\n\n\n6.2.4 Contribution margin\n\nrequired sales in units = (fixed costs + target income before tax) / contribution margin per unit\nrequired sales in dollars = (fixed costs + target income before tax) / contribution margin ratio\n\n\n\n6.2.5 Margin of Safety\nThe margin of safety is the difference between actual or expected sales and sales at the break even point, expressed as dollars, units or a ratio. The safety being that even if expected sales fail to be met, the break even range allows for management to have some neutral news. Sales are either actual or expected/\n\nmargin of safety in dollars = sales - break even sales\nmargin of safety ratio = (margin of safety in dollars) / sales\n\n\n\n6.2.6 Sales Mix\nThe sales mix is the relative proportion in which each product is sold when a company sells more than 1 product. For example a company sells printers 80% of the time and 20% is for computers, making the sales mix 80 : 20. To find out the break even sales for a sales mix, the weighted average unit contribution margin of all products needs to be calculated.\n\na company sells 2 items: item 1 sales = 1500, item 2 sales = 500\nitem 1 break even = 1500 / (1500 + 500) == 75%\nitem 2 break even = 500 / (1500 + 500) == 25%\nsales mix is 75 : 25.\n\nweighted average unit contribution margin (waucm)\n\nitem 1 margin percent = (unit contribution margin x sales mix percentage)\nitem 2 margin percent = (unit contribution margin x sales mix percentage)\nwaucm ($) = (item 1 margin percent ) + (item 2 margin percent )\nbreak even point (units) = fixed costs / waucm\n\nAny level of units sold, operating income will be greater if higher contribution margin units are sold, rather than lower contribution margin units.\n\n\n6.2.7 Break even sales\nFor large companies it is best to calculate the break even point in terms of sales dollars and not the number of units sold, using data from the product lines (not individual products).\nCompany has 2 divisions: division 1 and division 2, each division has hundreds of different products items.\n\ndivision 1 = (contribution margin ratio x sales mix percentage)\ndivision 2 = (contribution margin ratio x sales mix percentage)\n`waucm ratio = division 1 + division 2\nbreak even ($) = fixed costs / waucm\n\nbased on the break even point\n\nsales mix: division 1 % : division 2 %\ntotal break even sales k\ndivision 1 total break even = (division 1 % x sales k)\ndivision 2 total break even = (division 2 % x sales k)\n\nIf higher percentage were to occur in one division opposed to another, this would result in higher weighted average contribution margin ratio and a lower break even point."
  },
  {
    "objectID": "chapter5.html#cvp-function",
    "href": "chapter5.html#cvp-function",
    "title": "6  Decision Making: Cost Volume Profit",
    "section": "6.3 CVP Function",
    "text": "6.3 CVP Function\nThis section will have the cost volume profit analysis in one function, and the function will take a cost data dictionary as an argument.\n\n\nShow the code\ncost_data = {\n  'units_sold': 1600,\n  'sales_Q1': 800e3,\n  'variable_costs': {\n    'cost_goods_sold': 400e3,\n    'selling_expenses': 60e3,\n    'admin_expenses': 20e3\n    },\n  'fixed_costs': {\n    'cost_goods_sold': 120e3,\n    'selling_expenses': 40e3,\n    'admin_expenses': 40e3\n    },\n    'company_1': {\n      'sales': 800e3 ,\n      'variable_costs': 480e3,\n      'fixed_costs': 200e3\n    },\n    'company_2': {\n      'sales': 800e3 ,\n      'variable_costs': 160e3,\n      'fixed_costs': 520e3\n    }\n}\n\n\nThis function is so far is the biggest one, but all of the CVP analysis calculations are under one function. The company cost structure comparison is included, even though this operation could be done separately, it is included just for demonstration.\n\n\nShow the code\ndef cvp_income_statement( cost_data: dict, target_income: int, tax_rate_percent: float):\n  \n  sales = cost_data['sales_Q1']\n  units = cost_data['units_sold']\n  price = sales / units\n  \n  total_var_exp = sum( cost_data['variable_costs'].values() )\n  total_fixed_exp = sum( cost_data['fixed_costs'].values() ) \n  operating_income = 0\n  \n  # contribution margin per unit = selling price - unit var costs\n  cmpu = (cost_data['sales_Q1'] / cost_data['units_sold'] ) - (total_var_exp / units)\n  \n  # contribution margin\n  contrib_margin = sales - total_var_exp\n  \n  # operating income\n  op_income = contrib_margin - total_fixed_exp\n  \n  # contribution margin ratio\n  cmr = (cmpu / (sales/units) )\n  \n  print(\"\\n --- CVP Income Statement ---\")\n  print(\"Sales ....................................... {:,} units\".format(units) )\n  print(\"Sales total ................................ ${:,}\".format(sales) )\n  print(\"............. ${:,} per unit\".format(price))\n  print(\"Total variable expenses .................... ${:,}\".format(total_var_exp))\n  print(\"Contribution margin per unit ............... ${:,}\".format(cmpu))\n  print(\"Contribution margin ........................ ${:,}\".format(contrib_margin))\n  print(\"Contribution margin ratio .................. {:,}%\".format(cmr * 100))\n  print(\"  (${:.2f} of every $1 can go to fixed costs & operating income)\".format(cmr))\n  print(\"Total fixed expenses ....................... ${:,}\".format(total_fixed_exp))\n  print(\"Operating income ........................... ${:,}\".format(op_income))\n  \n  \n  # ------ BREAK EVEN POINT\n  break_even_units = total_fixed_exp / cmpu\n  break_even_dollars = total_fixed_exp / cmr\n    \n  print(\"\\nBreak even point = {:,} units or ${:,}\".format(break_even_units, break_even_dollars))\n\n  #------- target operating income (before tax) (toi)\n  toi = target_income\n  required_sales_units = (total_fixed_exp + toi) / cmpu\n  required_sales_dollars = (total_fixed_exp + toi) / cmr\n  \n  print(\"\\n--- Target Operating Income ----\")\n  print(\"Required sales (units) ..................... {:,}\".format(required_sales_units))\n  print(\"Required sales ............................. ${:,}\".format(required_sales_dollars))\n  \n  tax_rate = tax_rate_percent/100\n  op_income_post_tax = total_fixed_exp + toi / (1 - tax_rate)\n  req_sales_post_tax_units = op_income_post_tax / cmpu\n  req_sales_post_tax_dollars = op_income_post_tax / tax_rate\n  print(\"Target operating income after taxes ................. ${:,}\".format(op_income_post_tax ))\n  print(\"Required sales after taxes .......................... {:,} units\".format(req_sales_post_tax_units))\n  print(\"Required sales after taxes .......................... ${:,} \".format(req_sales_post_tax_dollars))\n\n  # --- margin of safety (mos)\n  mos_dollars = sales - break_even_dollars\n  mos_ratio = (mos_dollars) / sales\n  print(\"\\n--- Margin of Safety ---\")\n  print(\"Margin of safety ..................... ${:,}\".format(mos_dollars))\n  print(\"Margin of safety ratio ............... {:,}%\".format(mos_ratio *100))\n\n  print(\"\\n ====== Company Cost Structure - Comparison ======\")\n  contrib_margin_1 = cost_data['company_1']['sales'] - cost_data['company_1']['variable_costs']\n  contrib_margin_2 = cost_data['company_2']['sales'] - cost_data['company_2']['variable_costs']\n  \n  print(\"contribution margin (company 1) ................. ${:,}\".format( contrib_margin_1))\n  print(\"contribution margin (company 2) ................. ${:,}\".format( contrib_margin_2))\n  \n  contrib_margin_ratio_1 = contrib_margin_1 / cost_data['company_1']['sales']\n  contrib_margin_ratio_2 = contrib_margin_2 / cost_data['company_2']['sales']\n  print(\"\\ncontribution margin ratio (company 1) ............ {:,}\".format( contrib_margin_ratio_1))\n  print(\"contribution margin ratio (company 2) ............ {:,}\".format( contrib_margin_ratio_2))\n  \n  be_company1 = cost_data['company_1']['fixed_costs'] / contrib_margin_ratio_1\n  be_company2 = cost_data['company_2']['fixed_costs'] / contrib_margin_ratio_2\n  print(\"\\nBreak even point (company 1) .................. ${:,}\".format( be_company1))\n  print(\"Break even point (company 2) .................... ${:,}\".format( be_company2))\n  \n  # margin of safety (mos)\n  mos_ratio_1 = (cost_data['company_1']['sales'] - be_company1) / cost_data['company_1']['sales']\n  mos_ratio_2 = (cost_data['company_2']['sales'] - be_company2) / cost_data['company_2']['sales']\n  print(\"\\nMargin of safety ratio (company 1) ................. {:,}\".format( mos_ratio_1))\n  print(\"Margin of safety ratio (company 2) ................... {:,}\".format( mos_ratio_2))\n  \n  op_income_1 = contrib_margin_1  - cost_data['company_1']['fixed_costs']\n  op_income_2 = contrib_margin_2  - cost_data['company_2']['fixed_costs']\n  \n  operating_leverage_1 = contrib_margin_1 / op_income_1\n  operating_leverage_2 = contrib_margin_2 / op_income_2\n  print(\"\\nDegree of operating leverage (company 1) .............. {:.2f}\".format( operating_leverage_1))\n  print(\"Degree of operating leverage (company 2) ................ {:.2f}\".format( operating_leverage_2))\n  \n# ---------------\n\n\nNow call the CVP income statement function. The function’s arguments are the data dictionary, the target operation income and the tax rate as a percentage.\n\n\nShow the code\ncvp_income_statement( cost_data, target_income= 120e3, tax_rate_percent= 40)\n\n\n\n --- CVP Income Statement ---\nSales ....................................... 1,600 units\nSales total ................................ $800,000.0\n............. $500.0 per unit\nTotal variable expenses .................... $480,000.0\nContribution margin per unit ............... $200.0\nContribution margin ........................ $320,000.0\nContribution margin ratio .................. 40.0%\n  ($0.40 of every $1 can go to fixed costs & operating income)\nTotal fixed expenses ....................... $200,000.0\nOperating income ........................... $120,000.0\n\nBreak even point = 1,000.0 units or $500,000.0\n\n--- Target Operating Income ----\nRequired sales (units) ..................... 1,600.0\nRequired sales ............................. $800,000.0\nTarget operating income after taxes ................. $400,000.0\nRequired sales after taxes .......................... 2,000.0 units\nRequired sales after taxes .......................... $1,000,000.0 \n\n--- Margin of Safety ---\nMargin of safety ..................... $300,000.0\nMargin of safety ratio ............... 37.5%\n\n ====== Company Cost Structure - Comparison ======\ncontribution margin (company 1) ................. $320,000.0\ncontribution margin (company 2) ................. $640,000.0\n\ncontribution margin ratio (company 1) ............ 0.4\ncontribution margin ratio (company 2) ............ 0.8\n\nBreak even point (company 1) .................. $500,000.0\nBreak even point (company 2) .................... $650,000.0\n\nMargin of safety ratio (company 1) ................. 0.375\nMargin of safety ratio (company 2) ................... 0.1875\n\nDegree of operating leverage (company 1) .............. 2.67\nDegree of operating leverage (company 2) ................ 5.33"
  },
  {
    "objectID": "chapter5.html#cost-structure",
    "href": "chapter5.html#cost-structure",
    "title": "6  Decision Making: Cost Volume Profit",
    "section": "6.4 Cost Structure",
    "text": "6.4 Cost Structure\nCost structure is the relative proportion of fixed verses variable costs that a company incurs, which has an impact on profits.\nCompare two companies\n\n\nShow the code\ncompanies = {\n  'company1':{\n    'sales':800e3,\n    'variable_costs': 480e3,\n    'contribution_margin': 320e3,\n    'fixed_costs': 200e3,\n    'operating_income': 120e3\n    },\n  'company2':{\n    'sales':800e3,\n    'variable_costs': 160e3,\n    'contribution_margin': 640e3,\n    'fixed_costs': 520e3,\n    'operating_income': 120e3\n    }\n}\n\n\n\n6.4.1 Effect of CMR\n\noperating leverage is the level a company’s operating income reacts to a given change in sales.\n\n\n\nShow the code\ndef cmr( dict ):\n  company1 = list(dict['company1'].values())\n  company2 = list(dict['company2'].values())\n  \n  # contribution_margin / sales\n  cmr_company1 = company1[2] / company1[0]\n  cmr_company2 = company2[2] / company2[0]\n\n  print(\"Contribution margin ratio (company 1) ......... {:,} \".format(cmr_company1))\n  print(\"Contribution margin ratio (company 2) ......... {:,} \".format(cmr_company2))\n\n  # break even point: 'fixed_costs'\n  be_company1 = company1[3] / cmr_company1\n  be_company2 = company2[3] / cmr_company2\n\n  print(\"\\nBreak even point (company 1) ............ ${:,}\".format(be_company1))\n  print(\"Break even point (company 2) ............ ${:,}\".format(be_company2))\n\n  # margin of safety\n  magin_safe_1 = (company1[0] - be_company1) / company1[0]\n  magin_safe_2 = (company2[0] - be_company2) / company2[0]\n\n  print(\"\\nMargin of safety ratio (company 1) ............ {:,} \".format( magin_safe_1))\n  print(\"Margin of safety ratio (company 2) ............ {:,} \".format( magin_safe_2))\n\n  # operating leverage\n  op_lev_1 = company1[2] / company1[-1]\n  op_lev_2 = company2[2] / company2[-1]\n\n  print(\"\\nDegree of operating leverage (company 1) ........... {:.2f}\".format(op_lev_1))\n  print(\"Degree of operating leverage (company 2) ........... {:.2f}\".format(op_lev_2))\n  \n  \ncmr( companies )\n\n\nContribution margin ratio (company 1) ......... 0.4 \nContribution margin ratio (company 2) ......... 0.8 \n\nBreak even point (company 1) ............ $500,000.0\nBreak even point (company 2) ............ $650,000.0\n\nMargin of safety ratio (company 1) ............ 0.375 \nMargin of safety ratio (company 2) ............ 0.1875 \n\nDegree of operating leverage (company 1) ........... 2.67\nDegree of operating leverage (company 2) ........... 5.33\n\n\n\nFor every 1 dollar of sales, company 2 makes 80 cents to contribution margin (added to operating income)\ncompany 2 makes more in sales than company 1 (650,000 - 500,000 = 150,000)\nthe difference in margin of safety is that company 1 could manage a sales decline of 38% before seeing a operating loss, while the company 2 could only manage a 19% decline in sales before operating at a loss.\ncompany 2 can lose or gain twice the sales than company 1 (5.33 / 2.67 = 2)\n\nIf both companies see a decrease, say 10% drop in sales, then company 1 would see 26.7% (2.67 x 10) and company 2 would see 53.3% (5.33 x 10)."
  },
  {
    "objectID": "chapter6.html#management-decision-making",
    "href": "chapter6.html#management-decision-making",
    "title": "7  Incremental Analysis",
    "section": "7.1 Management Decision Making",
    "text": "7.1 Management Decision Making\nPart of being involved in management is making decisions, and is a key function to the role. There are some important steps in the process, we will make a easy function to help practice making functions and to aid in the concept.\n\n\nShow the code\ndef decision_making():\n  print(\" - Decision Making Process -\")\n  \n  def step1():\n    print(\"1. Identify the problem, and assign responsibility\")\n    \n  def step2():\n    print(\"2. Determine and evaluate possible courses of action\")\n    \n  def step3():\n    print(\"3. Make a decision\")\n  \n  def step4():\n    print(\"4. Review the results of the decision\")\n  \n  #-- inside the main function\n  step1()\n  step2()\n  step3()\n  step4()\n\n\nNow call the decision making function\n\n\nShow the code\ndecision_making()\n\n\n - Decision Making Process -\n1. Identify the problem, and assign responsibility\n2. Determine and evaluate possible courses of action\n3. Make a decision\n4. Review the results of the decision"
  },
  {
    "objectID": "chapter6.html#incremental-analysis",
    "href": "chapter6.html#incremental-analysis",
    "title": "7  Incremental Analysis",
    "section": "7.2 Incremental Analysis",
    "text": "7.2 Incremental Analysis\nIn the function of decision making is evaluating options for actions to take. Incremental analysis is used to determine the financial expenses that change under alternative courses of action. Incremental analysis uses three concepts:\n\nrelevant cost factors that are costs and revenues (differ for each option) and that they occur in the future\nopportunity costs is the loss of one opportunity in favor of another\nsunk costs are costs already incurred that won’t change or can be avoided by decisions (not relevant costs)"
  },
  {
    "objectID": "chapter6.html#incremental-analysis-types",
    "href": "chapter6.html#incremental-analysis-types",
    "title": "7  Incremental Analysis",
    "section": "7.3 Incremental Analysis Types",
    "text": "7.3 Incremental Analysis Types\n\n7.3.1 Puchase Order\nDecision to accept an order at special price or reject. Company data is in the data dictionary.\n\n\nShow the code\nmanuf_data = {\n  'product': 'blender',\n  'produced_per_month': 100e3,\n  'plant_capacity': 0.80,\n  'variable_costs_per_unit': 8,\n  'fixed_costs_per_unit': 4,\n  'price': 20,\n  'offer': {'purchase': 2000, 'price_per_unit': 11}\n}\n\n\nPurchase order function is made to help in making a decision\n\n\nShow the code\ndef purchase_order(maufacturing_data: dict):\n  total_cost_per_unit = manuf_data['variable_costs_per_unit'] + manuf_data['fixed_costs_per_unit']\n\n  offer_price = manuf_data['offer']['price_per_unit']\n  \n  var_manuf_costs = manuf_data['variable_costs_per_unit'] * manuf_data['offer']['purchase']\n  exp_revenue = manuf_data['offer']['price_per_unit'] * manuf_data['offer']['purchase']\n  net_income_offer = exp_revenue - var_manuf_costs\n  \n  print(\"\\n -- Incremental Analysis: Purchase Order --\")\n  \n  if total_cost_per_unit > offer_price:\n    print(\"Reject offer (based on cost alone)\")\n    \n  print(\"Variable manufacturing costs will be ${:,}\".format( var_manuf_costs))\n  print(\"Expected revenue for order ${:,}\".format(exp_revenue))\n  print(\"Net income from order ${:,}\".format(net_income_offer))\n  \n  \npurchase_order(manuf_data)\n\n\n\n -- Incremental Analysis: Purchase Order --\nReject offer (based on cost alone)\nVariable manufacturing costs will be $16,000\nExpected revenue for order $22,000\nNet income from order $6,000\n\n\n\n\n7.3.2 Make or Buy\nCompany decision to make parts or buy them.\n\nlook for costs that change\nignore costs that don’t change\nopportunity costs can make a difference\n\nIf this company decides to purchase items, all variable costs and one quarter of the fixed costs will be eliminated.\n\n\nShow the code\nproduct_cost_data = {\n  'direct_materials': 90e3,\n  'direct_labor': 20e3,\n  'variable_manuf_overhead': 32e3,\n  'fixed_manuf_overhead': 24e3,\n  'production_costs': 166e3,\n  'purchase_price': 0.90,\n  'eliminated_costs': 0.25\n}\n\n\nA function to help with make or buy decision\n\n\nShow the code\ndef make_buy(prod_data: dict):\n    \n    tot_costs = sum( list(product_cost_data.values() )[:-3]  )\n    prod_costs = prod_data['production_costs']\n    avg_cost_per_unit = tot_costs / prod_costs\n    \n    print(\"Make\")\n    print(\"Average cost per unit ${:,}\".format(avg_cost_per_unit))\n    print(\"Total costs to make ..... ${:,}\".format(tot_costs))\n  \n    #--- purchase\n    fixed_cost_elim = prod_data['eliminated_costs']\n    purch_fixed_costs = prod_data['fixed_manuf_overhead'] * (1 - fixed_cost_elim )\n    tot_purch_price = prod_data['purchase_price'] * prod_costs\n    tot_purch_costs = purch_fixed_costs + tot_purch_price\n    \n    print(\"\\nBuy\")\n    print(\"purchase fixed costs  ${:,}\".format(purch_fixed_costs))\n    print(\"purchase price  ${:,}\".format(tot_purch_price))\n    print(\"Total cost to buy ..... ${:,}\".format(tot_purch_costs))\n    print(\"Net income from purchase  ${:,}\".format( tot_costs - tot_purch_costs) )\n  \n  \n\nmake_buy(product_cost_data)\n\n\nMake\nAverage cost per unit $1.0\nTotal costs to make ..... $166,000.0\n\nBuy\npurchase fixed costs  $18,000.0\npurchase price  $149,400.0\nTotal cost to buy ..... $167,400.0\nNet income from purchase  $-1,400.0\n\n\n\n\n7.3.3 Sell or process\na company decision to sell item assembled or not\n\n\nShow the code\nfurniture = {\n  'price': 25,\n  'var_production_cost': 12,\n  'fixed_production_cost' : 8,\n  # process = paint & assemble furniture\n  'process': {\n    'price': 35, \n    'var_production_cost': 9, \n    'fixed_production_cost': 2\n    }\n}\n\n\nA function to help in deciding whether to sell or process further\n\n\nShow the code\ndef sell_process( prod_data: dict):\n  \n  print(\"Incremental analysis: Sell or Process\")\n  \n  net_income_sell = prod_data['price'] - \\\n                    prod_data['var_production_cost'] - \\\n                    prod_data['fixed_production_cost']\n  \n  price_delta =  prod_data['process']['price'] - prod_data['price'] \n  \n  var_costs = prod_data['var_production_cost'] + prod_data['process']['var_production_cost']\n  var_costs_delta = prod_data['var_production_cost'] - var_costs \n  \n  prod_costs = prod_data['fixed_production_cost'] + prod_data['process']['fixed_production_cost']\n  prod_costs_delta = prod_data['fixed_production_cost'] - prod_costs\n  \n  net_income_process = prod_data['process']['price'] - \\\n                         var_costs - \\\n                         prod_costs\n                         \n  net_income_delta = price_delta + prod_costs_delta + \\\n                  var_costs_delta                         \n                         \n                    \n  print(\"Net income (Sell) ..... $\", net_income_sell)\n  print(\"Net income (Process) ..... $\", net_income_process)\n  \n  print(\"Total Net income revenues ..... $\", net_income_delta)\n  # print(var_costs_delta)\n  # print(prod_costs_delta)\n  # print(net_income_delta)\n  \n  if net_income_process < net_income_sell:\n    print(\" It is advised to sell without further processing\")\n  \n\nsell_process( furniture )\n\n\nIncremental analysis: Sell or Process\nNet income (Sell) ..... $ 5\nNet income (Process) ..... $ 4\nTotal Net income revenues ..... $ -1\n It is advised to sell without further processing\n\n\n\n\n7.3.4 Retain or Sell\nSunk costs are not relevant to incremental analysis\n\n\nShow the code\nmachines = {\n  'old_machine': {\n    'original_price': 160e3,\n    'accumulated_depreciation': 120e3,\n    'estimated_life_yrs': 4,\n    'scrap_revenue': 24e3 # machines sold to scrap dealer\n    },\n  'new_machine': {\n    'original_price': 240e3,\n    'accumulated_depreciation': 0,\n    'estimated_life_yrs': 4,\n    'estimated_cost_savings': 55e3\n    }\n}\n\n\n\n\nShow the code\ndef retain_replace( machine_data: dict):\n  \n  cost_savings_replace = machines['new_machine']['estimated_cost_savings'] * machines['new_machine']['estimated_life_yrs']\n  \n  new_machine_cost = machines['new_machine']['original_price']\n  \n  sale_proceeds = machines['old_machine']['scrap_revenue']\n  \n  net_savings = cost_savings_replace + (-1 * new_machine_cost) + sale_proceeds\n  \n  \n  print(\"- Incremental Analysis: Retain or Replace - \")\n  print(\"Replace Equipment ............... ${:,}\".format(cost_savings_replace))\n  print(\"New machine cost ...............  ${:,}\".format(new_machine_cost))\n  print(\"Proceeds from old machine ......  ${:,}\".format(sale_proceeds))\n  print(\"Net incremental savings ......... ${:,}\".format(net_savings))\n  \n  if net_savings > 0:\n    print(\"\\tPurchasing new machines will increase net income by ${:,}\".format(net_savings))\n\n\nretain_replace(machines)\n\n\n- Incremental Analysis: Retain or Replace - \nReplace Equipment ............... $220,000.0\nNew machine cost ...............  $240,000.0\nProceeds from old machine ......  $24,000.0\nNet incremental savings ......... $4,000.0\n    Purchasing new machines will increase net income by $4,000.0\n\n\n\n\n7.3.5 Eliminate Segment\nfocus on the relevant costs, the data that changes under the alternate courses of action.\nThis company makes various accessories such as hats and scarves. The hats and scarves line had a net loss of 30,000 dollars. If this company eliminates the hats & scarves, $20,000 fixed costs will remain.\n\n\nShow the code\naccessories = {\n  'hats_scarves': {\n    'sales': 400e3, \n    'var_expenses': 310e3, \n    'fixed_expenses': 120e3,\n    'elim_fixed_costs': 20e3\n    }\n}\n\n\na function to determine if both hats and scarves should be eliminated\n\n\nShow the code\ndef elim_segment( products: dict):\n  \n  sales_continue = products['hats_scarves']['sales']\n  var_costs = products['hats_scarves']['var_expenses']\n  contrib_margin = sales_continue - var_costs\n  fixed_costs = products['hats_scarves']['fixed_expenses']\n  \n  net_income = contrib_margin - fixed_costs\n  # no sales, no var costs, no contribution margin\n  elim_fixed = 0 - products['hats_scarves']['elim_fixed_costs'] \n  \n  net_income_delta = (fixed_costs + elim_fixed ) - contrib_margin\n  \n  \n  \n  print(\"- Incremental Analysis: Eliminate Segment -\")\n  print(\"Continue --\")\n  print(\" Sales ............... ${:,}\".format(sales_continue))\n  print(\" Variable costs ...... ${:,}\".format(var_costs))\n  print(\" Contribution margin ...... ${:,}\".format(contrib_margin))\n  print(\" Fixed costs .............. ${:,}\".format(fixed_costs))\n  print(\" Net income ............... ${:,}\".format(net_income))\n  print(\"Eliminate --\")\n  print(\" Net income ............... ${:,}\".format(elim_fixed))\n  \n  print(\"\\nTotal net income ..... ${:,}\".format(net_income_delta))\n  \n  if net_income_delta > 0:\n    print(\"Eliminating product line(s) results in net income of ${:,}\".format(net_income_delta))\n  \n\nelim_segment( accessories)\n\n\n- Incremental Analysis: Eliminate Segment -\nContinue --\n Sales ............... $400,000.0\n Variable costs ...... $310,000.0\n Contribution margin ...... $90,000.0\n Fixed costs .............. $120,000.0\n Net income ............... $-30,000.0\nEliminate --\n Net income ............... $-20,000.0\n\nTotal net income ..... $10,000.0\nEliminating product line(s) results in net income of $10,000.0\n\n\n\n\n7.3.6 Allocate Resources\nA company that sells 3 types of an item, machine time is limited. The company requires more machine times to manufacture the second and third type item.\n\n\nShow the code\nproduct_types = {\n  'type_1': {'selling_price': 6, 'var_costs': 4, 'machine_hours': 0.02},\n  'type_2': {'selling_price': 10, 'var_costs': 6.50, 'machine_hours': 0.04},\n  'type_3': {'selling_price': 16, 'var_costs': 11, 'machine_hours': 0.08},\n  'total_fixed_costs': 234e3\n}\n\n\n\n\nShow the code\ndef allocate_res( product_data: dict):\n  print(\"- Incremental Analysis: Allocate Resources -\")\n  \n  contrib_margin = []\n  for x in range(1,4):\n    z = product_types[f'type_{x}']['selling_price'] - product_types[f'type_{x}']['var_costs']\n    contrib_margin.append(z)\n    print(f\"Contribution margin per unit (type {x}) ... ${z}\")\n    \n  print()\n  if (contrib_margin[0] > contrib_margin[1]) and (contrib_margin[0] > contrib_margin[2]) :\n    print(\"... Type 1 has highest cmpu value\")\n  elif (contrib_margin[1] > contrib_margin[0]) and (contrib_margin[1] > contrib_margin[2]) :\n    print(\"... Type 2 has highest cmpu value\")\n  elif (contrib_margin[2] > contrib_margin[0]) and (contrib_margin[2] > contrib_margin[1]) :\n    print(\"... Type 3 has highest cmpu value\")\n  else:\n    print(\" No cmpu difference between items\")\n  \n  \n  # print(contrib_margin)\n  print(\"\")\n  cms = []\n  \n  print(\"Limited resources consumed per unit\")\n  for cm in range(3):\n    item_cm = contrib_margin[cm] / product_data[f'type_{cm +1}']['machine_hours']\n    cms.append(item_cm)\n    print(f\"  Contribution margin (machine hrs) (type {cm +1}) .... ${item_cm}\" )\n \n  print()\n  if (cms[0] > cms[1]) and (cms[0] > cms[2]):\n    print(\"... Item 1 has highest resources consumed per unit\")\n  elif (cms[1] > cms[0]) and (cms[1] > cms[2]):\n    print(\"... Item 2 has highest resources consumed per unit\")\n  elif (cms[2] > cms[0]) and (cms[2] > cms[2]):\n    print(\"... Item 3 has highest resources consumed per unit\")\n  else:\n    print(\" All items have equal consumption per unit\")\n\n  \nallocate_res(product_types)\n\n\n- Incremental Analysis: Allocate Resources -\nContribution margin per unit (type 1) ... $2\nContribution margin per unit (type 2) ... $3.5\nContribution margin per unit (type 3) ... $5\n\n... Type 3 has highest cmpu value\n\nLimited resources consumed per unit\n  Contribution margin (machine hrs) (type 1) .... $100.0\n  Contribution margin (machine hrs) (type 2) .... $87.5\n  Contribution margin (machine hrs) (type 3) .... $62.5\n\n... Item 1 has highest resources consumed per unit"
  },
  {
    "objectID": "chapter6.html#example",
    "href": "chapter6.html#example",
    "title": "7  Incremental Analysis",
    "section": "7.4 Example",
    "text": "7.4 Example\nCabinet making company\n\n\nShow the code\ncabinets = {\n  'materials': 500e3,\n  'labor': 250e3,\n  'var_costs': 100e3,\n  'fixed_costs': 400e3,\n  'selling_cost': 20,\n  'purchase_offer': {'price': 165, 'quantity':1000, 'selling_cost': 5}\n}\n\n\n\n\nShow the code\ndef purchase_order(manuf_data: dict):\n  \n  tot_costs = sum( list( cabinets.values())[:-2] )\n  order_costs = (cabinets['purchase_offer']['quantity'] * cabinets['purchase_offer']['selling_cost'])\n  materials = cabinets['materials'] / order_costs\n  labor = cabinets['labor'] / order_costs\n  var_cost = cabinets['var_costs'] / order_costs\n  selling_cost = cabinets['purchase_offer']['selling_cost']\n  \n  tot_rel_cpu = materials + labor + var_cost + selling_cost\n  \n  #-- offer\n  offer_revenue = cabinets['purchase_offer']['price'] * cabinets['purchase_offer']['quantity']\n  offer_costs = tot_rel_cpu * cabinets['purchase_offer']['quantity']\n  offer_net_income = offer_revenue - offer_costs\n  \n  \n  print(\"-- Incremental Analysis --\")\n  print(\"Total costs .... ${:,}\".format(tot_costs))\n  print(\"Total relevant cost per unit ..... ${:,}\".format(tot_rel_cpu))\n  print(\"Offer --\")\n  print(\"Accept offer revenues ...... ${:,}\".format(offer_revenue))\n  print(\"Accept offer costs ......... ${:,}\".format(offer_costs))\n  print(\"Accept offer net income  ......... ${:,}\".format(offer_net_income))\n  \n  if offer_net_income < tot_rel_cpu:\n    print(f\" ::: Reject offer: ${cabinets['purchase_offer']['price']} < ${tot_rel_cpu}\")\n  else:\n    print(\" ::: Accept offer: offer net income > relevant cpu\")\n  \n  \npurchase_order(cabinets)\n\n\n-- Incremental Analysis --\nTotal costs .... $1,250,000.0\nTotal relevant cost per unit ..... $175.0\nOffer --\nAccept offer revenues ...... $165,000\nAccept offer costs ......... $175,000.0\nAccept offer net income  ......... $-10,000.0\n ::: Reject offer: $165 < $175.0"
  },
  {
    "objectID": "chapter7.html#inventory-costing-methods",
    "href": "chapter7.html#inventory-costing-methods",
    "title": "8  Alt Inventory Costing Methods",
    "section": "8.1 Inventory Costing Methods",
    "text": "8.1 Inventory Costing Methods\n\nPreviously variable and fixed manufacturing costs were classified as product costs.\n\n\njob order costing = costs of direct materials, direct labor and both variable and fixed manufacturing overhead\nFull absorption costing is all manufacturing costs are charged to or absorbed by the product.\n\nExample company cost data\n\n\nShow the code\ncost_data = {\n  'selling_price': 20,\n  'units_produced': 30e3,\n  'units_sold': 20e3,\n  'begin_inventory': 0,\n  'variable_costs': {\n    'manufacturing': 9,\n    'direct_materials':5,\n    'direct_labor': 3,\n    'var_overhead': 1\n    },\n  'selling_admin_costs': 2,\n  'fixed_costs': {\n      'manuf_overhead': 120e3,\n      'selling_admin_expenses': 15e3\n    }\n}\n\n\nper unit manufacturing cost using each costing approach\n\n\nShow the code\ndef absorption_costing_compare(cost_data: dict):\n  \n  # absorption costing\n  fixed_manuf_overhead = cost_data['fixed_costs']['manuf_overhead'] / cost_data['units_produced']\n  abs_cost = sum( list( cost_data['variable_costs'].values()  )[1:] ) + fixed_manuf_overhead\n  var_cost = sum( list( cost_data['variable_costs'].values()  )[1:] )\n  \n  diff = abs_cost - var_cost\n  \n  print(\" - Absorption vs Variable costing -\")\n  print(\"Absorption costing : manufacturing cost per unit ..... ${:,}\".format(abs_cost))\n  print(\"Variable costing :   manufacturing cost per unit ..... ${:,}\".format(var_cost))\n  \n  print(\"\\n difference in manufacturing cost per unit is $\", diff)\n  \n  \n  #----------- income statements\n  sales = cost_data['units_sold'] * cost_data['selling_price']\n  cogsm = cost_data['units_produced'] * abs_cost\n  \n  #                  10,0000\n  end_inventory = (sales - cogsm) * abs_cost\n  cog_sold = cost_data['units_sold'] * abs_cost\n  gross_profit = sales - cog_sold\n  var_admin_expense = (sales - cogsm) * diff\n  fixed_admin_expense = cost_data['fixed_costs']['selling_admin_expenses']\n  net_income = gross_profit - var_admin_expense - fixed_admin_expense \n  \n  \n  print(\"\\n === Income Statement ===\")\n  print(\"Absorption cost\\n Cost of Goods Sold\")\n  print(\" Sales ..... ${:,}\".format(sales))\n  print(\" Cost of goods manufactured ............ ${:,}\".format(cogsm))\n  print(\" end of inventory ...................... ${:,}\".format(end_inventory))\n  print(\" cost of goods sold .................... ${:,}\".format(cog_sold))\n  print(\" gross profit .......................... ${:,}\".format(gross_profit))\n  print(\" variable selling & admin expenses ..... ${:,}\".format(var_admin_expense))\n  print(\" fixed selling & admin expenses ........ ${:,}\".format(fixed_admin_expense))\n  print(\" Net income ........................................... ${:,}\".format(net_income))\n  \n  \n  #---- var costing\n  var_sales = cost_data['units_sold'] * cost_data['selling_price']\n  var_manuf_costs = cost_data['units_produced'] * var_cost\n  end_inventory = (sales - cogsm) * var_cost\n  var_cog_sold = var_manuf_costs - end_inventory\n  var_sell_admin_expense = cost_data['units_sold'] * cost_data['selling_admin_costs']\n  contrib_margin = var_sales - (var_cog_sold + var_sell_admin_expense )\n  var_fixed_manuf_overhead = cost_data['fixed_costs']['manuf_overhead']\n  var_fixed_sell_admin = cost_data['fixed_costs']['selling_admin_expenses']\n  var_net_income = contrib_margin - var_fixed_manuf_overhead - var_fixed_sell_admin \n  \n  \n  print(\"\\n === Income Statement ===\")\n  print(\"Variable cost\\n Cost of Goods Sold\")\n  print(\" Sales ...... ${:,}\".format(var_sales))\n  print(\" variable manufacturing costs .......... ${:,}\".format(var_manuf_costs))\n  print(\" end inventory ......................... ${:,}\".format(end_inventory))\n  print(\" variable cost of goods sold ........... ${:,}\".format(var_cog_sold))\n  print(\" variable selling & admin expenses ..... ${:,}\".format(var_sell_admin_expense))\n  print(\" contribution margin ................... ${:,}\".format(contrib_margin))\n  print(\" fixed manufacturing overhead  ......... ${:,}\".format(var_fixed_manuf_overhead))\n  print(\" fixed selling & admin expenses ........ ${:,}\".format(var_fixed_sell_admin))\n  print(\" Net income ........................................... ${:,}\".format( var_net_income))\n\n\ncall the function\n\n\nShow the code\nabsorption_costing_compare( cost_data )\n\n\n - Absorption vs Variable costing -\nAbsorption costing : manufacturing cost per unit ..... $13.0\nVariable costing :   manufacturing cost per unit ..... $9\n\n difference in manufacturing cost per unit is $ 4.0\n\n === Income Statement ===\nAbsorption cost\n Cost of Goods Sold\n Sales ..... $400,000.0\n Cost of goods manufactured ............ $390,000.0\n end of inventory ...................... $130,000.0\n cost of goods sold .................... $260,000.0\n gross profit .......................... $140,000.0\n variable selling & admin expenses ..... $40,000.0\n fixed selling & admin expenses ........ $15,000.0\n Net income ........................................... $85,000.0\n\n === Income Statement ===\nVariable cost\n Cost of Goods Sold\n Sales ...... $400,000.0\n variable manufacturing costs .......... $270,000.0\n end inventory ......................... $90,000.0\n variable cost of goods sold ........... $180,000.0\n variable selling & admin expenses ..... $40,000.0\n contribution margin ................... $180,000.0\n fixed manufacturing overhead  ......... $120,000.0\n fixed selling & admin expenses ........ $15,000.0\n Net income ........................................... $45,000.0\n\n\nAbsorption costing, both variable and fixed selling & admin expenses are treated as period costs. Under variable costing the fixed manufacturing overhead is charged as an expense.\n\nWhen there are more units produced than sold, income via absorption costing is higher\nWhen there are fewer units produced than sold, income via absorption costing is lower\n\n\n8.1.1 Absorption Costing Example\nCompany makes sport balls, the company data is in a data dictionary.\n\n\nShow the code\nsport_co = {\n  'variable_costs': {\n      'direct_materials': 0.10,\n      'direct_labor': 0.05,\n      'var_manuf_overhead': 0.08, # manufacturing overhead\n      'var_sell_admin_expense': 0.02 },\n    'fixed_costs': {\n      'fixed_manuf_overhead': 500e3, \n      'sell_admin_expense': 100e3\n    },\n  'begin_inventory': 0,\n  'units_sold': 7.5e6,\n  'units_produced': 8e6,\n  'selling_price': 0.5\n}\n\n\nA function to calculate the cost of 1 unit of product using the absorption costing method\n\n\nShow the code\ndef absorption_costing( company: dict):\n  \n  fixed_manuf_overhead = sport_co['fixed_costs']['fixed_manuf_overhead'] / sport_co['units_produced']\n  cpu_abs =  sum( list( sport_co['variable_costs'].values() )[0:-1]) + fixed_manuf_overhead\n  # print(cpu_abs)\n  \n  sales = sport_co['units_sold'] * sport_co['selling_price']\n  cog_sold = round( sport_co['units_sold'] * cpu_abs, 2)\n  gross_margin = sales - cog_sold \n  var_sell_admin_expense = sport_co['units_sold'] * sport_co['variable_costs']['var_sell_admin_expense']\n  fixed_sell_admin_expense = sport_co['fixed_costs']['sell_admin_expense']\n  \n  net_income = gross_margin - (var_sell_admin_expense + fixed_sell_admin_expense)\n  \n  print(\" - Absorption Costing -\" )\n  print(\" sales ................ ${:,}\".format(sales))\n  print(\" cost of goods sold ............................... ${:,}\".format(cog_sold))\n  print(\" gross margin ..................................... ${:,}\".format(gross_margin))\n  print(\" variable selling & admin expenses ................ ${:,}\".format(var_sell_admin_expense))\n  print(\" fixed selling & admin expenses ................... ${:,}\".format(fixed_sell_admin_expense))\n  print(\" net income .................................................... ${:,}\".format(net_income))\n\n\nCall the function\n\n\nShow the code\nabsorption_costing( sport_co )\n\n\n - Absorption Costing -\n sales ................ $3,750,000.0\n cost of goods sold ............................... $2,193,750.0\n gross margin ..................................... $1,556,250.0\n variable selling & admin expenses ................ $150,000.0\n fixed selling & admin expenses ................... $100,000.0\n net income .................................................... $1,306,250.0\n\n\n\n\n8.1.2 Variable Costing Example\nUsing the same sport company data for variable costing function\n\n\nShow the code\ndef variable_costing( company: dict):\n  cpu_abs =  sum( list( sport_co['variable_costs'].values() )[0:-1]) \n  # print(cpu_abs)\n  \n  sales = sport_co['units_sold'] * sport_co['selling_price']\n  cog_sold = round( sport_co['units_sold'] * cpu_abs, 2)\n  gross_margin = sales - cog_sold\n  var_sell_admin_expense = sport_co['units_sold'] * sport_co['variable_costs']['var_sell_admin_expense']\n  contrib_margin = cog_sold + var_sell_admin_expense \n  \n  fixed_manuf_overhead = sport_co['fixed_costs']['fixed_manuf_overhead']\n  fixed_sell_admin_expense = sport_co['fixed_costs']['sell_admin_expense'] \n  \n  net_income = sales - contrib_margin - (fixed_manuf_overhead + fixed_sell_admin_expense )\n  \n  print(\" - Variable Costing -\" )\n  print(\" sales ................ ${:,}\".format(sales))\n  print(\" variable cost of goods sold ...................... ${:,}\".format(cog_sold))\n  print(\" variable selling & admin expenses ................ ${:,}\".format(var_sell_admin_expense))\n  print(\" contribution margin .............................. ${:,}\".format(contrib_margin))\n  print(\" fixed manufacturing overhead ..................... ${:,}\".format(fixed_manuf_overhead))\n  print(\" fixed selling & admin expenses ................... ${:,}\".format(fixed_sell_admin_expense))\n  print(\" net income .................................................... ${:,}\".format(net_income))\n\n\ncall variable costing function\n\n\nShow the code\nvariable_costing( sport_co )\n\n\n - Variable Costing -\n sales ................ $3,750,000.0\n variable cost of goods sold ...................... $1,725,000.0\n variable selling & admin expenses ................ $150,000.0\n contribution margin .............................. $1,875,000.0\n fixed manufacturing overhead ..................... $500,000.0\n fixed selling & admin expenses ................... $100,000.0\n net income .................................................... $1,275,000.0"
  },
  {
    "objectID": "chapter7.html#net-income-effects",
    "href": "chapter7.html#net-income-effects",
    "title": "8  Alt Invenory Costing Methods",
    "section": "8.2 Net Income Effects",
    "text": "8.2 Net Income Effects\n\n\nShow the code\n# sum( list( cost_data['variable_costs'].values()  )[1:] )\ncost_data\n\n\n{'selling_price': 20,\n 'units_produced': 30000.0,\n 'units_sold': 20000.0,\n 'begin_inventory': 0,\n 'variable_costs': {'manufacturing': 9,\n  'direct_materials': 5,\n  'direct_labor': 3,\n  'var_overhead': 1},\n 'selling_admin_costs': 2,\n 'fixed_costs': {'manuf_overhead': 120000.0,\n  'selling_admin_expenses': 15000.0}}"
  },
  {
    "objectID": "chapter7.html#normal-costing",
    "href": "chapter7.html#normal-costing",
    "title": "8  Alt Inventory Costing Methods",
    "section": "8.2 Normal Costing",
    "text": "8.2 Normal Costing\nUsing the sports_co dictionary used previously to calculate the normal costing\n\n\nShow the code\nsport_co['fixed_costs']['fixed_manuf_overhead'] / 10e6\n\n\n0.05\n\n\nNormal costing function\n\n\nShow the code\ndef normal_costing( company: dict):\n  \n  fixed_manuf_overhead = sport_co['fixed_costs']['fixed_manuf_overhead'] / 10e6\n  cpu_abs =  sum( list( sport_co['variable_costs'].values() )[0:-1]) + fixed_manuf_overhead\n  # print(cpu_abs)\n  \n  sales = sport_co['units_sold'] * sport_co['selling_price']\n  cog_sold = round( sport_co['units_sold'] * cpu_abs, 2)\n  \n  var_sell_admin_expense = sport_co['units_sold'] * sport_co['variable_costs']['var_sell_admin_expense']\n  contrib_margin = cog_sold + var_sell_admin_expense \n  \n  fixed_manuf_overhead = sport_co['fixed_costs']['fixed_manuf_overhead']\n  fixed_sell_admin_expense = sport_co['fixed_costs']['sell_admin_expense'] \n  var_sell_admin_expense = sport_co['variable_costs']['var_sell_admin_expense'] * sport_co['units_sold']\n  \n  # -----\n  unfav_vol_var = sport_co['fixed_costs']['fixed_manuf_overhead'] - (sport_co['fixed_costs']['fixed_manuf_overhead'] - sport_co['fixed_costs']['sell_admin_expense'])\n  \n  gross_margin = sales - cog_sold - unfav_vol_var\n  \n  expenses = [cog_sold, unfav_vol_var , var_sell_admin_expense , fixed_sell_admin_expense]\n  net_income = sales - sum(expenses)\n  \n  print(\" - Normal Costing -\" )\n  print(\" sales ....................... ${:,}\".format(sales))\n  print(\" variable cost of goods sold ...................... ${:,}\".format(cog_sold))\n  print(\" unfavorable volume variance ...................... ${:,}\".format(unfav_vol_var))\n  print(\" gross margin ..................................... ${:,}\".format(gross_margin))\n  print(\" variable selling & admin expenses ................ ${:,}\".format(var_sell_admin_expense))\n  print(\" fixed selling & admin expenses ................... ${:,}\".format(fixed_sell_admin_expense))\n  print(\" net income .................................................... ${:,}\".format(net_income))\n\n\nCall the normal costing function\n\n\nShow the code\nnormal_costing(sport_co)\n\n\n - Normal Costing -\n sales ....................... $3,750,000.0\n variable cost of goods sold ...................... $2,100,000.0\n unfavorable volume variance ...................... $100,000.0\n gross margin ..................................... $1,550,000.0\n variable selling & admin expenses ................ $150,000.0\n fixed selling & admin expenses ................... $100,000.0\n net income .................................................... $1,300,000.0"
  },
  {
    "objectID": "chapter7.html#throughput-costing",
    "href": "chapter7.html#throughput-costing",
    "title": "8  Alt Inventory Costing Methods",
    "section": "8.3 Throughput costing",
    "text": "8.3 Throughput costing\nThroughput costing (super variable costing) treats all costs as period expenses except for direct materials {much like variable costing system}.Product costs are only direct material costs, inventory is valued using only direct material costs and manufacturing costs are labelled as expenses in the accounting period when they occur. There are two criteria that should be met before using throughput costing:\n\ncompanies that engage in a manufacturing process where conversion costs (direct labor and manufacturing overhead) are fixed costs, meaning no variance during units of production\nmanagement uses cost accounting information in order to make decisions such as accepting or rejecting an offer\n\nUsing the cost data from previous section\n\n\nShow the code\ncost_data\n\n\n{'selling_price': 20,\n 'units_produced': 30000.0,\n 'units_sold': 20000.0,\n 'begin_inventory': 0,\n 'variable_costs': {'manufacturing': 9,\n  'direct_materials': 5,\n  'direct_labor': 3,\n  'var_overhead': 1},\n 'selling_admin_costs': 2,\n 'fixed_costs': {'manuf_overhead': 120000.0,\n  'selling_admin_expenses': 15000.0}}\n\n\nThroughput costing and variable costing for manufacturing cost per unit\n\n\nShow the code\nthru_cpu = cost_data['variable_costs']['direct_materials']\nvar_cpu = sum( list( cost_data['variable_costs'].values())[1:] )\n\nprint(\"Throughput costing: direct materials = ${:,}\".format(thru_cpu))\nprint(\"Variable costing: direct materials = ${:,}\".format(var_cpu))\n\n\nThroughput costing: direct materials = $5\nVariable costing: direct materials = $9\n\n\n\n8.3.1 Throughput function\n\n\nShow the code\ndef throughput_costing( company: dict):\n  \n  sales = company['units_sold'] * company['selling_price']\n  direct_material_costs = company['units_produced'] * company['variable_costs']['direct_materials']\n  start_inventory = company['begin_inventory']\n  cog_sale = direct_material_costs - start_inventory \n  # print(cog_sale)\n  \n  end_inventory = (company['units_produced'] - company['units_sold']) * company['variable_costs']['direct_materials']\n  \n  var_cog_sold = direct_material_costs - end_inventory\n  thru_contrib_margin = sales - var_cog_sold\n  \n  direct_labor_costs = company['units_produced'] * company['variable_costs']['direct_labor']\n  var_overhead_costs = company['units_produced'] * company['variable_costs']['var_overhead']\n  var_sell_admin_expense = company['units_sold'] * company['selling_admin_costs']\n  fixed_manuf_overhead = company['fixed_costs']['manuf_overhead']\n  fixed_sell_admin = company['fixed_costs']['selling_admin_expenses']\n  \n  expenses = [direct_labor_costs, var_overhead_costs, var_sell_admin_expense, fixed_manuf_overhead, fixed_sell_admin]\n  \n  total_other_op_costs = sum(expenses)\n  \n  net_income = thru_contrib_margin - total_other_op_costs\n \n  print(\" - Throughput Costing -\" )\n  print(\" sales ....................... ${:,}\".format(sales))\n  print(\" direct material costs ....................... ${:,}\".format(direct_material_costs))\n  print(\" ending inventory ............................ ${:,}\".format(end_inventory))\n  print(\" throughput contribution margin .............. ${:,}\".format(thru_contrib_margin))\n  print(\"\\t direct labor costs .......................... ${:,}\".format(direct_labor_costs))\n  print(\"\\t variable overhead costs ..................... ${:,}\".format(var_overhead_costs))\n  print(\"\\t variable sell & admin costs ................. ${:,}\".format(var_sell_admin_expense))\n  print(\"\\t fixed manufacturing overhead ................ ${:,}\".format(fixed_manuf_overhead))\n  print(\"\\t fixed sell & admin expenses  ................ ${:,}\".format(fixed_sell_admin))\n  print(\"\\t total other operating costs  .................... ${:,}\".format(total_other_op_costs))\n  \n  print(\" net income ....................................................... ${:,}\".format(net_income))\n\n\nCall the function\n\n\nShow the code\nthroughput_costing(cost_data)\n\n\n - Throughput Costing -\n sales ....................... $400,000.0\n direct material costs ....................... $150,000.0\n ending inventory ............................ $50,000.0\n throughput contribution margin .............. $300,000.0\n     direct labor costs .......................... $90,000.0\n     variable overhead costs ..................... $30,000.0\n     variable sell & admin costs ................. $40,000.0\n     fixed manufacturing overhead ................ $120,000.0\n     fixed sell & admin expenses  ................ $15,000.0\n     total other operating costs  .................... $295,000.0\n net income ....................................................... $5,000.0\n\n\n\n\n8.3.2 Variable costing\nthis is a second version of the variable costing function\n\n\nShow the code\ndef variable_costing2( company: dict):\n  \n  sales = cost_data['units_sold'] * cost_data['selling_price']\n  \n  \n  direct_material_costs = cost_data['units_produced'] * cost_data['variable_costs']['manufacturing']\n  start_inventory = cost_data['begin_inventory']\n  cog_sale = direct_material_costs - start_inventory  \n  \n  end_inventory = (cost_data['units_produced'] - cost_data['units_sold']) * cost_data['variable_costs']['manufacturing']\n  \n  var_manuf_costs = cost_data['units_produced'] * cost_data['variable_costs']['manufacturing']\n  var_cogs_sold = cog_sale - end_inventory\n  var_sell_admin_expense = cost_data['units_sold'] * cost_data['selling_admin_costs']\n  \n  contrib_margin = sales - (var_sell_admin_expense +var_cogs_sold )\n  \n  fixed_manuf_overhead = cost_data['fixed_costs']['manuf_overhead']\n  fixed_sell_admin = cost_data['fixed_costs']['selling_admin_expenses']\n  net_income = contrib_margin -fixed_manuf_overhead - fixed_sell_admin\n  \n  \n  \n  print(\" - Variable Costing -\" )\n  print(\" sales ........................... ${:,}\".format(sales))\n  print(\" variable manufacturing costs ...................... ${:,}\".format(var_manuf_costs))\n  print(\" cost of goods available for sale  ................. ${:,}\".format(cog_sale))\n  print(\" variable cost of goods sold  ...................... ${:,}\".format(var_cogs_sold))\n  print(\" variable selling & admin expenses ................. ${:,}\".format(var_sell_admin_expense))\n  print(\" contribution margin ............................... ${:,}\".format(contrib_margin))\n  print(\" fixed manufacturing overhead ...................... ${:,}\".format(fixed_manuf_overhead))\n  print(\" fixed selling & admin expenses .................... ${:,}\".format(fixed_sell_admin))\n  print(\" net income .................................................... ${:,}\".format(net_income))\n  \n\nvariable_costing2(cost_data)\n\n\n - Variable Costing -\n sales ........................... $400,000.0\n variable manufacturing costs ...................... $270,000.0\n cost of goods available for sale  ................. $270,000.0\n variable cost of goods sold  ...................... $180,000.0\n variable selling & admin expenses ................. $40,000.0\n contribution margin ............................... $180,000.0\n fixed manufacturing overhead ...................... $120,000.0\n fixed selling & admin expenses .................... $15,000.0\n net income .................................................... $45,000.0\n\n\n\n\n8.3.3 Throughput Costing Summary\nif (units produced) == units sold:\n  variable costing = throughput costing\n\nif (units produced) > units sold:\n  variable costing > throughput costing\n  \nif (units produced) < units sold:\n  variable costing < throughput costing\n\n\n8.3.4 Throughput Example\nUsing the sport company data dictionary using a revised version of the throughput function\n\n\nShow the code\ndef throughput_costing2( company: dict):\n  \n  sales = company['units_sold'] * company['selling_price']\n  direct_material_costs = company['units_produced'] * company['variable_costs']['direct_materials']\n  start_inventory = company['begin_inventory']\n  cog_sale = direct_material_costs - start_inventory \n  # print(cog_sale)\n  \n  end_inventory = (company['units_produced'] - company['units_sold']) * company['variable_costs']['direct_materials']\n  \n  var_cog_sold = direct_material_costs - end_inventory\n  thru_contrib_margin = sales - var_cog_sold\n  \n  direct_labor_costs = company['units_produced'] * company['variable_costs']['direct_labor']\n  var_overhead_costs = company['units_produced'] * company['variable_costs']['var_manuf_overhead']\n  var_sell_admin_expense = company['units_sold'] * company['variable_costs']['var_sell_admin_expense']\n  fixed_manuf_overhead = company['fixed_costs']['fixed_manuf_overhead']\n  fixed_sell_admin = company['fixed_costs']['sell_admin_expense']\n  \n  expenses = [direct_labor_costs, var_overhead_costs, var_sell_admin_expense, fixed_manuf_overhead, fixed_sell_admin]\n  \n  total_other_op_costs = sum(expenses)\n  \n  net_income = thru_contrib_margin - total_other_op_costs\n \n  print(\" - Throughput Costing -\" )\n  print(\" sales ....................... ${:,}\".format(sales))\n  # print(\" direct material costs ....................... ${:,}\".format(direct_material_costs))\n  # print(\" ending inventory ............................ ${:,}\".format(end_inventory))\n  print(\" throughput contribution margin .............. ${:,}\".format(thru_contrib_margin))\n  print(\"\\t direct labor costs .......................... ${:,}\".format(direct_labor_costs))\n  print(\"\\t variable overhead costs ..................... ${:,}\".format(var_overhead_costs))\n\n  print(\"\\t fixed manufacturing overhead ................ ${:,}\".format(fixed_manuf_overhead))\n  print(\"\\t fixed sell & admin expenses  ................ ${:,}\".format(fixed_sell_admin))\n  print(\"\\t variable sell & admin costs ................. ${:,}\".format(var_sell_admin_expense))\n  print(\"\\t total other operating costs  .................... ${:,}\".format(total_other_op_costs))\n  \n  print(\" net income ....................................................... ${:,}\".format(net_income))\n  \n\nthroughput_costing2(sport_co)\n\n\n - Throughput Costing -\n sales ....................... $3,750,000.0\n throughput contribution margin .............. $3,000,000.0\n     direct labor costs .......................... $400,000.0\n     variable overhead costs ..................... $640,000.0\n     fixed manufacturing overhead ................ $500,000.0\n     fixed sell & admin expenses  ................ $100,000.0\n     variable sell & admin costs ................. $150,000.0\n     total other operating costs  .................... $1,790,000.0\n net income ....................................................... $1,210,000.0"
  },
  {
    "objectID": "chapter8.html#target-costing",
    "href": "chapter8.html#target-costing",
    "title": "9  Pricing",
    "section": "9.1 Target costing",
    "text": "9.1 Target costing\nThe laws of supply and demand affect the prices, in order to make profit the costs need to be controlled.\n\ntarget cost = market price - desired profit\n\nA phone manufacturer has done market research and learned that 200,000 units can be sold if the price is no more than $20. If new product of phone cases is to happen, an investment of 1 million dollars is required for equipment, with a minimum rate of return of 25% on all investments.\nStore this information into a data dictionary\n\n\nShow the code\nphones = {\n  'investment': 1e6,\n  'rate_of_return': 0.25,\n  'target_units': 200e3,\n  'price': 20\n}\n\n\nCall the function\n\n\nShow the code\ndef target_costing( dict):\n  \n  desired_profit = dict['investment'] * dict['rate_of_return']\n  item_return = desired_profit / dict['target_units']\n  target_cost = dict['price'] - item_return\n  \n  print(\"- Target Costing - \")\n  print(\"desired profit ................. ${:,}\".format(desired_profit))\n  print(\"each item return of profit ..... ${:,}\".format(item_return))\n  print(\"target cost per unit ........... ${:,}\".format(target_cost))\n  \n  \ntarget_costing( phones )\n\n\n- Target Costing - \ndesired profit ................. $250,000.0\neach item return of profit ..... $1.25\ntarget cost per unit ........... $18.75"
  },
  {
    "objectID": "chapter8.html#total-cost-pricing",
    "href": "chapter8.html#total-cost-pricing",
    "title": "9  Pricing",
    "section": "9.2 Total Cost + Pricing",
    "text": "9.2 Total Cost + Pricing\nIn the global competitive world of business, the price is often set by the market, and to obtain the desired profit the stronger emphasis is on target cost. Total cost plus pricing is when companies that can set prices do so as a function of cost of the product or service.\n\nmarkup (profit) = selling price - cost\nbasic cost plus pricing: target selling price = cost + (markup % * cost)\n\nA company that makes specialty pens, their data is in a dictionary. Specialty pen company incurs fixed manufacturing overhead of $280,000 and fixed selling & admin expenses of 240,000. The assumed units of production is 10,000. The company desires a return on investment of 20% and has invested 1 million dollars.\n\n\nShow the code\npens = {\n  'direct_materials': 23,\n  'direct_labor': 17,\n  'var_manuf_overhead': 12, # manufacturing\n  'var_sell_admin': 8,  # variable selling and admin expense\n  'var_cpu': 60, # variable cost per unit\n  'fixed_manuf_overhead': 280e3,\n  'fixed_sell_admin': 240e3,\n  'units_produced': 10e3,\n  'ROI': 0.20, # return on investment\n  'investment': 1e6  # $ invested\n}\n\n\nCall the function\n\n\nShow the code\ndef total_cost_pricing( dict ):\n  \n  fixed_manuf_cpu = dict['fixed_manuf_overhead'] / dict['units_produced']\n  fixed_sell_admin = dict['fixed_sell_admin'] / dict['units_produced']\n  fixed_cpu = round( fixed_manuf_cpu + fixed_sell_admin, 2)\n  \n  desired_roi = dict['ROI'] * dict['investment']\n  markup_profit = round( desired_roi / dict['units_produced'], 2)\n  \n  var_cpu = sum( list(dict.values())[:4])\n  # print(var_cpu)\n  total_cost = var_cpu + fixed_cpu + markup_profit\n  costs = (var_cpu + fixed_cpu)\n  \n  markup_percent = round(markup_profit / costs, 3)\n  \n  target_selling_price = costs + (costs * markup_percent)\n  \n  print(\"- Total Cost plus Pricing - \")\n  print(\"fixed cost per unit ...................... ${:,}\".format(fixed_cpu))\n  print(\"markup profit per unit ................... ${:,}\".format(markup_profit ))\n  print(\"markup percentage ........................ {:,}%\".format(markup_percent *100))\n  print(\"selling price per unit ................... ${:,}\".format(total_cost))\n  print(\"target selling price per unit ............ ${:,}\".format(total_cost))\n  print(\"expected income ROI ...................... ${:,}\".format(desired_roi))\n  \n  \n\ntotal_cost_pricing(pens)\n\n\n- Total Cost plus Pricing - \nfixed cost per unit ...................... $52.0\nmarkup profit per unit ................... $20.0\nmarkup percentage ........................ 17.9%\nselling price per unit ................... $132.0\ntarget selling price per unit ............ $132.0\nexpected income ROI ...................... $200,000.0\n\n\n\nsales volume units affect the total fixed cost per unit, if 8,000 units were sold instead of 10,000 the fixed cost per unit would be $65. Change the value in the pens dictionary for units produced then run the function."
  },
  {
    "objectID": "chapter8.html#absoprtion-cost-pricing",
    "href": "chapter8.html#absoprtion-cost-pricing",
    "title": "9  Pricing",
    "section": "9.3 Absoprtion Cost + Pricing",
    "text": "9.3 Absoprtion Cost + Pricing\nAbsorption cost plus pricing defines the cost base as the manufacturing cost, both variable and fixed selling & admin costs are excluded from the cost base. The markup profit is where companies earn their selling & admin costs along with target ROI.\nUsing the pens data dictionary to calculate the manufacturing cost per unit\n\n\nShow the code\ndef absorption_cost_pricing( dict ):\n  \n  costs = sum(list(dict.values())[:3])\n  fixed_manuf_cpu = dict['fixed_manuf_overhead'] / dict['units_produced']\n  total_manuf_cpu = costs + fixed_manuf_cpu\n  \n  var_sell_admin = dict['var_sell_admin']\n  fixed_sell_admin = dict['fixed_sell_admin'] /  dict['units_produced']\n  # print(fixed_sell_admin)\n  sell_admin_costs = var_sell_admin + fixed_sell_admin\n  \n  desired_roi = dict['ROI'] * dict['investment']\n  markup_profit = round( desired_roi / dict['units_produced'], 2)\n  \n  markup_percent = (markup_profit + sell_admin_costs) / total_manuf_cpu\n  \n  target_selling_price = total_manuf_cpu + (markup_percent * total_manuf_cpu)\n  \n  # ----- income statement\n  revenue = dict['units_produced'] * target_selling_price\n  cogs = dict['units_produced'] * total_manuf_cpu\n  gross_profit = revenue - cogs\n  admin_expenses = dict['units_produced'] * (dict['var_sell_admin'] + fixed_sell_admin)\n  net_income = revenue - cogs - admin_expenses\n  \n  print(\"- Absorption Cost + Pricing -\")\n  print(\"Total manufacturing cost per unit ..... ${:,}\".format(total_manuf_cpu))\n  print(\"fixed selling & admin costs ........... ${:,}\".format(sell_admin_costs))\n  print(\"desired ROI per unit .................. ${:,}\".format(markup_profit))\n  print(\"markup profit percentage .............. {:.2f}%\".format(markup_percent *100))\n  print(\"target selling price .................. ${:,}\".format(target_selling_price))\n  \n  print(\"\\nAbsorption Cost Income Statement\")\n  print(\" Revenue ............................. ${:,}\".format(revenue))\n  print(\" Cost of goods sold .................. ${:,}\".format(cogs))\n  print(\" Gross profit ........................ ${:,}\".format(gross_profit))\n  print(\" selling & admin expenses ............ ${:,}\".format(admin_expenses))\n  print(\" net income .......................................... ${:,}\".format(net_income))\n  \n  \n\nabsorption_cost_pricing( pens )\n\n\n- Absorption Cost + Pricing -\nTotal manufacturing cost per unit ..... $80.0\nfixed selling & admin costs ........... $32.0\ndesired ROI per unit .................. $20.0\nmarkup profit percentage .............. 65.00%\ntarget selling price .................. $132.0\n\nAbsorption Cost Income Statement\n Revenue ............................. $1,320,000.0\n Cost of goods sold .................. $800,000.0\n Gross profit ........................ $520,000.0\n selling & admin expenses ............ $320,000.0\n net income .......................................... $200,000.0"
  },
  {
    "objectID": "chapter8.html#variable-cost-pricing",
    "href": "chapter8.html#variable-cost-pricing",
    "title": "9  Pricing",
    "section": "9.4 Variable Cost + Pricing",
    "text": "9.4 Variable Cost + Pricing\nVariable cost plus pricing includes all variable costs involved with a product, even selling and admin costs. Fixed costs are excluded in the base, the markup needs to cover fixed costs and the ROI. This method is useful for short term decisions as fixed and variables costs are dealt with separately.\nUsing the same pens data dictionary\n\n\nShow the code\ndef variable_cost_pricing( dict ):\n  \n  costs = sum(list(dict.values())[:4])\n  fixed_manuf_cpu = dict['fixed_manuf_overhead'] / dict['units_produced']\n  fixed_sell_admin = dict['fixed_sell_admin'] /  dict['units_produced']\n  desired_roi = dict['ROI'] * dict['investment']\n  markup_profit = desired_roi / dict['units_produced']\n\n  markup_percent = ( markup_profit + (fixed_manuf_cpu + fixed_sell_admin)) / costs\n  target_selling_price = costs + (markup_percent * costs)\n  \n  # ----- income statement\n  revenue = dict['units_produced'] * target_selling_price\n  var_costs = dict['units_produced'] * costs \n  contrib_margin = revenue - var_costs\n  fixed_manuf_costs = dict['units_produced'] * fixed_manuf_cpu\n  sell_admin_costs = dict['units_produced'] * fixed_sell_admin\n  net_income = contrib_margin - fixed_manuf_costs - sell_admin_costs\n\n  \n  print(\"- Variable Cost + Pricing -\")\n  print(\"total variable costs per unit ............ ${:,}\".format(costs))\n  print(\"fixed manufacturing cost per unit ........ ${:,}\".format(fixed_manuf_cpu))\n  print(\"fixed selling & admin .................... ${:,}\".format(fixed_sell_admin))\n  print(\"markup profit ............................ ${:,}\".format(markup_profit))\n  print(\"markup percent ........................... {:.2f}%\".format(markup_percent *100))\n  print(\"target selling price ..................... ${:,}\".format(target_selling_price))\n  \n  print(\"\\nVariable Cost Income Statement\")\n  print(\" Revenue ............................. ${:,}\".format(revenue))\n  print(\" variable costs ...................... ${:,}\".format(var_costs))\n  print(\" contribution margin ................. ${:,}\".format(contrib_margin))\n  print(\" fixed costs manufacturing ........... ${:,}\".format(fixed_manuf_costs))\n  print(\" selling & admin costs ............... ${:,}\".format(sell_admin_costs))\n  print(\" net income .......................................... ${:,}\".format(net_income))\n\nvariable_cost_pricing( pens )\n\n\n- Variable Cost + Pricing -\ntotal variable costs per unit ............ $60\nfixed manufacturing cost per unit ........ $28.0\nfixed selling & admin .................... $24.0\nmarkup profit ............................ $20.0\nmarkup percent ........................... 120.00%\ntarget selling price ..................... $132.0\n\nVariable Cost Income Statement\n Revenue ............................. $1,320,000.0\n variable costs ...................... $600,000.0\n contribution margin ................. $720,000.0\n fixed costs manufacturing ........... $280,000.0\n selling & admin costs ............... $240,000.0\n net income .......................................... $200,000.0\n\n\n\n9.4.1 Variable Cost Example\nAn air conditioning company has their data in a data dictionary, calculate the total cost per unit, determine the target selling price. Use 45% for markup profit on total cost per unit.\n\n\nShow the code\nair_condition = {\n  'direct_materials': 16,\n  'direct_labor': 18,\n  'var_manuf_overhead': 11,\n  'fixed_manuf_overhead': 10,\n  'var_sell_admin': 6,\n  'fixed_sell_admin': 10,\n  'markup_profit': 0.45\n}\n\n\nSimplified version of the variable cost function\n\n\nShow the code\ndef variable_cost_pricing2( dict ):\n  \n  costs = sum(list(dict.values())[:-1] )\n  cost_markup = dict['markup_profit'] * costs\n  total_costs = costs + cost_markup\n  \n  print(\"- Variable Cost + Pricing -\")\n  print(\"total cost per unit ............ ${:,}\".format(costs))\n  print(\"target selling price ........... ${:,}\".format(total_costs))\n\n\n\nvariable_cost_pricing2( air_condition )\n\n\n- Variable Cost + Pricing -\ntotal cost per unit ............ $71\ntarget selling price ........... $102.95"
  },
  {
    "objectID": "chapter8.html#pricing-services",
    "href": "chapter8.html#pricing-services",
    "title": "9  Pricing",
    "section": "9.5 Pricing Services",
    "text": "9.5 Pricing Services\nTime and material pricing method is when a company sets two pricing rates: 1) for labor (labor and employee costs) and 2) materials (direct parts & materials used, including loading charge for overhead costs). This method is often used in the service industry.\nA Yacht repair shop is the company example, their data is in a dictionary.\n\n\nShow the code\nyacht = {\n  'time_charges': {\n    'mechanic_wages_benefits': 103500,\n    'manager_salary_benefits': 0,\n    'employee_salary_benefits': 20700,\n    'overhead': 26800\n    },\n  'material_loading': {\n    'mechanic_wages_benefits': 0,\n    'manager_salary_benefits': 11500,\n    'employee_salary_benefits': 2300,\n    'overhead': 14400\n    },\n  'work_hours': 5000,\n  'profit_margin': 8,\n  'profit_margin_percent': 0.2,\n  'invoice_cost': 120e3, # estimated cost parts & materials\n  'job': {'work_hours': 50, 'parts_materials': 3600}\n}\n\n\nA function to calculate labor charge, material loading charge and the charges for a particular job.\n\n\nShow the code\ndef pricing_services( dict ):\n\n  #------- 1 labor charge\n  total_cost = list(dict['time_charges'].values())\n  # print(total_cost)\n  \n  total_hours = dict['work_hours']         \n  profit = dict['profit_margin']\n  \n  hourly = []\n  for x in range( len(total_cost) ):\n    per_hr_charge = total_cost[x] / total_hours\n    hourly.append(per_hr_charge)\n  \n  total_hourly_cost = sum(total_cost) / total_hours   \n  labor_rate = profit + total_hourly_cost\n  \n  # -- 2 material loading $\n  material_load = list(dict['material_loading'].values())\n  total_invoice = dict['invoice_cost']\n  \n  # print(material_load)\n  staff_salary = material_load[1] + material_load[2]\n  staff_material_load = staff_salary / total_invoice\n  overhead_material_load =  material_load[3] / total_invoice\n  total_material_load = (sum(material_load) / total_invoice)\n  total_load_percent = dict['profit_margin_percent'] + total_material_load \n  \n  \n  # -- 3 calculate $ for job\n  labor_charge = round( dict['job']['work_hours'] * labor_rate, 2)\n  cost_parts = dict['job']['parts_materials']\n  material_load_fee = (total_load_percent * cost_parts)\n  total_material_fee = cost_parts + material_load_fee\n  total_price = labor_charge + total_material_fee\n  \n              \n  print(\" - Pricing Services -\")\n  print(\"total hourly cost ................. ${:,}\".format( sum(total_cost) ))\n  print(\"mechanic wages & benefits (per hr) ........ ${:,}\".format( hourly[0]))\n  print(\"employee wages & benefits (per hr) ........ ${:,}\".format( hourly[2]))\n  print(\"other overhead (per hr) ................... ${:,}\".format( hourly[3]))\n  print(\"total hourly cost (per hr) ................ ${:,}\".format( total_hourly_cost ))\n  print(\"rate charged (per hr) for labor ........... ${:,}\".format( labor_rate ))\n  \n  print(\"\\nMaterial loading charges ............ ${:,}\".format( sum(material_load )))\n  print(\" staff material load percent ................ {:.2f}%\".format( staff_material_load *100))\n  print(\" overhead material load percent ............. {:.2f}%\".format( overhead_material_load *100))\n  print(\" total overhead material load percent ....... {:.2f}%\".format( total_material_load *100))\n  print(\" total material load percent ........................ {:.2f}%\".format( total_load_percent *100))\n  \n  print(\"\\nTime & Material Price Quotation \")\n  print(\"labor charge ......................... ${:,}\".format(labor_charge))\n  print(\"material & parts, loading fee ........ ${:,}\".format(total_material_fee))\n  print(\"total price of labor & material ......................... ${:,}\".format(total_price))\n  \n  # print(hourly)\n\n\nCall the function\n\n\nShow the code\npricing_services( yacht )\n\n\n - Pricing Services -\ntotal hourly cost ................. $151,000\nmechanic wages & benefits (per hr) ........ $20.7\nemployee wages & benefits (per hr) ........ $4.14\nother overhead (per hr) ................... $5.36\ntotal hourly cost (per hr) ................ $30.2\nrate charged (per hr) for labor ........... $38.2\n\nMaterial loading charges ............ $28,200\n staff material load percent ................ 11.50%\n overhead material load percent ............. 12.00%\n total overhead material load percent ....... 23.50%\n total material load percent ........................ 43.50%\n\nTime & Material Price Quotation \nlabor charge ......................... $1,910.0\nmaterial & parts, loading fee ........ $5,166.0\ntotal price of labor & material ......................... $7,076.0"
  },
  {
    "objectID": "chapter8.html#absorption-cost-pricing",
    "href": "chapter8.html#absorption-cost-pricing",
    "title": "9  Pricing",
    "section": "9.3 Absorption Cost + Pricing",
    "text": "9.3 Absorption Cost + Pricing\nAbsorption cost plus pricing defines the cost base as the manufacturing cost, both variable and fixed selling & admin costs are excluded from the cost base. The markup profit is where companies earn their selling & admin costs along with target ROI.\nUsing the pens data dictionary to calculate the manufacturing cost per unit\n\n\nShow the code\ndef absorption_cost_pricing( dict ):\n  \n  costs = sum(list(dict.values())[:3])\n  fixed_manuf_cpu = dict['fixed_manuf_overhead'] / dict['units_produced']\n  total_manuf_cpu = costs + fixed_manuf_cpu\n  \n  var_sell_admin = dict['var_sell_admin']\n  fixed_sell_admin = dict['fixed_sell_admin'] /  dict['units_produced']\n  # print(fixed_sell_admin)\n  sell_admin_costs = var_sell_admin + fixed_sell_admin\n  \n  desired_roi = dict['ROI'] * dict['investment']\n  markup_profit = round( desired_roi / dict['units_produced'], 2)\n  \n  markup_percent = (markup_profit + sell_admin_costs) / total_manuf_cpu\n  \n  target_selling_price = total_manuf_cpu + (markup_percent * total_manuf_cpu)\n  \n  # ----- income statement\n  revenue = dict['units_produced'] * target_selling_price\n  cogs = dict['units_produced'] * total_manuf_cpu\n  gross_profit = revenue - cogs\n  admin_expenses = dict['units_produced'] * (dict['var_sell_admin'] + fixed_sell_admin)\n  net_income = revenue - cogs - admin_expenses\n  \n  print(\"- Absorption Cost + Pricing -\")\n  print(\"Total manufacturing cost per unit ..... ${:,}\".format(total_manuf_cpu))\n  print(\"fixed selling & admin costs ........... ${:,}\".format(sell_admin_costs))\n  print(\"desired ROI per unit .................. ${:,}\".format(markup_profit))\n  print(\"markup profit percentage .............. {:.2f}%\".format(markup_percent *100))\n  print(\"target selling price .................. ${:,}\".format(target_selling_price))\n  \n  print(\"\\nAbsorption Cost Income Statement\")\n  print(\" Revenue ............................. ${:,}\".format(revenue))\n  print(\" Cost of goods sold .................. ${:,}\".format(cogs))\n  print(\" Gross profit ........................ ${:,}\".format(gross_profit))\n  print(\" selling & admin expenses ............ ${:,}\".format(admin_expenses))\n  print(\" net income .......................................... ${:,}\".format(net_income))\n  \n  \n\nabsorption_cost_pricing( pens )\n\n\n- Absorption Cost + Pricing -\nTotal manufacturing cost per unit ..... $80.0\nfixed selling & admin costs ........... $32.0\ndesired ROI per unit .................. $20.0\nmarkup profit percentage .............. 65.00%\ntarget selling price .................. $132.0\n\nAbsorption Cost Income Statement\n Revenue ............................. $1,320,000.0\n Cost of goods sold .................. $800,000.0\n Gross profit ........................ $520,000.0\n selling & admin expenses ............ $320,000.0\n net income .......................................... $200,000.0"
  },
  {
    "objectID": "chapter8.html#transfer-pricing",
    "href": "chapter8.html#transfer-pricing",
    "title": "9  Pricing",
    "section": "9.6 Transfer Pricing",
    "text": "9.6 Transfer Pricing\nWhen companies transfer goods internally the price they use to record the transfer between 2 divisions is the transfer price. The price charged for intermediate goods is the cost of goods sold to the buying division and the revenue for the selling division.\n\nhigh transfer price = high revenue for selling division and high costs for buying division\nlow transfer price = low revenue for selling division and low costs for buying division\n\nThere are some price transfer objectives:\n\npromote the goal congruence: the policy should choose actions that maximize company earnings as a whole\nmaintain divisional autonomy: upper management should not get involved in division managers\nprovide accurate performance evaluations: policy should allow accurate evaluation of division managers involved in the transfer\n\nGeneral transfer pricing formula\n\ntransfer price = variable cost per unit + opportunity costs\n\nA bike manufacturing company data, assembly division and manufacturing divisions.\n\n\nShow the code\nbike = {\n  'assembly_division': {\n  'selling_price': 290,\n  'var_cost_assembly': 200\n  },\n  'manufacture_division': {\n    'selling_price': 130,\n    'var_cost_manuf': 95\n  }\n}\n\n\nCall the function\n\n\nShow the code\ndef transfer_pricing( dict ):\n  # assembly\n  assembly = list( dict['assembly_division'].values())\n  manufacture = list( dict['manufacture_division'].values())\n  \n  assembly_contrib_margin = assembly[0] - assembly[1]\n  manuf_contrib_margin = manufacture[0] - manufacture[1]\n  total_contrib_margin = assembly_contrib_margin + manuf_contrib_margin\n  \n  # -- manuf div\n  manuf_min_price = manuf_contrib_margin + manufacture[1]\n  \n  # - Excess Capacity , no opportunity costs\n  opportunity_cost = 0\n  capcity_min_price =  manufacture[1] + opportunity_cost\n  \n\n  \n  print(\"- Transfer Pricing - \")\n  print(\"Assembly contribution margin ......... ${:,}\".format(assembly_contrib_margin))\n  print(\"Manufacture contribution margin ...... ${:,}\".format(manuf_contrib_margin))\n  print(\"Total contribution margin ............ ${:,}\".format(total_contrib_margin))\n  \n  print(\"min. transfer price to manufacturing ............ ${:,}\".format(manuf_min_price))\n  \n  if manuf_min_price >= total_contrib_margin:\n    print(\"\\nGoal Congruence: (no excess capacity) \",'\\u2705')\n  \n  if capcity_min_price <= manuf_min_price:\n    print(\"Goal Congruence: (excess capacity)   \",'\\u2705')\n  \n\n  \n  \ntransfer_pricing( bike ) \n\n\n- Transfer Pricing - \nAssembly contribution margin ......... $90\nManufacture contribution margin ...... $35\nTotal contribution margin ............ $125\nmin. transfer price to manufacturing ............ $130\n\nGoal Congruence: (no excess capacity)  ✅\nGoal Congruence: (excess capacity)    ✅"
  },
  {
    "objectID": "chapter8.html#transfer-pricing-methods",
    "href": "chapter8.html#transfer-pricing-methods",
    "title": "9  Pricing",
    "section": "9.7 Transfer Pricing Methods",
    "text": "9.7 Transfer Pricing Methods\nA boot company data will be used for negotiated transfer price between division managers.\n\n\nShow the code\nboots = {\n  'assembly_division': {\n    'selling_price': 90,\n    'var_cost_manuf': 35,\n    # cost of sole purchased from outside suppliers\n    'cost_outside_suppliers': 17 \n  },\n  'manufacture_division': {\n    'selling_price': 18,\n    'var_cost_per_sole': 11\n  }\n}\n\n\nThe function to calculate contribution margins\n\n\nShow the code\ndef transfer_pricing2( dict ):\n  # assembly (division 1)\n  assembly = list( dict['assembly_division'].values())\n  # manufacturing (division 2)\n  manufacture = list( dict['manufacture_division'].values())\n  \n  assembly_contrib_margin = assembly[0] - assembly[1] - assembly[2]\n  manuf_contrib_margin = manufacture[0] - manufacture[1]\n  total_contrib_margin = assembly_contrib_margin + manuf_contrib_margin\n  \n  # -- manuf div\n  manuf_min_price = manuf_contrib_margin + manufacture[1]\n  # print(manuf_min_price) # 18\n  \n  # -- no excess capacity\n  # variable cost + opportunity cost = min transfer price\n  opportunity_cost = assembly[2] # 17\n  # print(opportunity_cost)\n\n  # - Excess Capacity , no opportunity costs\n  # variable cost + opportunity cost = min transfer price\n  opportunity_cost2 = 0\n  capacity_min_price =  manufacture[1] + opportunity_cost2\n  \n  print(\"- Transfer Pricing Methods - \")\n  print(\"Assembly contribution margin ......... ${:,}\".format(assembly_contrib_margin))\n  print(\"Manufacture contribution margin ...... ${:,}\".format(manuf_contrib_margin))\n  print(\"Total contribution margin ............ ${:,}\".format(total_contrib_margin))\n  \n  if manuf_min_price >= total_contrib_margin:\n    print(\"\\nGoal Congruence: (no excess capacity) \",'\\u2705')\n  \n  if opportunity_cost <= manuf_min_price:\n    print(f\"\\nno transfer deal (no excess capacity)\\n :: Assembly (buyer) ${opportunity_cost} < Manufacturing (seller) ${manuf_min_price}\")\n  \n  if capacity_min_price <= opportunity_cost :\n    print(\"\\nGoal Congruence: (excess capacity)   \",'\\u2705')\n    print(f\"\\ttransfer price range: ${capacity_min_price} to ${opportunity_cost}\" )\n\n\n\ntransfer_pricing2(boots)\n\n\n- Transfer Pricing Methods - \nAssembly contribution margin ......... $38\nManufacture contribution margin ...... $7\nTotal contribution margin ............ $45\n\nno transfer deal (no excess capacity)\n :: Assembly (buyer) $17 < Manufacturing (seller) $18\n\nGoal Congruence: (excess capacity)    ✅\n    transfer price range: $11 to $17"
  },
  {
    "objectID": "chapter8.html#cost-based-transfer",
    "href": "chapter8.html#cost-based-transfer",
    "title": "9  Pricing",
    "section": "9.8 Cost Based Transfer",
    "text": "9.8 Cost Based Transfer\n\n\nShow the code\nboots\n\n\n{'assembly_division': {'selling_price': 90,\n  'var_cost_manuf': 35,\n  'cost_outside_suppliers': 17},\n 'manufacture_division': {'selling_price': 18, 'var_cost_per_sole': 11}}"
  },
  {
    "objectID": "chapter8.html#transfer-between-divisions",
    "href": "chapter8.html#transfer-between-divisions",
    "title": "9  Pricing",
    "section": "9.8 Transfer between Divisions",
    "text": "9.8 Transfer between Divisions\nUsing a boot company example and comparing 2 transfer prices that include tax rates. The company data is in 2 data dictionaries.\n\n\nShow the code\nboot1 = {\n  'division1': {\n    'selling_price': 90,\n    'var_cost_manuf': 35,\n    'cost_item_internally': 18, # cost of item purchased internally\n    'tax_rate': 0.10\n    },\n  'division2': {\n    'selling_price': 18,\n    'var_cost_per_item': 11,\n    'tax_rate': 0.30\n    }\n}\n\nboot2 = {\n  'division1': {\n    'selling_price': 90,\n    'var_cost_manuf': 35,\n    'cost_item_internally': 11, # cost of item purchased internally\n    'tax_rate': 0.10\n    },\n  'division2': {\n    'selling_price': 11,\n    'var_cost_per_item': 11,\n    'tax_rate': 0.30\n    }\n}\n\n\nFunction\n\n\nShow the code\ndef transfer_divisions( dict1: dict, dict2: dict):\n  # --- dict 1 -- div 1\n  div1_1 = list(dict1['division1'].values())\n  # print(div1)\n  before_tax_contrib_margin11 = div1_1[0] - div1_1[1] - div1_1[2]\n  tax_11 = before_tax_contrib_margin11 * div1_1[-1]\n  post_tax_contrib_margin1 = before_tax_contrib_margin11 - tax_11\n\n  # --- dict1 -- div 2\n  div1_2 = list(dict1['division2'].values())\n  # print(div1_2)\n  before_tax_contrib_margin12 = div1_2[0] - div1_2[1]\n  tax_12 = before_tax_contrib_margin12 * div1_2[-1]\n  post_tax_contrib_margin2 = before_tax_contrib_margin12 - tax_12\n  total_before_tax_1 = before_tax_contrib_margin11 + before_tax_contrib_margin12\n  total_post_tax_1 = post_tax_contrib_margin1 + post_tax_contrib_margin2\n\n  # -- dict 2 - 1\n  div2_1 = list(dict2['division1'].values())\n  # print(div2_1)\n  before_tax_contrib_margin21 = div2_1[0] - div2_1[1] - div2_1[2]  # 44\n  tax_21 = before_tax_contrib_margin21 * div2_1[-1] # 4.4\n  post_tax_contrib_margin3 = before_tax_contrib_margin21 - tax_21 # 39.6\n\n  # # -- dict 2 - 2\n  div2_2 = list(dict2['division2'].values())\n  before_tax_contrib_margin22 = div2_2[0] - div2_2[1] # 0\n  tax_22 = before_tax_contrib_margin22 * div2_2[-1]  # 0\n  post_tax_contrib_margin4 = before_tax_contrib_margin22 - tax_22  # 0\n  total_before_tax_2 = before_tax_contrib_margin21 + before_tax_contrib_margin22\n  total_post_tax_2 = post_tax_contrib_margin3 + post_tax_contrib_margin4\n\n  \n\n  print(\"-- Transfers: Divisions & Countries --\")\n  print(\"Transfer Price 1\")\n  print(\"After tax contribution margin (div 1)....... ${:,}\".format(post_tax_contrib_margin1))\n  print(\"After tax contribution margin (div 2)....... ${:,}\".format(post_tax_contrib_margin2))\n  print(\"Before total tax contribution margin to company ...... ${:,}\".format(total_before_tax_1))\n  print(\"After total tax contribution margin to company ...... ${:.2f}\".format(total_post_tax_1))\n\n  print(\"\\nTransfer Price 2\")\n  print(\"After tax contribution margin (div 1)....... ${:,}\".format(post_tax_contrib_margin3))\n  print(\"After tax contribution margin (div 2)....... ${:,}\".format(post_tax_contrib_margin4))\n  print(\"Before total tax contribution margin to company ...... ${:,}\".format(total_before_tax_2))\n  print(\"After total tax contribution margin to company ...... ${:.2f}\".format(total_post_tax_2))\n  \n  print(\"\\n:: whichever transfer price is lower\",'\\u25C0')\n\n\ntransfer_divisions( boot1, boot2)\n\n\n-- Transfers: Divisions & Countries --\nTransfer Price 1\nAfter tax contribution margin (div 1)....... $33.3\nAfter tax contribution margin (div 2)....... $4.9\nBefore total tax contribution margin to company ...... $44\nAfter total tax contribution margin to company ...... $38.20\n\nTransfer Price 2\nAfter tax contribution margin (div 1)....... $39.6\nAfter tax contribution margin (div 2)....... $0.0\nBefore total tax contribution margin to company ...... $44\nAfter total tax contribution margin to company ...... $39.60\n\n:: whichever transfer price is lower ◀\n\n\n\n9.8.1 Example\nTransfer pricing example, a clock manufacturer company. Packaging costs of 50 cents can be saved by having internal company sales, and 8,000 units are to be transferred from one division to another. If manufacturer is not operating at full capacity, then the opportunity cost is $0.\n\n\nShow the code\nclocks = {\n  'customer_price': 10,\n  'var_cost': 4,\n  'fixed_cost': 2.5,\n  'units_transfer': 8000,\n  'internal_price': 5,\n  'packaging_cost': 0.5\n}\n\n\nfunction\n\n\nShow the code\ndef transfer_pricing3( dict ):\n  \n  variable_cost = dict['var_cost'] - dict['packaging_cost']\n  opportunity_cost_1 = 0\n  min_transfer_price = variable_cost + opportunity_cost_1\n  \n  opportunity_cost_2 = dict['customer_price'] - dict['var_cost']\n  transfer_price2 = variable_cost  + opportunity_cost_2\n  \n  print(\"internal sales variable cost = ${:,}\".format(variable_cost))\n  print(\"minimum transfer price (no opportunity costs) = ${:,}\".format(min_transfer_price))\n  print(\"minimum transfer price (full opportunity costs) = ${:,}\".format(transfer_price2))\n\ntransfer_pricing3( clocks )\n\n\ninternal sales variable cost = $3.5\nminimum transfer price (no opportunity costs) = $3.5\nminimum transfer price (full opportunity costs) = $9.5"
  },
  {
    "objectID": "chapter9.html",
    "href": "chapter9.html",
    "title": "10  Budgetary Planning",
    "section": "",
    "text": "Every manager and person deals with a budget at some time in their lives, every business needs to use planning tools for their budgets. By knowing the budget allows for ample cash to pay for materials, employees, production, and so forth.\nA budget is a formal written statement in financial terms of management’s plan for a specified future time period. Budgetary planning involves:\n\nBudgeting Basics & master budget\npreparing the sales, production & direct materials budgets\npreparing direct labor, manufacturing, expense budgets\npreparing the financial budgets\nbudgeting in non-manufacturing companies\n\nThe list above is a general overview of each section.\nBenefits of budgets:\n\nall management levels use to plan ahead & form goals\ngives objectives for evaluation\nclear communication for coordinated activities\n\n\nThe budget period is not set in stone, it is not mandatory to be 1 year, it can be any period of time\n\nA sales forecast is part of the budgeting process:\n\n\nShow the code\nforecast = [\"shows expected sales (industry) & company\\'s expected share of sales\",\n        \"general economic conditions\", \"industry trends\", \"market research studies\",\n        \"anticipated advertising & promotion\",\"market share\",\"changes in prices\", \n        \"technology developments\"]\n        \nfor sales in range(len(forecast)):\n  print(forecast[sales] )\n\n\nshows expected sales (industry) & company's expected share of sales\ngeneral economic conditions\nindustry trends\nmarket research studies\nanticipated advertising & promotion\nmarket share\nchanges in prices\ntechnology developments"
  },
  {
    "objectID": "chapter9.html#master-budget",
    "href": "chapter9.html#master-budget",
    "title": "10  Budgetary Planning",
    "section": "10.1 Master Budget",
    "text": "10.1 Master Budget\nA master budget is several budget documents combined. Using a Python function to illustrate the part of a master budget, as it shows how to make nested functions and is main overview of all the functions.\n\n\nShow the code\ndef master_budget():\n  \n  def sales_budget():\n    pass \n  \n  def production_budget():\n    pass \n  \n  # --- operating budgets\n  def direct_materials_budget():\n    pass\n  \n  def direct_labor_budget():\n    pass\n  \n  def manufacturing_overhead_budget():\n    pass\n  # ----\n  \n  def selling_admin_budget():\n    pass\n  \n  def income_statement_budget():\n    pass\n  \n  # --- financial budgets\n  def capital_expenditure_budget():\n    pass\n  \n  def cash_budget():\n    pass\n  \n  def budgeted_balance_sheet():\n    pass\n  # --------\n\nmaster_budget()"
  },
  {
    "objectID": "chapter9.html#sales-budget",
    "href": "chapter9.html#sales-budget",
    "title": "10  Budgetary Planning",
    "section": "10.2 Sales Budget",
    "text": "10.2 Sales Budget\nThe sales budget is the first budget, which represents management’s best estimate of sales revenue for the budgeted period. Inaccurate sales budget can affect net income.\n\nsales budget = expected sales units x anticipated selling price per unit\n\nSales data in a data dictionary.\n\n\nShow the code\nsales = {\n  'quarter': [1,2,3,4],\n  'expected_sales': [3000, 3500, 4000, 4500],\n  'unit_selling_price': 60\n}\n\n\nSales budget function\n\n\nShow the code\ndef sales_budget( dict ):\n  \n  price = dict['unit_selling_price']\n  expected_sales  = dict['expected_sales'] \n  dL = len( dict['expected_sales'] ) # length of dictionary array\n  quarter = dict['quarter'] # get each quarter\n  sales = []\n  q =[]\n  print(\"-- Sales Budget --\")\n  \n  for x in range(dL):\n    quarters = quarter[x]\n    q.append(quarters)\n    s = expected_sales[x] * price\n    sales.append(s)\n  \n    print(\"total sales ${:,} Quarter: {:,}\".format(sales[x], q[x]))\n  \n  print(\"Total sales for year ..... ${:,}\".format( sum(sales)))\n\n\nCall the function\n\n\nShow the code\nsales_budget( sales ) \n\n\n-- Sales Budget --\ntotal sales $180,000 Quarter: 1\ntotal sales $210,000 Quarter: 2\ntotal sales $240,000 Quarter: 3\ntotal sales $270,000 Quarter: 4\nTotal sales for year ..... $900,000"
  },
  {
    "objectID": "chapter9.html#production-budget",
    "href": "chapter9.html#production-budget",
    "title": "10  Budgetary Planning",
    "section": "10.3 Production Budget",
    "text": "10.3 Production Budget\nThe production budget shows the units that must be produced to meet expected sales, production requirements have a formula.\n\nbudgeted sales units (bsu)\nending finished goods units (efgu), {desired units}\nbeginning finished goods units (bfgu)\nrequired production units = bsu + efgu - bfgu\n\nproduction data is in a data dictionary, the ending finished goods unit values are based on the next quarter’s sales times 20%.\n\n\nShow the code\nproduction = {\n  'quarter': [1,2,3,4],\n  'expected_sales': [3000, 3500, 4000, 4500],\n  # ending finished goods units\n  'efgu': [700,800,900, 1000],\n  # beginning finished goods units\n  'bfgu': [600,700,800,900]\n}\n\n\nfunction\n\n\nShow the code\ndef production_budget( dict ):\n  quarter = dict['quarter'] # get each quarter\n  expected_sales  = dict['expected_sales'] \n  dL = len( expected_sales ) \n  efgu = dict['efgu']\n  bfgu = dict['bfgu']\n  \n  prod = []\n  prod2 = []\n  q =[]\n  print(\"-- Production Budget --\")\n  \n  for x in range( dL ):\n    quarters = quarter[x]\n    q.append(quarters)\n    p = expected_sales[x] + efgu[x] \n    prod.append(p)\n    \n    p2 = p - bfgu[x]\n    prod2.append(p2)\n    print(\"Total required units : {:,} Quarter: {:,}\".format(prod[x], q[x]))\n    print(\"Required production units : {:,} Quarter: {:,}\\n\".format(prod2[x], q[x]))\n  \n  print(\"Total production units for year ..... {:,}\".format( sum(prod2)))\n\n\ncall function\n\n\nShow the code\nproduction_budget( production )\n\n\n-- Production Budget --\nTotal required units : 3,700 Quarter: 1\nRequired production units : 3,100 Quarter: 1\n\nTotal required units : 4,300 Quarter: 2\nRequired production units : 3,600 Quarter: 2\n\nTotal required units : 4,900 Quarter: 3\nRequired production units : 4,100 Quarter: 3\n\nTotal required units : 5,500 Quarter: 4\nRequired production units : 4,600 Quarter: 4\n\nTotal production units for year ..... 15,400"
  },
  {
    "objectID": "chapter9.html#direct-materials-budget",
    "href": "chapter9.html#direct-materials-budget",
    "title": "10  Budgetary Planning",
    "section": "10.4 Direct Materials Budget",
    "text": "10.4 Direct Materials Budget\nThe direct materials budget shows the quantity and cost of direct materials that need to be purchased.\n\nrequired direct materials units to be purchased (rdmup)\ndirect materials units required for production (dmurp)\nending direct materials units {desired} (edmu)\nbeginning direct materials units (bdmu)\nrdmup = dmurp + edmu - bdmu\n\nUnits to be produced are the values from production budget function, when all of these functions are inside the master budget function you can just use the stored array of values. Here in this example the units to be produced are manually placed inside the dictionary array. Ending direct materials (edmu) is 10% of next quarter’s production requirements.\n\n\nShow the code\nmaterials = {\n  'quarter': [1,2,3,4],\n  'units_to_produce': [3100,3600,4100,4600],\n  'direct_materials_per_unit': 2,\n  'production_percent': 0.1,\n  'edmu': [720,820,920,1020],\n  'cost_per_kg': 4\n}\n\n\nfunction\n\n\nShow the code\n# --- operating budgets\ndef direct_materials_budget( dict ):\n  \n  units_to_prod = dict['units_to_produce']\n  dL = len(units_to_prod)\n  quarter = dict['quarter']\n  percent = dict['production_percent']\n  cost = dict['cost_per_kg']\n  \n  # direct materials per unit\n  dmpu = dict['direct_materials_per_unit']\n  # -- ending direct materials \n  edmu = dict['edmu']\n  \n  prod = []\n  q =[]\n  mr = [] # materials required\n  bm = [] # begin direct materials\n  dmp = [] # direct material purchase\n  cpk = [] # cost per kg\n  \n  print(\"-- Direct Materials Budget --\")\n  for x in range( dL ):\n    quarters = quarter[x]\n    q.append(quarters)\n    \n    p = units_to_prod[x] * dmpu\n    prod.append(p)\n    \n    m = p + edmu[x]\n    mr.append(m)\n    \n    begin_mat = prod[x] * percent\n    bm.append(begin_mat)\n    \n    dm = mr[x] - bm[x]\n    dmp.append(dm)\n    \n    c = dmp[x] * cost\n    cpk.append(c)\n    \n    print(\"Quarter: {}\\nTotal units needed for production: ..... {:,}  \".format(q[x], prod[x] ) ) \n    print(\"Total materials required: ........................... {:,}  \".format(mr[x]) ) \n    print(\"Direct materials purchased: ......................... {:,}  \".format(dmp[x]) ) \n    print(\"Total cost of direct materials purchased: ........... ${:,}  \\n\".format(cpk[x]) ) \n \n  \n  print(\"Total cost of direct materials purchased for year ..... ${:,}\".format( sum(cpk)))\n\n\ncall function\n\n\nShow the code\ndirect_materials_budget( materials )\n\n\n-- Direct Materials Budget --\nQuarter: 1\nTotal units needed for production: ..... 6,200  \nTotal materials required: ........................... 6,920  \nDirect materials purchased: ......................... 6,300.0  \nTotal cost of direct materials purchased: ........... $25,200.0  \n\nQuarter: 2\nTotal units needed for production: ..... 7,200  \nTotal materials required: ........................... 8,020  \nDirect materials purchased: ......................... 7,300.0  \nTotal cost of direct materials purchased: ........... $29,200.0  \n\nQuarter: 3\nTotal units needed for production: ..... 8,200  \nTotal materials required: ........................... 9,120  \nDirect materials purchased: ......................... 8,300.0  \nTotal cost of direct materials purchased: ........... $33,200.0  \n\nQuarter: 4\nTotal units needed for production: ..... 9,200  \nTotal materials required: ........................... 10,220  \nDirect materials purchased: ......................... 9,300.0  \nTotal cost of direct materials purchased: ........... $37,200.0  \n\nTotal cost of direct materials purchased for year ..... $124,800.0"
  },
  {
    "objectID": "chapter9.html#direct-labor-budget",
    "href": "chapter9.html#direct-labor-budget",
    "title": "10  Budgetary Planning",
    "section": "10.5 Direct Labor Budget",
    "text": "10.5 Direct Labor Budget\nThe direct labor budget deals with quantity of hours and the cost of direct labor that will be needed to meet production requirements.\n\ntotal direct labor cost (tdlc)\nunits to be produced (utp)\ndirect labor time per unit (dltpu)\ndirect labor cost per hour (dlcpu)\ntdlc = utp * dltpu * dlcpu\n\nLabor data dictionary\n\n\nShow the code\nlabor = {\n  'quarter': [1,2,3,4],\n  'units_to_produce': [3100,3600,4100,4600],\n  # direct labor time per unit\n  'dltpu': 2,\n  # direct labor cost per hour\n  'dlcpu': 10\n}\n\n\nfunction\n\n\nShow the code\ndef direct_labor_budget( dict ):\n  \n  quarter = dict['quarter']\n  dltpu = dict['dltpu'] # time per unit\n  dlcpu = dict['dlcpu'] # cost per unit\n  \n  units_to_prod = dict['units_to_produce']\n  dL = len(units_to_prod)\n  \n  prod = []\n  q =[]\n  lc = [] # labor cost\n  \n  print(\"-- Direct Labor Budget --\")\n  for x in range( dL ):\n    quarters = quarter[x]\n    q.append(quarters)\n    \n    p = units_to_prod[x] * dltpu  # time per unit\n    prod.append(p)\n    \n    c = p * dlcpu\n    lc.append(c)\n    \n    print(\"Quarter: {}\\nTotal required direct labor hours: ..... {:,}  \".format(q[x], prod[x] ) ) \n    print(\"Total direct labor cost: ............................ ${:,}  \\n\".format(lc[x]) ) \n \n  print(\"Total direct labor costs for year ..... ${:,}\".format( sum(lc)))\n\n\ncall function\n\n\nShow the code\ndirect_labor_budget( labor )\n\n\n-- Direct Labor Budget --\nQuarter: 1\nTotal required direct labor hours: ..... 6,200  \nTotal direct labor cost: ............................ $62,000  \n\nQuarter: 2\nTotal required direct labor hours: ..... 7,200  \nTotal direct labor cost: ............................ $72,000  \n\nQuarter: 3\nTotal required direct labor hours: ..... 8,200  \nTotal direct labor cost: ............................ $82,000  \n\nQuarter: 4\nTotal required direct labor hours: ..... 9,200  \nTotal direct labor cost: ............................ $92,000  \n\nTotal direct labor costs for year ..... $308,000"
  },
  {
    "objectID": "chapter9.html#manufacturing-overhead-budget",
    "href": "chapter9.html#manufacturing-overhead-budget",
    "title": "10  Budgetary Planning",
    "section": "10.6 Manufacturing Overhead Budget",
    "text": "10.6 Manufacturing Overhead Budget\nThe manufacturing overhead budget is about the expected manufacturing overhead costs for the budget period.\nA company is expecting variable costs to fluctuate along with the production volume, based upon the rates per direct labor hour. The company data is in a data dictionary. Indirect materials are values from the direct labor budget function.\n\nindirect materials ($1/hr)\nindirect labor ($1.40/hr)\nutilities ($0.40/hr)\nmaintenance ($0.20/hr)\n\n\n\nShow the code\noverhead = {\n  'quarter': [1,2,3,4],\n  'direct_labor_hours': [6200,7200,8200,9200],\n  'indirect_materials': 1,\n  'indirect_labor': 1.4,\n  'utilities': 0.4,\n  'maintenance': 0.2,\n  'fixed_costs': {\n      'supervisor_salaries': 20e3,\n      'depreciation': 3800,\n      'property_tax_insurance': 9e3,\n      'maintenance': 5700\n    }\n}\n\n\nfunction\n\n\nShow the code\ndef manufacturing_overhead_budget( dict ):\n  \n  quarter = dict['quarter']\n  labor_hrs = dict['direct_labor_hours']\n  dL = len(labor_hrs)\n  \n  ind_materials = dict['indirect_materials']\n  ind_labor = dict['indirect_labor']\n  util = dict['utilities']\n  maint = dict['maintenance']\n  \n  # - fixed costs\n  fixed_cost = sum( list(dict['fixed_costs'].values() ))\n  \n  total_labor_hrs = sum(labor_hrs)\n\n  lab = []\n  q =[]\n  idm = [] # indirect materials\n  idl = [] # indirect labor\n  uts = [] # utilities\n  main = [] # maintenance\n  var_costs =  []\n  manuf_over = [] # manufacturing overhead\n  \n  print(\"-- Manufacturing Overhead Budget --\")\n  for x in range( dL ):\n    quarters = quarter[x]\n    q.append(quarters)\n    \n    h = labor_hrs[x] * ind_materials\n    lab.append(h)\n    \n    i = h * ind_labor\n    idl.append(i)\n    \n    u = h * util\n    uts.append(u)\n    \n    m = h * maint\n    main.append(m)\n    \n    t = lab[x] + idl[x] +uts[x] + main[x]\n    var_costs.append(t)\n    \n    mo = t + fixed_cost\n    manuf_over.append(mo)\n    \n    overhead_rate_per_hr =  sum(manuf_over) / total_labor_hrs \n    \n    print(\"Quarter: {}\\nIndirect materials: ..... ${:,}  \".format(q[x], lab[x] ) ) \n    print(\"Indirect labor: ...................... ${:,}  \".format( idl[x] ))\n    print(\"Utilities: ........................... ${:,}  \".format( uts[x] ) )\n    print(\"Maintenance: ......................... ${:,}  \".format( main[x] ) )\n    print(\"Total variable cost: ............................ ${:,}\".format(  t ) )\n    print(\"Total manufacturing cost: ....................... ${:,}  \\n\".format( manuf_over[x]  ) )\n  \n\n  print(\"Total variable costs for year ............. ${:,}\".format( sum(var_costs) ))\n  print(\"Total manufacturing overhead for year ..... ${:,}\".format( sum(manuf_over) ))\n  print(\"Total direct labor hours for year .........  {:,}\".format( sum(lab) ))\n  print(\"Manufacturing overhead rate per labor hour ..... ${:,}\".format( overhead_rate_per_hr ))\n\n\ncall function\n\n\nShow the code\nmanufacturing_overhead_budget( overhead )\n\n\n-- Manufacturing Overhead Budget --\nQuarter: 1\nIndirect materials: ..... $6,200  \nIndirect labor: ...................... $8,680.0  \nUtilities: ........................... $2,480.0  \nMaintenance: ......................... $1,240.0  \nTotal variable cost: ............................ $18,600.0\nTotal manufacturing cost: ....................... $57,100.0  \n\nQuarter: 2\nIndirect materials: ..... $7,200  \nIndirect labor: ...................... $10,080.0  \nUtilities: ........................... $2,880.0  \nMaintenance: ......................... $1,440.0  \nTotal variable cost: ............................ $21,600.0\nTotal manufacturing cost: ....................... $60,100.0  \n\nQuarter: 3\nIndirect materials: ..... $8,200  \nIndirect labor: ...................... $11,480.0  \nUtilities: ........................... $3,280.0  \nMaintenance: ......................... $1,640.0  \nTotal variable cost: ............................ $24,600.0\nTotal manufacturing cost: ....................... $63,100.0  \n\nQuarter: 4\nIndirect materials: ..... $9,200  \nIndirect labor: ...................... $12,880.0  \nUtilities: ........................... $3,680.0  \nMaintenance: ......................... $1,840.0  \nTotal variable cost: ............................ $27,600.0\nTotal manufacturing cost: ....................... $66,100.0  \n\nTotal variable costs for year ............. $92,400.0\nTotal manufacturing overhead for year ..... $246,400.0\nTotal direct labor hours for year .........  30,800\nManufacturing overhead rate per labor hour ..... $8.0"
  },
  {
    "objectID": "chapter9.html#selling-admin-budget",
    "href": "chapter9.html#selling-admin-budget",
    "title": "10  Budgetary Planning",
    "section": "10.7 Selling & Admin Budget",
    "text": "10.7 Selling & Admin Budget\nThe selling and administrative expense budget is all about projections for the budget period regarding the selling and admin expenses.\n\nvariable expense rate per unit of sales commission $3\nof the 3 is $1 for freight out\nvariable expense per quarter are based on the unit of sales from the sales budget\n\n\n\nShow the code\nadmin = {\n  'quarter': [1,2,3,4],\n  'sales_units': [3000,3500,4000,4500],\n  'sales_commission': 3,\n  'freight_per_unit': 1,\n  'fixed_expenses': {\n    'advertising': 5000,\n    'sales_salaries': 15000,\n    'office_salaries': 7500,\n    'depreciation': 1000,\n    'property_tax_insurance': 1500\n    }\n}\n\n\nfunction\n\n\nShow the code\ndef selling_admin_budget(dict):\n  \n  quarter = dict['quarter']\n  sales_units = dict['sales_units']\n  dL = len(sales_units)\n  \n  comm = dict['sales_commission']\n  freight = dict['freight_per_unit']\n  \n  fixed_exp = sum(dict['fixed_expenses'].values())\n  \n  su = [] # sales units\n  q =[]\n  fo = [] # freight out\n  tot_var_exp = []\n  fe = [] # fixed expense\n  \n  print(\"-- Selling & Admin. Expense Budget --\")\n  for x in range( dL ):\n    quarters = quarter[x]\n    q.append(quarters)\n    \n    s = sales_units[x] * comm\n    su.append(s)\n    \n    f = sales_units[x] * freight\n    fo.append(f)\n    \n    t = su[x] + fo[x] \n    tot_var_exp.append(t)\n    \n    fc = t + fixed_exp\n    fe.append(fc)\n    \n    \n    \n    print(\"Quarter: {}\\nSales commissions per unit: ........... ${:,}  \".format(q[x], su[x] ) ) \n    print(\"Freight out per unit: .............................. ${:,}  \".format( fo[x] ))\n    print(\"Total variable expense: ............................ ${:,}  \".format(  t ) )\n    print(\"Total selling & admin expense: ............................ ${:,}  \\n\".format(  fe[x] ) )\n    \n  print(\"\\nTotal sales commission for year .................... ${:,}\".format( sum(su) ))\n  print(\"Total variable costs for year ........................ ${:,}\".format( sum(tot_var_exp) ))\n  print(\"Total selling & admin expense for year ............... ${:,}\".format( sum(fe) ))\n\n\ncall function\n\n\nShow the code\nselling_admin_budget( admin )\n\n\n-- Selling & Admin. Expense Budget --\nQuarter: 1\nSales commissions per unit: ........... $9,000  \nFreight out per unit: .............................. $3,000  \nTotal variable expense: ............................ $12,000  \nTotal selling & admin expense: ............................ $42,000  \n\nQuarter: 2\nSales commissions per unit: ........... $10,500  \nFreight out per unit: .............................. $3,500  \nTotal variable expense: ............................ $14,000  \nTotal selling & admin expense: ............................ $44,000  \n\nQuarter: 3\nSales commissions per unit: ........... $12,000  \nFreight out per unit: .............................. $4,000  \nTotal variable expense: ............................ $16,000  \nTotal selling & admin expense: ............................ $46,000  \n\nQuarter: 4\nSales commissions per unit: ........... $13,500  \nFreight out per unit: .............................. $4,500  \nTotal variable expense: ............................ $18,000  \nTotal selling & admin expense: ............................ $48,000  \n\n\nTotal sales commission for year .................... $45,000\nTotal variable costs for year ........................ $60,000\nTotal selling & admin expense for year ............... $180,000"
  },
  {
    "objectID": "chapter9.html#budgeted-income-statement",
    "href": "chapter9.html#budgeted-income-statement",
    "title": "10  Budgetary Planning",
    "section": "10.8 Budgeted Income Statement",
    "text": "10.8 Budgeted Income Statement\nThe budgeted income statement is an important function out of the operating budgets, as it indicates the expected profitability of operations for the budget period. Evaluation of the company’s performance is based on this income statement.\nThis function ideally would just use the variables inside the master budget function, but here each part of the budgeted income uses values from previous functions. For this function you need the following function values:\n\nsales_budget() : {total sales for year}\nproduction_budget() : {production units for year}\ndirect_materials_budget() : {direct materials per unit, cost per unit}\ndirect_labor_budget() : {dltpu, dlcpu}\nmanufacturing_overhead() : {rate per hour, number of hours}\nselling_admin_budget() : {total sell & admin expense}\n\nIn addition to these values, there are two more required: interest expense and estimated income tax. There are two parts to this section, the first is calculating the total unit cost, then the second part is deductions. Note: the value for hours in manufacturing overhead function is arbitrary chosen.\n\n\nShow the code\n# -- direct_materials_budget()\ndirect_materials_per_unit = 2\ncost_per_unit = 4\ntotal_direct_materials = direct_materials_per_unit * cost_per_unit\n\n# -- direct_labor_budget()\ndltpu = 2\ndlcpu = 10\ntotal_direct_labor = dltpu * dlcpu\n\n# --- manufacturing_overhead()\nrate_per_hour = 8\nhours = 2  \ntotal_manufacture_overhead = rate_per_hour * hours\n\n# === cost element\ntotal_unit_cost = total_direct_materials + total_direct_labor + total_manufacture_overhead\n\n# ----------------------- part 2\n\n# -- production_budget()\ntotal_production_units = 15400\n\n# -- sales_budget()\nsales = 900e3\n\ncost_of_goods_sold = total_unit_cost * total_production_units\ngross_profit = sales - cost_of_goods_sold\ntotal_sell_admin_exp = 180e3\nincome_from_operations = gross_profit - total_sell_admin_exp\ninterest = 100\nincome_tax = 12e3\nnet_income = income_from_operations - interest - income_tax\n\nprint(\"Budgeted Income Statement\")\nprint(\"Total unit cost ................... ${:,}\".format(total_unit_cost))\nprint(\"sales ............................. ${:,}\".format(sales))\nprint(\"cost of goods sold ................ ${:,}\".format(cost_of_goods_sold))\nprint(\"gross profit ...................... ${:,}\".format(gross_profit))\nprint(\"income from operations ............ ${:,}\".format(income_from_operations))\nprint(\"net income ........................ ${:,}\".format(net_income))\n\n\nBudgeted Income Statement\nTotal unit cost ................... $44\nsales ............................. $900,000.0\ncost of goods sold ................ $677,600\ngross profit ...................... $222,400.0\nincome from operations ............ $42,400.0\nnet income ........................ $30,300.0"
  },
  {
    "objectID": "chapter9.html#cash-budget",
    "href": "chapter9.html#cash-budget",
    "title": "10  Budgetary Planning",
    "section": "10.9 Cash Budget",
    "text": "10.9 Cash Budget\nThough the budgeted income statement is important, the cash budget is super important, as it helps the treasurer manage the cash. The cash budget is made at least once per month. There are three sections:\n\ncash receipts : expected receipts from company’s main source(s) of revenue, including those from interest and dividends\ncash disbursements : cash payments, direct materials, direct labor, manufacturing overhead, selling & admin expenses. Payments from income taxes, dividends, investments and plant assets are also part of this section\nfinancing : expected borrowings and repayment of borrowed funds plus interest\n\nHere is a basic cash budget. Company management wants to maintain monthly cash balance of $15,000. At the beginning of March the cash balance is 16,500, expected cash receipts for March are 210,000, and cash disbursements are expected to be 220,000.\n\n\nShow the code\ncash = {\n  'balance_goal': 15e3,\n  'begin_balance': 16500,\n  'cash_receipts': 210e3,\n  'cash_disbursements': 220e3\n}\n\n\nfunction\n\n\nShow the code\ndef cash_budget( dict ):\n    total_avail_cash = dict['begin_balance'] + dict['cash_receipts']\n    cash_dis = dict['cash_disbursements']\n    excess_cash = total_avail_cash - cash_dis\n    balance = dict['balance_goal']\n    delta = excess_cash - balance\n    \n    print(\"-- Basic Cash Budget --\")\n    print(\"Total available cash ............... ${:,}\".format(total_avail_cash))\n    print(\"Excess of availble cash ............ ${:,}\".format(excess_cash))\n    \n    if delta < 0:\n      print(\"Financing (need cash) ............. ${:,}\".format(abs(delta)))\n    else:\n      print(\"Financing ........................ ${:,}\".format(delta))\n    print(\"Ending cash balance ................ ${:,}\".format(balance))\n\n\ncall function\n\n\nShow the code\ncash_budget( cash )\n\n\n-- Basic Cash Budget --\nTotal available cash ............... $226,500.0\nExcess of availble cash ............ $6,500.0\nFinancing (need cash) ............. $8,500.0\nEnding cash balance ................ $15,000.0"
  },
  {
    "objectID": "chapter9.html#non-manufacture-budgets",
    "href": "chapter9.html#non-manufacture-budgets",
    "title": "10  Budgetary Planning",
    "section": "10.10 Non-Manufacture Budgets",
    "text": "10.10 Non-Manufacture Budgets\nA merchandiser uses sales budget but uses it differently than a manufacturer. The merchandiser uses merchandise purchases budget and does not use direct materials, direct labor and manufacturing overhead. Merchandise purchase budget shows the estimated cost of gooods to be purchased to meet expected sales.\n\nrequired merchandise purchases (rmp)\nbudgeted cost of goods sold (bcogs)\ndesired ending merchandise inventory (demi)\nbeginning merchandise inventory (bmi)\nrmp = bcogs + demi - bmi\n\nA company is preparing a merchandise purchases budget for the month of July. The company estimates that sales will be 300,000 in July and 320,000 in August. The cost of goods sold is expected to be 70% of sales ($210,000: 0.70 x 300,000) and 224,000 in August (0.70 x 320,000). The company desired ending inventory is 30% of the following month’s cost of goods sold.\n\n\nShow the code\npurchases = {\n  'months': ['July','August'],\n  'estimated_sales': [300e3, 320e3],\n  'expected_cogs': 0.7,\n  'desired_ending_inventory': 0.3\n}\n\n\nfunction\n\n\nShow the code\ndef merchandise_budget( dict ):\n  months = dict['months']\n  exp_sales_1 = dict['estimated_sales'][0]\n  exp_sales_2 = dict['estimated_sales'][1]\n  \n  # budgeted cost of goods sold\n  bcogs_1 = exp_sales_1 * dict['expected_cogs']\n  bcogs_2 = (exp_sales_2 *  dict['expected_cogs'])\n  \n  demi_prct = dict['desired_ending_inventory']\n  demi = bcogs_2 * demi_prct\n  total = bcogs_1 + demi \n  \n  bmi = (bcogs_1 * demi_prct)\n  bmp = total - bmi\n  \n  print(\"- Merchandise Purchases Budget -\")\n  print(\"Budgeted cost of goods sold .......................... ${:,}\".format(bcogs_1))\n  print(\"Desired ending merchandise inventory total ........... ${:,}\".format(total))\n  print(\"Budgeted merchandise purchases for {} ................ ${:,}\".format(months[0], bmp))\n  \n  \nmerchandise_budget( purchases )\n\n\n- Merchandise Purchases Budget -\nBudgeted cost of goods sold .......................... $210,000.0\nDesired ending merchandise inventory total ........... $277,200.0\nBudgeted merchandise purchases for July ................ $214,200.0"
  },
  {
    "objectID": "chapter9.html#service-enterprises",
    "href": "chapter9.html#service-enterprises",
    "title": "10  Budgetary Planning",
    "section": "10.11 Service Enterprises",
    "text": "10.11 Service Enterprises\nIn service enterprises the key to budgeting is the coordination of staff needs and expected services. If a company is overstaffed, then problems could arise such as:\n\nlabor costs will be high\nprofits will be lower due to salaries\nstaff turnover may increase due to lack of extra work\n\nSeasonal yard work company data is in a data dictionary\n\n\nShow the code\nlawns = {\n  'lawn_size': ['small','medium','large'],\n  'lawns_to_service': [300, 200, 100],\n  'direct_labor_hrs': [1, 1.75, 2.75],\n  'avg_cost_labor_hr': 15\n}\n\n\nInstead of a function this part simply uses a for loop as it is same amount of work as an Excel sheet more or less and is a simple example.\n\n\nShow the code\nsizes = lawns['lawn_size']\nservice = lawns['lawns_to_service']\nhrs = lawns['direct_labor_hrs']\nwage = lawns['avg_cost_labor_hr']\n\ns = []\na = []\nw = []\nfor x in range(len(lawns['lawn_size'])):\n  tl = service[x] * hrs[x]\n  a.append(tl)\n  \n  size = sizes[x]\n  s.append(size)\n  \n  cost = tl * wage\n  w.append(cost)\n\n  print(\"Lawn size: {} \\ntotal labor hours ..... {:,}\".format( s[x], a[x] ))\n  print(\"Total direct labor cost ...... ${:,}\".format(w[x]))\n\nprint(\"\\nTotal costs ..... ${:,}\".format( sum(w)))\n\n\nLawn size: small \ntotal labor hours ..... 300\nTotal direct labor cost ...... $4,500\nLawn size: medium \ntotal labor hours ..... 350.0\nTotal direct labor cost ...... $5,250.0\nLawn size: large \ntotal labor hours ..... 275.0\nTotal direct labor cost ...... $4,125.0\n\nTotal costs ..... $13,875.0"
  },
  {
    "objectID": "chapter10.html#static-budget-reports",
    "href": "chapter10.html#static-budget-reports",
    "title": "11  Budgetary Control & Responsibility",
    "section": "11.1 Static Budget Reports",
    "text": "11.1 Static Budget Reports\nA static budget is a projection of budget data at one level of activity, and are part of the whole master budget.\n\n\nShow the code\nsales ={\n  'expected_units': 5000,\n  'variable_costs': {\n    'direct_materials': 6,\n    'direct_labor': 15,\n    'overhead': 24\n    },\n  'fixed_costs': {\n    'depreciation': 10e3,\n    'supervision': 5000\n    },\n  'actual': {\n    'direct_materials': 33900,\n    'direct_labor': 74200,\n    'overhead': 120500,\n    'depreciation': 10e3,\n    'supervision': 5000\n    },\n  'budget': {\n    'direct_materials': 30e3,\n    'direct_labor': 75e3,\n    'overhead': 120e3,\n    'depreciation': 10e3,\n    'supervision': 5000\n    }\n}\n\n\nStatic budget function\n\n\nShow the code\ndef static_budget( dict ):\n  \n  tb = list(dict['budget'].values())\n  ta = list(dict['actual'].values())\n  total_diff = sum(tb)  - sum(ta)\n  tot_var_diff = sum(tb[0:3] ) - sum(ta[0:3] )\n \n  \n  print(\"-- Static Budget Report --\")\n  print(\"Total variable costs (Budget) ............ ${:,}\".format( sum(tb[0:3] )  ))\n  print(\"Total variable costs (Actual) ............ ${:,}\".format( sum(ta[0:3] ) ))\n  \n  if tot_var_diff < 1:\n    print(\"Difference in variable costs (unfavorable) ............. ${:,}\\n\".format( tot_var_diff))\n  else:\n    print(\"Difference in variable costs ............. ${:,}\\n\".format( tot_var_diff))\n    \n  print(\"Total Budgeted Sales ........... ${:,}\".format( sum(tb) ))\n  print(\"Total Actual Sales ............. ${:,}\".format( sum(ta) ))\n  \n  if total_diff < 1:\n    print(\"Total Difference in Sales (unfavorable) ............... ${:,}\".format( total_diff ))\n  else:\n    print(\"Total Difference in Sales .................... ${:,}\".format( total_diff ))\n\n\ncall function\n\n\nShow the code\nstatic_budget( sales )\n\n\n-- Static Budget Report --\nTotal variable costs (Budget) ............ $225,000.0\nTotal variable costs (Actual) ............ $228,600\nDifference in variable costs (unfavorable) ............. $-3,600.0\n\nTotal Budgeted Sales ........... $240,000.0\nTotal Actual Sales ............. $243,600.0\nTotal Difference in Sales (unfavorable) ............... $-3,600.0"
  },
  {
    "objectID": "chapter10.html#flexible-budgets",
    "href": "chapter10.html#flexible-budgets",
    "title": "11  Budgetary Control & Responsibility",
    "section": "11.2 Flexible Budgets",
    "text": "11.2 Flexible Budgets\nA flexible budget projects budget data for various levels of activity.\nThere are 4 steps to making a flexible budget:\n\ndetermine the activity index & relevant range of activity (labor hours per month) which is determined by management\ndetermine the variable costs and the budgeted variable cost per unit of activity for each\ndetermine the fixed costs and the budgeted amount for each\nprepare the budget for selected increments of activity within the relevant range\n\n\n\nShow the code\nflex_data = {\n  'variable_costs': {\n    'indirect materials': 180e3,\n    'indirect labor': 240e3,\n    'utilities': 60e3\n    },\n  'fixed_costs': {\n    'depreciation': 180e3,\n    'supervision': 120e3,\n    'property tax': 60e3\n    },\n  'direct_labor_hrs': [8e3, 9e3,10e3, 11e3, 12e3]\n}\n\n\nfunction\n\n\nShow the code\ndef flexible_budget( dict ):\n  print(\"~~ Flexible Budget ~~~\")\n  # 1\n  labor_hrs = dict['direct_labor_hrs']\n  \n  # 3\n  fixed_costs = sum(dict['fixed_costs'].values())\n  fc_per_month = fixed_costs/ 12\n\n  \n  # 2\n  ops_hrs = dict['fixed_costs']['supervision']\n  var_costs = list(dict['variable_costs'].values())\n  var_cost_k = list(dict['variable_costs'].keys())\n  \n  vcpu = [] # variable cost per unit\n  hrs_cpu = [] # hours * cost per unit\n  indw = [] # indirect labor work \n  uts = [] # utilities\n  \n  for x in range( len(var_costs)):\n    vc = var_costs[x] / ops_hrs\n    vcpu.append(vc)\n    print(\"Variable cost: {} per direct labor hour .... ${:,}\".format(var_cost_k[x], vcpu[x] ))\n    \n  print(\"Total variable cost per direct labor hour ..... ${:,}\\n\".format( sum(vcpu) ))\n  print(\"Total fixed costs per month ...... ${:,}\".format(fc_per_month))\n  \n  # labor hours x vcpu \n  for x in range(len(labor_hrs)):\n    units = labor_hrs[x] * vcpu[0]\n    hrs_cpu.append(units)\n    \n    ind = labor_hrs[x] * vcpu[1]\n    indw.append(ind)\n\n    utils = labor_hrs[x] * vcpu[2]\n    uts.append(utils)\n  \n    print(\"\\nDirect labor hours {}\".format(labor_hrs[x] ))\n    print(\"{} : ${:,}\".format(var_cost_k[0], hrs_cpu[x] ))\n    print(\"{} : ${:,}\".format(var_cost_k[1], indw[x]))\n    print(\"{} : ${:,}\".format(var_cost_k[2], uts[x]))\n\n    tot_vc = hrs_cpu[x] + indw[x] + uts[x]\n    print(\"total variable costs : ${:,}\".format(tot_vc))\n    grand_tot = fc_per_month + tot_vc\n    print(\"Total costs ........................... ${:,}\".format(grand_tot ))\n\n\ncall function\n\n\nShow the code\nflexible_budget( flex_data )\n\n\n~~ Flexible Budget ~~~\nVariable cost: indirect materials per direct labor hour .... $1.5\nVariable cost: indirect labor per direct labor hour .... $2.0\nVariable cost: utilities per direct labor hour .... $0.5\nTotal variable cost per direct labor hour ..... $4.0\n\nTotal fixed costs per month ...... $30,000.0\n\nDirect labor hours 8000.0\nindirect materials : $12,000.0\nindirect labor : $16,000.0\nutilities : $4,000.0\ntotal variable costs : $32,000.0\nTotal costs ........................... $62,000.0\n\nDirect labor hours 9000.0\nindirect materials : $13,500.0\nindirect labor : $18,000.0\nutilities : $4,500.0\ntotal variable costs : $36,000.0\nTotal costs ........................... $66,000.0\n\nDirect labor hours 10000.0\nindirect materials : $15,000.0\nindirect labor : $20,000.0\nutilities : $5,000.0\ntotal variable costs : $40,000.0\nTotal costs ........................... $70,000.0\n\nDirect labor hours 11000.0\nindirect materials : $16,500.0\nindirect labor : $22,000.0\nutilities : $5,500.0\ntotal variable costs : $44,000.0\nTotal costs ........................... $74,000.0\n\nDirect labor hours 12000.0\nindirect materials : $18,000.0\nindirect labor : $24,000.0\nutilities : $6,000.0\ntotal variable costs : $48,000.0\nTotal costs ........................... $78,000.0\n\n\ntotal budgeted costs\n\n\nShow the code\nbudgeted_costs = 186e3\nfixed_costs = 36e3\nlabor_hrs = 50e3\n# variable costs (total variable cost per unit)\nvcpu = (budgeted_costs - fixed_costs) / labor_hrs\n\n\ndef total_budgeted_costs(fixed_costs: float, vcpu: float, labor_hrs: float):\n  \n  tot_budget_costs = fixed_costs + vcpu * labor_hrs\n  print(\"Total budgeted costs ... ${:,}\".format(tot_budget_costs))\n  \n\n\n# labor_hrs = 30e3 #9e3\n\ntotal_budgeted_costs(fixed_costs, vcpu, labor_hrs)\n\n\nTotal budgeted costs ... $186,000.0"
  },
  {
    "objectID": "chapter10.html#responsiblility-accounting",
    "href": "chapter10.html#responsiblility-accounting",
    "title": "11  Budgetary Control & Responsibility",
    "section": "11.3 Responsiblility Accounting",
    "text": "11.3 Responsiblility Accounting\nResponsibility accounting is accumulating and reporting costs (and revenues) that involve the manager who has the authority to make the day-to-day decisions about cost items.\n\n\nShow the code\nprofit_co = {\n  'actual': {\n    'sales': 1.7e6,\n    'variable_costs': 800e3,\n    'fixed_costs': 400e3,\n    'unfixed_costs': 200e3\n  },\n  'budgeted': {\n    'sales': 1.5e6,\n    'variable_costs': 700e3,\n    'fixed_costs': 400e3,\n    'unfixed_costs': 200e3\n  }\n}\n\n\nfunction for responsibility report\n\n\nShow the code\ndef responsibility_report( dict ):\n  b = list(dict['budgeted'].values())\n  sb = b[0]\n  b_vc = b[1]\n  b_contrib_marg = sb - b_vc\n  b_ctrl_marg = b_contrib_marg - b[2]\n  \n  a = list(dict['actual'].values())\n  sa = a[0]\n  a_vc = a[1]\n  a_contrib_marg = sa - a_vc\n  a_ctrl_marg = a_contrib_marg - a[2]\n  \n  diff = sa - sb  - (a_contrib_marg - b_contrib_marg) \n  \n  ROI = diff / a_ctrl_marg\n  print(\"- Responsibility Report - \")\n  print(\"Budgeted controllable margin ......... ${:,}\".format(b_ctrl_marg))\n  print(\"Actual controllable margin ........... ${:,}\".format(a_ctrl_marg))\n  print(\"sales difference ..................... ${:,}\".format(sa - sb))\n  print(\"contribution margin difference ....... ${:,}\".format((a_contrib_marg - b_contrib_marg)))\n  print(\"Difference: controllable margin ............. ${:,}\".format(diff))\n  print(\"Return on Investment ........................ {:.2f}%\".format(ROI * 100))\n  \n\nresponsibility_report( profit_co )\n\n\n- Responsibility Report - \nBudgeted controllable margin ......... $400,000.0\nActual controllable margin ........... $500,000.0\nsales difference ..................... $200,000.0\ncontribution margin difference ....... $100,000.0\nDifference: controllable margin ............. $100,000.0\nReturn on Investment ........................ 20.00%"
  },
  {
    "objectID": "chapter10.html#evaluating-performance",
    "href": "chapter10.html#evaluating-performance",
    "title": "11  Budgetary Control & Responsibility",
    "section": "11.4 Evaluating Performance",
    "text": "11.4 Evaluating Performance\nThe main basis for evaluation is the return on investment (ROI) which shows how effective the manager was in using assets at their disposal. Assets such as plant andits future use are excluded from ROI. The average operating assets are based on the asset cost or value at both beginning and end of the year.\n\nROI = controllable margin / average operating assets\n\nModified Responsibility Report showing return on investments for budget vs actual costs with the difference.\n\n\nShow the code\ncolumn = ['Budget','Actual']\nctrl_margin = [300e3, 264e3] # controllable margins\navg_op_asset = 2e6  # average operating assets\n\n# return on investments\nrois = []\n\nfor x in range(len(ctrl_margin)):\n  # return\n  r = (ctrl_margin[x] / avg_op_asset) *100\n  rois.append(r)\n  print(\"{} Return on Investment .... {:.2f}%\".format(column[x], rois[x]) )\n\n# budget ROI subtract the Actual ROI\nrd = rois[0] - rois[-1]\nprint(\"Return on Investment difference : {:.2f}%\".format(rd))\n\n# use the return difference divided by the budget ROI\nroi = (rd/ rois[0])*100\nprint(\"Performance Return on Investment is {:.2f}%\".format(roi))\n\n\nBudget Return on Investment .... 15.00%\nActual Return on Investment .... 13.20%\nReturn on Investment difference : 1.80%\nPerformance Return on Investment is 12.00%\n\n\n\n11.4.1 Improving ROI\nThere are various factors that affect ROI, there is an extended ROI formula to determine what the driving factors are behind the ROI value.\n\nprofit margin = operating income / sales\ninvestment turnover = sales / operating assets\nROI = (profit margin) x (investment turnover)\n\n\n\nShow the code\nsales = 2e6 \nvariable_costs = 1.1e6\ncontrollable_fixed_costs = 300e3\navg_operating_assets = 5e6\ncontribution_margin_prct = 0.45 # margin percent\n\ncontribution_margin = sales - variable_costs\ncontrib_margin = sales * contribution_margin_prct\n\n# operating income\ncontrollable_margin = contribution_margin - controllable_fixed_costs\nroi = (controllable_margin / avg_operating_assets)*100\nprint(\"Return on Investment : {:.2f}%\".format(roi))\n\n# -- expanded\nprofit_margin = controllable_margin/ sales\ninvestment_turnover = sales / avg_operating_assets\nroi_2 = (profit_margin * investment_turnover)*100\n\nprint(\"\\nROI expanded ....... {:.2f}%\".format(roi_2))\nprint(\"Profit Margin: ......{}%  \".format(profit_margin*100))\nprint(\"Investment Turnover: {}%\".format(investment_turnover*100))\n\n\nReturn on Investment : 12.00%\n\nROI expanded ....... 12.00%\nProfit Margin: ......30.0%  \nInvestment Turnover: 40.0%\n\n\n\n\n11.4.2 ROI Example\nInvestment company data\n\n\nShow the code\ninvestment_co = {\n  'sales': 400e3,\n  'variable_costs': 320e3,\n  'controllable_fixed_costs': 40800,\n  'avg_operating_assets': 280e3\n}\n\n\nManagement wants to reduce operating assets by 80,000 with no change in controllable margin. Increase sales by 80,000 with no change in controllable margin percentage. Calculate the controllable margin and expected return on investment.\n\n\nShow the code\ndef return_on_investment( dict ):\n  print(\"--- Return on Investment ---\")\n  \n  # -- dictionary\n  sales = dict['sales']\n  var_costs = dict['variable_costs']\n  ctrl_fixed_costs = dict['controllable_fixed_costs']\n  avg_op_assets = dict['avg_operating_assets']\n  \n  # formulas\n  contribution_margin = sales - var_costs\n  contrib_margin_prct = contribution_margin / sales\n  ctrl_margin = contribution_margin - ctrl_fixed_costs\n  \n  roi = (ctrl_margin / avg_op_assets)*100\n  \n  expected_roi = ctrl_margin / (avg_op_assets - contribution_margin) *100\n  \n  # -- expanded\n  profit_margin = ctrl_margin/ sales\n  investment_turnover = sales / (avg_op_assets) #- contribution_margin)\n  roi_2 = (profit_margin * investment_turnover)*100\n  \n  #---- expected roi 2\n  sales_2 = sales + contribution_margin\n  var_cost_2 = (var_costs / sales) * sales_2\n  cm_2 = sales_2 - var_cost_2 - ctrl_fixed_costs\n  \n  roi_3 = (cm_2 / avg_op_assets)*100\n  profit_margin3 = cm_2/ sales_2\n  investment_turnover2 = sales_2 / (avg_op_assets )#- contribution_margin)\n  roi_4 = (profit_margin3 * investment_turnover2)*100\n  \n  print(\"Controllable margin ................ ${:,}\".format(ctrl_margin))\n  print(\"Return on Investment ............... {:.2f}%\".format(roi))\n  print(\"Expected return on investment ...... {:.2f}% (Expanded: {:.2f}%)\".format(expected_roi, roi_2))\n  \n  print(\"\\nAlternative:\\nControllable margin ....... ${:,}\".format(cm_2))\n  print(\"Return on Investment ...... {:.2f}%  (Expanded: {:.2f}%)\".format(roi_3, roi_4))\n\n\ncall function\n\n\nShow the code\nreturn_on_investment( investment_co )\n\n\n--- Return on Investment ---\nControllable margin ................ $39,200.0\nReturn on Investment ............... 14.00%\nExpected return on investment ...... 19.60% (Expanded: 14.00%)\n\nAlternative:\nControllable margin ....... $55,200.0\nReturn on Investment ...... 19.71%  (Expanded: 19.71%)\n\n\n\n\n11.4.3 Residual Income\nResidual income is the income that remains after subtracting from the controllable margin the minimum rate of return on a company’s average operating assets.\n\nresidual income = controllable margin - (min. rate of return x average operating assets)\n\nFormula\n\n\nShow the code\navg_operating_assets = 2e6\ncontrollable_margin = 260e3\nmin_rate_of_return = 0.10\n\nresidual_income = controllable_margin - (min_rate_of_return * avg_operating_assets)\nprint(\"Residual income ... ${:,}\".format(residual_income))\n\n\nResidual income ... $60,000.0"
  },
  {
    "objectID": "chapter11.html",
    "href": "chapter11.html",
    "title": "12  Standard Costs",
    "section": "",
    "text": "In managerial accounting standard costs are predetermined unit costs that are used as measures of performance. To establish the standard cost of producing a product, it is essential to create standards for each manufacturing cost element (direct materials, direct labor, manufacturing overhead). Each element is determined from the standard orice to be paid and the standard quantity to be used.\nA company example, Company X makes concentrated caffeinated syrups to be sold and used by beverage serving retail shops.\n\ndirect materials price standard is the cost per unit of direct materials that should be incurred. This standard is based on purchasing department’s best estimate of the cost of raw materials {current purchase price} + {receiving costs, storing costs, handling costs}.\ndirect materials quantity standard is the quantity of direct materials that should be used per unit of finished goods, expressed in units of kg, barrels or liters. The standard should allow for extra amounts of waste or spoilage.\nstandard direct materials cost per unit is standard direct materials price times the standard direct materials quantity\ndirect labor price standard is the rate per hour that should be incurred for direct labor (based on current wages, payroll taxes, benefits). In Canada there is cost of living adjustment COLA.\ndirect labor quantity standard is the time that should be required to make one item unit of the product. Allowances should be made for rest periods, cleanup, machine setup and machine downtime.\nstandard direct labor cost per unit is the direct labor rate times the direct labor hours\n\nCompany X direct material data is in a dictionary. Direct materials price and quantity dictionaries are separate here but can easily be placed inside one data dictionary.\n\n\nShow the code\n# --- price standard\nmaterials_price = {\n  'purchase_price': 2.70,\n  'freight': 0.20,\n  'receiving_handling': 0.10\n}\n\nstandard_price = sum(materials_price.values())\nprint(\"Standard direct materials price per liter : ${:.2f}\".format(standard_price))\n\n# --- quantity standard\nmaterials_quantity = {\n  'required_materials': 3.5,\n  'waste_allowance': 0.4, # allowance for waste\n  'spoilage_waste': 0.1\n}\n\nstandard_quantity = sum(materials_quantity.values())\nprint(\"Standard direct materials quantity per unit : ${:.2f}\".format(standard_quantity))\n\n\n# standard dm cost per unit\nsdm_cpu = standard_price * standard_quantity\nprint(\"Standard direct materials cost per unit : ${:.2f} (liter)\".format(sdm_cpu))\n\n\n# --- standard labor\nlabor = {\n  'hourly_wage_rate': 12.5,\n  'COLA': 0.25, # cost of living adjustments\n  'payroll_taxes': 0.75,\n  'benefits': 1.50\n}\n\nstandard_labor = sum(labor.values())\nprint(\"Standard direct labor rate per hour : ${:.2f}\".format(standard_labor))\n\n\n# --- labor quantity\nlabor_quant = {\n  'actual_production_time_hrs': 1.5,\n  'rest_periods_cleanup_hrs': 0.2,\n  'setup_downtime_hrs': 0.3\n}\nstandard_labor_quantity = sum(labor_quant.values())\nprint(\"Standard direct labor hours per unit : {:.2f} (hours)\".format(standard_labor_quantity))\n\n\n# -- labor cost per unit\nlabor_cpu = standard_labor * standard_labor_quantity\nprint(\"Standard direct labor cost per unit : ${:.2f}\".format(labor_cpu))\n\n\nStandard direct materials price per liter : $3.00\nStandard direct materials quantity per unit : $4.00\nStandard direct materials cost per unit : $12.00 (liter)\nStandard direct labor rate per hour : $15.00\nStandard direct labor hours per unit : 2.00 (hours)\nStandard direct labor cost per unit : $30.00\n\n\n\nManufacturing overhead standard predetermined overhead rate is used in setting the standard. The rate is determined by dividing the budgeted overhead cost by the expected standard activity index {labor hours and standard machine hours}. Activity Based Costing (ABC) can be used to allocate the overhead costs.\nnormal capacity is the average activity output that a company should experience over the long run.\nstandard manufacturing overhead rate per unit is predeteremined overhead rate times the activity index quantity standard\ntotal standard cost per unit is the sum of the standard costs of direct materials , labor, manufacturing overhead\n\nCompany X uses standard direct labor for it’s activity index, and expects to produce 13,200 liters through the year at normal capacity.\n\n\nShow the code\n# expected number for production\nexpected_prod = 13200\nstandard_direct_labour_hrs = standard_labor_quantity * expected_prod\n\nbudgeted_overhead = {'variable_costs': 79200, 'fixed_costs': 52800}\n\noverhead = list(budgeted_overhead.values())\ntotal_bugeted_overhead = sum(overhead)\n\n# overhead rate per direct labor hour\nvar_rphr = overhead[0] / standard_direct_labour_hrs\nfixed_rphr = overhead[1] / standard_direct_labour_hrs\ntotal_rphr = var_rphr + fixed_rphr\n\nstandard_manuf_rpu = total_rphr * standard_labor_quantity\n\n\nprint(\"Standard direct labor hours ...... {:,}\".format(standard_direct_labour_hrs))\nprint(\"Total budgeted overhead costs .... ${:,}\".format(total_bugeted_overhead))\nprint(\"Variable: overhead rate per labor hour .... ${:,}\".format(var_rphr))\nprint(\"Fixed: overhead rate per labor hour .... ${:,}\".format(fixed_rphr))\nprint(\"Total overhead rate per labor hour .... ${:,}\".format(total_rphr))\nprint(\"Standard manufacturing overhead rate per unit .... ${:,}\".format(standard_manuf_rpu))\n\n\nStandard direct labor hours ...... 26,400.0\nTotal budgeted overhead costs .... $132,000\nVariable: overhead rate per labor hour .... $3.0\nFixed: overhead rate per labor hour .... $2.0\nTotal overhead rate per labor hour .... $5.0\nStandard manufacturing overhead rate per unit .... $10.0\n\n\nTotal standard cost per unit\n\n\nShow the code\ntotal_standard = (standard_price * standard_quantity) +\\\n                (standard_labor * standard_labor_quantity) + \\\n                (total_rphr * standard_labor_quantity)\n                \nprint(\"Total standard cost per unit ...... ${:,}\".format(total_standard))\n\n\nTotal standard cost per unit ...... $52.0"
  },
  {
    "objectID": "chapter11.html#direct-materials-variance",
    "href": "chapter11.html#direct-materials-variance",
    "title": "12  Standard Costs",
    "section": "12.1 Direct Materials Variance",
    "text": "12.1 Direct Materials Variance\nThe total direct materials budget variance (TDMBV) is the calculation between the amount paid (actual quantity times the actual price) and the amount that should have been paid based on standards (standard quantity times standard price of materials).\n\ntotal variance = material variance + labor variance + overhead variance\nactual_quantity_price = total actual quantities (TAQ) x actual price (AP)\nstandard_quantity_price = total standard quantities allowed (TQSA) x standard price (SP)\nTDMBV = ( actual_quantity_price ) - ( standard_quantity_price )\ntotal materials variance = materials price variance + materials quantity variance\nmaterials price variance (MPV) = (TAQ x SP) - (TQSA x SP)\n\nA company X data is in a data dictionary for direct materials variances\n\n\nShow the code\ncompany_std = {\n  'units': 2,\n  'direct_materials_1':{'cpu': 8, 'units_produced': 22e3},\n  'direct_materials_2': {'cpu': 7.5, 'units_produced': 10e3}\n}\n\n\nfunction\n\n\nShow the code\ndef direct_materials_variance( dict ):\n  TAQ = list(dict['direct_materials_1'].values())[1]\n  SP = list(dict['direct_materials_1'].values())[0]\n  AP = list(dict['direct_materials_2'].values())[0]\n  TSQ = list(dict['direct_materials_2'].values())[1] * dict['units']\n  \n  total_materials_var = (TAQ * AP) - (TSQ * SP)\n  materials_price_var = (TAQ * AP) - (TAQ * SP)\n  materials_quant_var = (TAQ * SP) - (TSQ * SP)\n  \n  # print(SP, TAQ, AP, units)\n  print(\"Total materials variance ..... ${:,}\".format(total_materials_var))\n  print(\"Materials price variance ..... ${:,}\".format(materials_price_var))\n  print(\"Materials quantity variance ..... ${:,}\".format(materials_quant_var))\n  \n\ndirect_materials_variance( company_std )\n\n\nTotal materials variance ..... $5,000.0\nMaterials price variance ..... $-11,000.0\nMaterials quantity variance ..... $16,000.0"
  },
  {
    "objectID": "chapter11.html#direct-labor-manufacturing-variance",
    "href": "chapter11.html#direct-labor-manufacturing-variance",
    "title": "12  Standard Costs",
    "section": "12.2 Direct Labor & Manufacturing Variance",
    "text": "12.2 Direct Labor & Manufacturing Variance\nThe total labor variance is the difference between the amount actually paid for labor versus the amount that should have been paid. The total direct labor budget variance (TDLBV) is the difference between the amount actually paid for labor (actual hours times actual rate) and the amount that should have been paid (standard hours times standard rate for labor).\n\nTAH total actual hours\nAH actual hours\nTSHA total standard hours allowed\nSR standard rate\nTDLBV = (TAH * AH) - (TSHA * SR)\n\nTotal labor variance is caused by differences in the labor rate or differences in labor hours.\n\ntotal labor variance = labor price variance + labor quantity variance\nAR actual rate\nLabor Price Variance (LPV) = (TAH * AR) - (TAH * SR) or use: LPV = AH x (AR - SR)\nLabor Quantity Variance (LQV)\nLQV = (TAH * SR) - (TSHA * SR) or use: LQV = SR x (AH - SH)"
  },
  {
    "objectID": "chapter11.html#total-overhead-variance",
    "href": "chapter11.html#total-overhead-variance",
    "title": "12  Standard Costs",
    "section": "12.3 Total Overhead Variance",
    "text": "12.3 Total Overhead Variance\nTotal overhead variance is the difference between the actual overhead costs and overhead costs applied based on standard hours allowed for the amount of goods produced. To find the total overhead variance in a standard costing system, determine the overhead costs applied based on standard hours allowed. Total standard hours allowed are the hours that should have been worked for the units produced.\n\nTotal overhead variance (TOHV)\nTOHV = (actual overhead) - (TSHA * SR)\nTotal variable overhead budget vaiance (TVOHBV)\nTVOHBV = (actual variable overhead) - (TSHA * SR)\nVariable overhead spending price variance (VOHSPV)\nVOHSPV = (actual variable overhead) - (TAH * SR)\nVariable overhead efficiency variance (VOHEV)\nVOHEV = (TAH * SR) - (TSHA * SR) or use: VOHEV = SR * (AH - SH)"
  },
  {
    "objectID": "chapter11.html#total-fixed-overhead-variance",
    "href": "chapter11.html#total-fixed-overhead-variance",
    "title": "12  Standard Costs",
    "section": "12.4 Total Fixed Overhead Variance",
    "text": "12.4 Total Fixed Overhead Variance\nThe total fixed overhead variance is the difference between the actual fixed overhead and the total standard hours allowed multiplied by the fixed overhead rate. The fixed overhead spending budget variance shows whether spending on fixed costs was under or over the budgeted fixed costs for the year.\n\ntotal fixed overhead variance (TFOHV)\nTFOHV = (actual fixed overhead) - (TSHA * SR)\nfixed overhead spending variance (FOHSV)\nnormal capacity hours at standard fixed overhead rate (NCH)\nFOHSV = (actual fixed overhead costs) - (NCH * SR)\n\nThe fixed overhead volume variance is for the question of did the company use fixed capacity effectively.\n\nfixed overhead volume variance = (NCH * SR) - (TSHA * SR)\n\nLabor and manufacturing overhead variance example\n\n\nShow the code\nlmov = {\n  'std_cost_labor_hrs': 3,\n  'std_cost_labor_per_hr' : 12,\n  'predetermined_overhead_rate_per_hr': 20,\n  'incurred_labor_hours': 3500,\n  'avg_rate_per_hr': 12.4,\n  'manufacturing_overhead_costs': 71300,\n  'units_produced': 1200\n}\n\n\nfunction for labor and manufacturing overhead variance\n\n\nShow the code\ndef LMOV( dict ):\n  \n  TAH = dict['incurred_labor_hours']\n  AR = dict['avg_rate_per_hr']\n  SR = dict['std_cost_labor_per_hr']\n  TSHA = dict['units_produced'] * dict['std_cost_labor_hrs']\n  actual_overhead = dict['manufacturing_overhead_costs']\n  overhead_applied = TSHA * dict['predetermined_overhead_rate_per_hr']\n  \n  # total direct labor budget var = ( TAH * AR ) - ( TSHA * SR )\n  tdlbv = (TAH * AR) - (TSHA * SR)\n  # labor price var = (TAH * AR ) - (TAH * SR)\n  lpv = (TAH * AR) - (TAH * SR)\n  # labor quantity var = (TAH * SR) - (TSHA * SR)\n  lqv = (TAH * SR) - (TSHA * SR)\n  # total overhead var = actual overhead - overhead applied\n  tov = actual_overhead - overhead_applied\n  \n  print(\"-- Labor & Manufacturing Overhead Variance -\")\n  print(\"Total labor variance .......... ${:,}\".format(tdlbv))\n  print(\"Labor price variance .......... ${:,}\".format(lpv))\n  print(\"Labor quantity variance ....... ${:,}\".format(lqv))\n  print(\"Total overhead variance ....... ${:,}\".format(tov))\n\n  \nLMOV( lmov )\n\n\n-- Labor & Manufacturing Overhead Variance -\nTotal labor variance .......... $200.0\nLabor price variance .......... $1,400.0\nLabor quantity variance ....... $-1,200\nTotal overhead variance ....... $-700"
  },
  {
    "objectID": "chapter11.html#reporting-variances",
    "href": "chapter11.html#reporting-variances",
    "title": "12  Standard Costs",
    "section": "12.5 Reporting Variances",
    "text": "12.5 Reporting Variances\nA company X data is in the data dictionary\n\n\nShow the code\nvariances = {\n  'materials_price': 250,\n  'materials_quantity': 1100,\n  'labor_price': 700,\n  'labor_quantity': 300,\n  'overhead': 800,\n  'sales_revenue': 102700,\n  'cost_of_goods_sold': 61900\n}\n\n\nfunction for reporting variances, in this example labor price of $700 is labelled as unfavorable and is omitted from the usual list and summation.\n\n\nShow the code\ndef report_variance( dict ):\n  std_gross_profit = dict['sales_revenue'] - dict['cost_of_goods_sold']\n  tot_vars = sum(list(dict.values())[:-2])\n  \n  # -- 700 is element 2 in the list array and for this example subtracted\n  a = list(dict.values())[:-2]\n  b = a[0:2]\n  c = a[3:5]\n  fav_var = sum(b+c) - a[2]\n  gross_profit_actual = std_gross_profit + fav_var\n  \n  print(\"- Report on Variance -\")\n  print(\"Standard gross profit ................. ${:,}\".format(std_gross_profit))\n  print(\"total variance  ....................... ${:,}\".format(tot_vars))\n  print(\"total variance favorable  ............. ${:,}\".format(fav_var))\n  print(\"Gross profit (actual)  ................ ${:,}\".format(gross_profit_actual))\n  \n\nreport_variance( variances )\n\n\n- Report on Variance -\nStandard gross profit ................. $40,800\ntotal variance  ....................... $3,150\ntotal variance favorable  ............. $1,750\nGross profit (actual)  ................ $42,550"
  },
  {
    "objectID": "chapter12.html#cash-payback-technique",
    "href": "chapter12.html#cash-payback-technique",
    "title": "13  Planning for Capital Investments",
    "section": "13.1 Cash Payback Technique",
    "text": "13.1 Cash Payback Technique\nThe cash payback technique identifies the time period required to recover the cost of the capital investment from the net annual cash flow produced by the investment.\n\ncash payback technique (CPT) = (cost of capital investment) / (net annual cash flow)\n\n\n13.1.1 Example\nA company is considering a new machine, the new machine would cost $900,000, with an estimated 6 years of life and no salvage value after 6 years.\n\n\nShow the code\ncashback = {\n  'investment_cost': 900e3,\n  'estimated_life' : 6,\n  'estimated_salvage' : 0,\n  'cash_inflow_customers' : 400e3,\n  'cash_outflow_operations' : 190e3\n}\n\n\nFunction for cash payback period calculation\n\n\nShow the code\ndef payback_period( dict ):\n  investment = dict['investment_cost']\n  estimated_life = dict['estimated_life']\n  \n  cash_inflow_customers = dict['cash_inflow_customers']\n  cash_outflow_operations = dict['cash_outflow_operations']\n  annual_cashflow = cash_inflow_customers - cash_outflow_operations\n  print(\"Net annual cash flow ......... ${:,}\".format(annual_cashflow))\n  \n  cpt = investment / annual_cashflow\n  useful_life = cpt/estimated_life*100\n  print(\"Cash payback technique ....... {:.2f} years ({:.0f}% of asset's life)\".format(cpt, useful_life ))\n  \n  \npayback_period( cashback )\n\n\nNet annual cash flow ......... $210,000.0\nCash payback technique ....... 4.29 years (71% of asset's life)"
  },
  {
    "objectID": "chapter12.html#net-present-value",
    "href": "chapter12.html#net-present-value",
    "title": "13  Planning for Capital Investments",
    "section": "13.2 Net Present Value",
    "text": "13.2 Net Present Value\nNet present value (NPV) method involves discounting net cash flows to their present value and then comparing that present value with the capital required by the investment. A proposal is acceptable when net present value is 0 or positive.\n\nNPV = net cash flow - capital investment"
  },
  {
    "objectID": "chapter12.html#equal-annual-cash-flows",
    "href": "chapter12.html#equal-annual-cash-flows",
    "title": "13  Planning for Capital Investments",
    "section": "13.3 Equal Annual Cash Flows",
    "text": "13.3 Equal Annual Cash Flows\nUsing the cash flow data from previously, if an asset’s life is to be assumed to be uniform, calculate the present value of net annual cash flow by using the present value of an ordinary annuity. To get the value of ordinary annuity, use a table which requires to know the n periods and the discount rate n %, in this case the periods are 10 (10 years) and discount rate of 12%.\n\nTable: 10 periods, 12% = 5.65022\nNet cash flow is $24,000\n\n\n\nShow the code\nequal_cashflow = {\n  'investment': 130e3,\n  'estimated_life' : 10,\n  'estimated_salvage':  0,\n  'cash_inflow_customers': 200e3,\n  'cash_outflow_operations': 176e3\n}\n\ndef equal_cashflows( annuity_value,  dict ):\n  \n  annual_cashflow = dict['cash_inflow_customers'] - dict['cash_outflow_operations']\n  \n  print(\"Net annual cash flow ..... ${:,}\".format(annual_cashflow))\n  # annuity_value = 5.65022 # value from a table\n  pv = annual_cashflow * annuity_value\n  npv = pv - dict['investment']\n  print(\"Net present value ........ ${:.2f}\".format(npv))\n\n\nequal_cashflows( 5.65022, equal_cashflow )\n\n\nNet annual cash flow ..... $24,000.0\nNet present value ........ $5605.28"
  },
  {
    "objectID": "chapter12.html#unequal-annual-cash-flow",
    "href": "chapter12.html#unequal-annual-cash-flow",
    "title": "13  Planning for Capital Investments",
    "section": "13.4 Unequal Annual Cash Flow",
    "text": "13.4 Unequal Annual Cash Flow\nFor unequal annual cash flows, need to use tables that show present value of a single future amount that must be applied to each annual cash flow.\n\ntotal net cash flow for the 10 years = $240,000\neach year of annual net cash flow is assumed and is more or less around 24,000\nthe discount factor annuities for 12% are found using a table (present value of a single sum)\ncapital investment is $130,000\n\nThis code is inside a function only to bring attention that the calculations are for unequal_cashflows. If you have the table values in an array as shown in the discount factor array. The NumPy library is used to quickly make an array list of integers from 0 to 9, instead of typing the numbers by hand.\n\n\nShow the code\ndef unequal_cashflows():\n  import numpy as np\n  \n  # create an array 0 to 9\n  years = np.arange(10)\n  # assumed annual net cash flows 18,000 to 24,000 (for 10 years)\n  yearly_cashflows = [34e3, 30e3, 27e3,25e3,24e3,22e3,21e3,20e3,19e3, 18e3]\n  # discount_factor for 12% values from a table for 10 periods (n)\n  discount_factor = [0.89286, 0.79719,0.71178,0.63552,0.56743,0.50663,0.45235,0.40388,0.36061,0.32197]\n  \n  capital_investment = 130e3\n  \n  # present values\n  pv = []\n  \n  for x in range(len(years)):\n    PV = yearly_cashflows[x] * discount_factor[x]\n    pv.append(PV)\n    \n    # comment out this line to only show the final total present value\n    print(\"Year: {} Present value @ 12% ... ${:.2f}\".format(years[x]+1, pv[x]))\n  \n  total_pv = sum(pv)\n  npv = total_pv - capital_investment \n  \n  print(\"Present value @ 12% cash flows ..... ${:,}\".format( total_pv ))\n  print(\"Net present value .................. ${:.2f}\".format( npv ))\n\n\nunequal_cashflows()\n\n\nYear: 1 Present value @ 12% ... $30357.24\nYear: 2 Present value @ 12% ... $23915.70\nYear: 3 Present value @ 12% ... $19218.06\nYear: 4 Present value @ 12% ... $15888.00\nYear: 5 Present value @ 12% ... $13618.32\nYear: 6 Present value @ 12% ... $11145.86\nYear: 7 Present value @ 12% ... $9499.35\nYear: 8 Present value @ 12% ... $8077.60\nYear: 9 Present value @ 12% ... $6851.59\nYear: 10 Present value @ 12% ... $5795.46\nPresent value @ 12% cash flows ..... $144,367.18\nNet present value .................. $14367.18"
  },
  {
    "objectID": "chapter12.html#choosing-a-discount-rate",
    "href": "chapter12.html#choosing-a-discount-rate",
    "title": "13  Planning for Capital Investments",
    "section": "13.5 Choosing a Discount Rate",
    "text": "13.5 Choosing a Discount Rate\nIn the world of business, the discount rate is chosen by using a rate that is equal to its cost of capital which is the rate that a company must pay to get funds from creditors and shareholders.\n\ncompany can compare 12% vs 15% (riskier investment): 5.65022 and 5.01877\nnet cash flow = $24,000\ninvestment $130,000\n\nThis quick function has the 2 values for 10 periods and for 12% and 15% inside the function.\n\n\nShow the code\ndef discount_rate(cashflow: int, investment: int):\n  rate1 = cashflow * 5.65022  # 12%\n  rate2 = cashflow * 5.01877  # 15%\n  \n  npv1 = round(rate1 - investment, 2)\n  npv2 = round(rate2 - investment, 2)\n  \n  print(\" - Discount Rate -\")\n  print(\"Net present value for {}% ..... ${:,}\".format(12, npv1) )\n  print(\"Net present value for {}% ..... ${:,}\".format(15, npv2) )\n\n\ncall function\n\n\nShow the code\ndiscount_rate(24e3, 130e3)\n\n\n - Discount Rate -\nNet present value for 12% ..... $5,605.28\nNet present value for 15% ..... $-9,549.52\n\n\n\n13.5.1 Example\nThis example is the extension of the cash payback, but now with the discount rate (rate of return) being 9%. The value is found by using the table present value of an ordinary annuity of 1. The period being 6 years and at 9% has the value of 4.48592.\n\n\nShow the code\ncashback = {\n  'investment_cost': 900e3,\n  'estimated_life' : 6,\n  'estimated_salvage' : 0,\n  'cash_inflow_customers' : 400e3,\n  'cash_outflow_operations' : 190e3,\n  'rate_of_return': 0.09 # discount rate\n}\n\n\na function for calculating present value for annuities\n\n\nShow the code\ndef present_value( annuity: float, dict ):\n  investment = dict['investment_cost']\n  estimated_life = dict['estimated_life']\n  \n  cash_inflow_customers = dict['cash_inflow_customers']\n  cash_outflow_operations = dict['cash_outflow_operations']\n  annual_cashflow = cash_inflow_customers - cash_outflow_operations\n  print(\"Net annual cash flow ......... ${:,}\".format(annual_cashflow))\n  \n  cpt = investment / annual_cashflow\n  useful_life = cpt/estimated_life*100\n  print(\"Cash payback technique ....... {:.2f} years ({:.0f}% of asset's life)\".format(cpt, useful_life ))\n  \n\n  # annuity_value = 4.48592 # value from a table\n  pv = annual_cashflow * annuity #annuity_value\n  npv = round(pv - investment,2)\n  print(\"Net present value ............. ${:,}\".format(npv))\n\n\ncall function\n\n\nShow the code\npresent_value( 4.48592, cashback )\n\n\nNet annual cash flow ......... $210,000.0\nCash payback technique ....... 4.29 years (71% of asset's life)\nNet present value ............. $42,043.2\n\n\n\nFor a fully formed function, you could have rate of return (discount rate) and the n periods and return the value for annuity by using a CSV table or some data structure."
  },
  {
    "objectID": "chapter12.html#intangible-benefits",
    "href": "chapter12.html#intangible-benefits",
    "title": "13  Planning for Capital Investments",
    "section": "13.6 Intangible Benefits",
    "text": "13.6 Intangible Benefits\nIntangible benefits are values such as increased quality, improved safety, greater employee loyalty, etc. and are values typically eliminated from the equation when doing net present value using tangible costs and benefits.\n\nif the NPV is negative, are the intangible assets worth at least the amount of the negative NPV\nestimated values of the intangible benefits are used in the NPV calculation\n\nA company example\n\n\nShow the code\nrobot_investment = {\n  'investment_cost': 200e3,\n  'estimated_life' : 10,\n  'estimated_salvage' : 0,\n  'cash_inflow_customers' : 50e3,\n  'cash_outflow_operations' : 20e3,\n  'rate_of_return': 0.12 # discount rate\n}\n\n\nFunction to get the present value that takes the annuity value, assuming the user looks up the value for the function input.\n\n\nShow the code\npresent_value( 5.65022, robot_investment )\n\n\nNet annual cash flow ......... $30,000.0\nCash payback technique ....... 6.67 years (67% of asset's life)\nNet present value ............. $-30,493.4\n\n\nStaff at the company estimate that sales will increase of $10,000 annually due to the increase in quality from customers point of view. Staff also estimate the cost outflows will be reduced by 5,000 as a result from lower injury claims. Update the robot investment data and call the present value function with the annuity value.\n\n\nShow the code\nrobot_investment2 = {\n  'investment_cost': 200e3,\n  'estimated_life' : 10,\n  'estimated_salvage' : 0,\n  'cash_inflow_customers' : 60e3,\n  'cash_outflow_operations' : 15e3,\n  'rate_of_return': 0.12 # discount rate\n}\n\n\n\n\nShow the code\npresent_value( 5.65022, robot_investment2 )\n\n\nNet annual cash flow ......... $45,000.0\nCash payback technique ....... 4.44 years (44% of asset's life)\nNet present value ............. $54,259.9\n\n\nBusiness decision based on net present values. Ideally the conditional statement would be inside a function.\n\n\nShow the code\nnpv1 = abs(-30493.4)\nnpv2 = 54259.9\nif npv2 > npv1:\n  print(\"Company should accept project\")\nelse:\n  print(\"do not accept project\")\n\n\nCompany should accept project"
  },
  {
    "objectID": "chapter12.html#mutually-exclusive-projects",
    "href": "chapter12.html#mutually-exclusive-projects",
    "title": "13  Planning for Capital Investments",
    "section": "13.7 Mutually Exclusive Projects",
    "text": "13.7 Mutually Exclusive Projects\nMost project proposals are mutually exclusive, which means only 1 project is afforded the finances to proceed. One appealing method of selecting a project is to go with the project with the higher NPV. Profitability index is a method that evaluates both the size of the original investment and the discounted cash flows.\n\nprofitability index = present value net cash flows / initial investment\n\n\n\nShow the code\nprojects = {\n  'project_A': {\n    'investment': 40e3,\n    'annual_cash_inflow': 10e3,\n    'salvage_value': 5e3\n    },\n  'project_B': {\n    'investment': 90e3,\n    'annual_cash_inflow': 19e3,\n    'salvage_value': 10e3\n    }\n}\n\n\nfunction to compare present value of net cash flows, a 12% discount rate. This function has profitability index inside.\n\n\nShow the code\ndef exclusive_projects( annuity1: float, annuity2: float, dict ):\n  \n  # project A\n  projA = list(dict['project_A'].values())\n  investmentA = projA[0]\n  cash_inflow_A = projA[1]\n  salvage_A = projA[2]\n  \n  # project B\n  projB = list(dict['project_B'].values())\n  investmentB = projB[0]\n  cash_inflow_B = projB[1]\n  salvage_B = projB[2]\n  \n  pvA = round( (cash_inflow_A * annuity1) + (salvage_A * annuity2), 2)\n  pvB = round( (cash_inflow_B * annuity1) + (salvage_B * annuity2), 2)\n  \n  print(\"Project A : present value of net cash flows ............. ${:,}\".format(pvA))\n  print(\"Project B : present value of net cash flows ............. ${:,}\\n\".format(pvB))\n\n  npvA = round(pvA - investmentA, 2)\n  npvB = round(pvB - investmentB, 2)\n\n  print(\"Project A : Net present value ............. ${:,}\".format(npvA))\n  print(\"Project B : Net present value ............. ${:,}\".format(npvB))\n\n  if npvA > npvB:\n    print(\" Project A has higher NPV\", '\\U0001f7e1')\n  else:\n    print(\" Project B has higher NPV\", '\\U0001f7e1')\n\n  # -- profitability index \n  pindexA = round(pvA / investmentA, 2)\n  pindexB = round(pvB / investmentB, 2)\n  \n  print(\"\\nProject A : Profitability Index ............. {:.2f}\".format(pindexA))\n  print(\"Project B : Profitability Index ............. {:.2f}\".format(pindexB))\n  \n  if pindexA > pindexB:\n    print(\" Project A has higher profitability\", '\\U0001f7e2')\n  else:\n    print(\" Project B has higher profitability\", '\\U0001f7e2')\n\n\nProject A has annuity of 5.65022 and Project B has annuity of 0.32197 at the 12% discount rate for 10 periods for both.\n\n\nShow the code\na12 = 5.65022\nb12 = 0.32197\n\nexclusive_projects(a12, b12, projects)\n\n\nProject A : present value of net cash flows ............. $58,112.05\nProject B : present value of net cash flows ............. $110,573.88\n\nProject A : Net present value ............. $18,112.05\nProject B : Net present value ............. $20,573.88\n Project B has higher NPV 🟡\n\nProject A : Profitability Index ............. 1.45\nProject B : Profitability Index ............. 1.23\n Project A has higher profitability 🟢"
  },
  {
    "objectID": "chapter12.html#internal-rate-of-return",
    "href": "chapter12.html#internal-rate-of-return",
    "title": "13  Planning for Capital Investments",
    "section": "13.8 Internal Rate of Return",
    "text": "13.8 Internal Rate of Return\nThe internal rate of return is the interest rate that will cause the present value of the proposed capital expenditure to equal the present value of the expected net annual cash flows.\nIf the cash flows are uneven, then trial-and-error approach or a financial calculator is to be used. Once the internal rate of return (IRR), compare it with the required rate of return (RRR) (discount rate).\nif IRR >= RRR:\n  Accept project\nelse:\n  Reject project\nA company is pondering buying a new machine\n\n\nShow the code\nmachine_investment = {\n  'investment_cost': 900e3,\n  'estimated_life' : 6,\n  'estimated_salvage' : 0,\n  'cash_inflow_customers' : 400e3,\n  'cash_outflow_operations' : 190e3,\n  'rate_of_return': 0.09 # REQUIRED /discount rate\n}\n\n\nInternal rate of return function (changed present_value() function)\n\n\nShow the code\ndef irr( annuity: float, dict ):\n  investment = dict['investment_cost']\n  estimated_life = dict['estimated_life']\n  \n  cash_inflow_customers = dict['cash_inflow_customers']\n  cash_outflow_operations = dict['cash_outflow_operations']\n  annual_cashflow = cash_inflow_customers - cash_outflow_operations\n  print(\"Net annual cash flow ....................... ${:,}\".format(annual_cashflow))\n  \n  cpt = investment / annual_cashflow\n  print(\"Internal Rate of Return factor (IRR) ....... {:.2f} years \".format(cpt  ))\n  \n\n  pv = annual_cashflow * annuity #annuity_value\n  npv = round(pv - investment,2)\n  # print(\"Net present value .......................... ${:,}\".format(npv))\n\n\nCall the internal rate of return function with the annuity value, using the information of 6 years (n periods) and 9% for rate of return.\n\n\nShow the code\n# Table : 6 periods, 9%\nannuity = 4.48592 \nirr( annuity, machine_investment )\n\n\nNet annual cash flow ....................... $210,000.0\nInternal Rate of Return factor (IRR) ....... 4.29 years \n\n\nNow that we have the IRR value, we look up in a table for present value of ordinary annuity to find closest value. In this case, there are two numbers at the 10% and 11% place that when averaged equal the IRR. So the IRR is > RRR (the 9%), the accept the project.\n\n\nShow the code\n# table values for 10% and 11%\nnums = [4.35526, 4.23054]\nprint(\"IRR factors for 10% and 11% (averaged) = \",sum(nums)/2)\n\n\nIRR factors for 10% and 11% (averaged) =  4.2929"
  },
  {
    "objectID": "chapter12.html#annual-rate-of-return",
    "href": "chapter12.html#annual-rate-of-return",
    "title": "13  Planning for Capital Investments",
    "section": "13.9 Annual Rate of Return",
    "text": "13.9 Annual Rate of Return\nAnnual rate of return method is based on directly on accrual accounting data rather than on cash flows. This annual rate of return indicates the profitability of a capital expenditure.\n\nannual rate of return (ARR) = expected net income / annual average investment\n\nCompany investment data\n\n\nShow the code\nmachine_investment2 = {\n  'sales': 200e3,\n  'investment_cost': 130e3,\n  'estimated_life' : 5,\n  'estimated_salvage' : 0,\n  'manufacturing_costs': 132e3,\n  'selling_admin': 22e3,\n  'income_tax_expense': 7e3\n}\n\n\nfunction for annual rate of return\n\n\nShow the code\ndef annual_return( dict ):\n  sales = dict['sales']\n  manuf_costs = dict['manufacturing_costs']\n  depreciation = dict['investment_cost'] / dict['estimated_life']\n  sell_admin= dict['selling_admin']\n  tax_exp = dict['income_tax_expense']\n  \n  cost_expenses = manuf_costs + depreciation + sell_admin \n  print(\"Costs & Expenses ........................ ${:,}\".format(cost_expenses))\n  income_b4_tax = sales - cost_expenses\n  print(\"Income before income taxes .............. ${:,}\".format(income_b4_tax))\n  net_income = income_b4_tax - tax_exp\n  print(\"Net income .............................. ${:,}\".format(net_income))\n  \n  avg_investment = (dict['investment_cost'] + dict['estimated_salvage'])/2\n  print(\"Average investment ...................... ${:,}\".format(avg_investment))\n  \n  # expected annual rate of return on investment in new equipment/ machine\n  exp_return = net_income / avg_investment\n  print(\"Expected annual rate of return ...................... {:,}%\".format(exp_return *100))\n\n\n\n\nShow the code\nannual_return( machine_investment2 )\n\n\nCosts & Expenses ........................ $180,000.0\nIncome before income taxes .............. $20,000.0\nNet income .............................. $13,000.0\nAverage investment ...................... $65,000.0\nExpected annual rate of return ...................... 20.0%\n\n\n\n13.9.1 Example\n\n\nShow the code\nmachine_investment = {\n  'investment_cost': 900e3,\n  'estimated_life' : 6,\n  'estimated_salvage' : 0,\n  'cash_inflow_customers' : 400e3,\n  'cash_outflow_operations' : 190e3,\n  'rate_of_return': 0.09 # REQUIRED /discount rate\n}\n\n\nA function for annual rate of return\n\n\nShow the code\ndef annual_return2( dict ):\n  \n  revenue = dict['cash_inflow_customers']\n  expenses = dict['cash_outflow_operations']\n  depreciation = dict['investment_cost'] /dict['estimated_life']\n  cost_expenses = expenses + depreciation \n  net_income = revenue - cost_expenses\n  \n  print(\"Revenue ................................. ${:,}\".format(revenue))\n  print(\"Costs & Expenses ........................ ${:,}\".format(cost_expenses))\n  print(\"Annual net income ....................... ${:,}\".format(net_income))\n  \n  avg_investment = (dict['investment_cost'] + dict['estimated_salvage'])/2\n  print(\"Average investment ...................... ${:,}\".format(avg_investment))\n  \n  # expected annual rate of return on investment in new equipment/ machine\n  exp_return = round(net_income / avg_investment, 2)*100\n  print(\"Expected annual rate of return (ARR) ...................... {:,}%\".format(exp_return ))\n\n  RRR = dict['rate_of_return'] *100\n  # print(RRR)\n  \n  # if ARR > RRR\n  if exp_return > RRR:\n    print(\" project should go ahead (ARR > RRR) \", '\\U0001f7e2')\n  else:\n    print(\" project should not go ahead (ARR < RRR) \", '\\U0001f7e0')\n\n\n\n\nShow the code\nannual_return2( machine_investment )\n\n\nRevenue ................................. $400,000.0\nCosts & Expenses ........................ $340,000.0\nAnnual net income ....................... $60,000.0\nAverage investment ...................... $450,000.0\nExpected annual rate of return (ARR) ...................... 13.0%\n project should go ahead (ARR > RRR)  🟢"
  }
]